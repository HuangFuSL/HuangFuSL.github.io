{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":true,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"index.html#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"index.html#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"index.html#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about.html","text":"Guess who is here? Credit: \u300a\u6628\u665a\u300b by \u8001\u9f20\u4ec0\u4e48\u90fd\u77e5\u9053","title":"About"},{"location":"weixin-2020.html","text":"\u4e00\u4e9b\u5f88\u559c\u6b22\u7684\u63a8\u9001 \u00b6 \u300a\u6628\u665a\u300b by \u8001\u9f20\u4ec0\u4e48\u90fd\u77e5\u9053 \u300a\u6740\u6b7b\u65e0\u804a\u7684\u540c\u65f6\uff0c\u4f60\u4e5f\u5728\u6740\u6b7b\u81ea\u5df1\u300b by \u4eba\u7269 \u300a\u75db\u82e6\u7684\u4e00\u767e\u5f20\u5e95\u7247\u300b by \u4eba\u7269 \u300a\u603b\u4e0d\u80fd\u4e27\u6c14\u592a\u4e45\u5427\u3002\u300b by \u6982\u7387\u8bba \u300a\u6211\u4eec\u628a\u8fd9\u573a\u521d\u96ea\u505a\u6210\u4e86\u7535\u5f71\u6d77\u62a5\u300b by \u6e05\u534e\u5927\u5b66\u6e05\u65b0\u65f6\u62a5","title":2020},{"location":"weixin-2020.html#_1","text":"\u300a\u6628\u665a\u300b by \u8001\u9f20\u4ec0\u4e48\u90fd\u77e5\u9053 \u300a\u6740\u6b7b\u65e0\u804a\u7684\u540c\u65f6\uff0c\u4f60\u4e5f\u5728\u6740\u6b7b\u81ea\u5df1\u300b by \u4eba\u7269 \u300a\u75db\u82e6\u7684\u4e00\u767e\u5f20\u5e95\u7247\u300b by \u4eba\u7269 \u300a\u603b\u4e0d\u80fd\u4e27\u6c14\u592a\u4e45\u5427\u3002\u300b by \u6982\u7387\u8bba \u300a\u6211\u4eec\u628a\u8fd9\u573a\u521d\u96ea\u505a\u6210\u4e86\u7535\u5f71\u6d77\u62a5\u300b by \u6e05\u534e\u5927\u5b66\u6e05\u65b0\u65f6\u62a5","title":"\u4e00\u4e9b\u5f88\u559c\u6b22\u7684\u63a8\u9001"},{"location":"coding/index.html","text":"\u5199\u4ee3\u7801 \u00b6 \u6536\u96c6\u4ece\u7f51\u4e0a\u627e\u6765\u7684\u5404\u79cd\u5404\u6837\u7684\u73a9\u610f Leetcode Python \u6570\u636e\u7ed3\u6784 \u6df1\u5ea6\u5b66\u4e60 \u673a\u5668\u5b66\u4e60 \u7cfb\u7edf\u914d\u7f6e","title":"\u76ee\u5f55"},{"location":"coding/index.html#_1","text":"\u6536\u96c6\u4ece\u7f51\u4e0a\u627e\u6765\u7684\u5404\u79cd\u5404\u6837\u7684\u73a9\u610f Leetcode Python \u6570\u636e\u7ed3\u6784 \u6df1\u5ea6\u5b66\u4e60 \u673a\u5668\u5b66\u4e60 \u7cfb\u7edf\u914d\u7f6e","title":"\u5199\u4ee3\u7801"},{"location":"coding/dsa.html","text":"\u6570\u636e\u7ed3\u6784 \u00b6 \u4ee5\u4e0b\u6574\u7406\u4e86\u9093\u4fca\u8f89\u8001\u5e08\u300a\u6570\u636e\u7ed3\u6784\u300b\u8bfe\u7a0b\u7684\u5185\u5bb9\uff1a \u5411\u91cf\u4e0e\u5217\u8868 \u6808\u4e0e\u961f\u5217 \u4e8c\u53c9\u6811 \u56fe \u4e8c\u53c9\u641c\u7d22\u6811 \u9ad8\u7ea7\u641c\u7d22\u6811 \u6563\u5217\u4e0e\u8bcd\u5178 \u4f18\u5148\u7ea7\u961f\u5217 \u5b57\u7b26\u4e32 \u6392\u5e8f\u7b97\u6cd5","title":"\u76ee\u5f55"},{"location":"coding/dsa.html#_1","text":"\u4ee5\u4e0b\u6574\u7406\u4e86\u9093\u4fca\u8f89\u8001\u5e08\u300a\u6570\u636e\u7ed3\u6784\u300b\u8bfe\u7a0b\u7684\u5185\u5bb9\uff1a \u5411\u91cf\u4e0e\u5217\u8868 \u6808\u4e0e\u961f\u5217 \u4e8c\u53c9\u6811 \u56fe \u4e8c\u53c9\u641c\u7d22\u6811 \u9ad8\u7ea7\u641c\u7d22\u6811 \u6563\u5217\u4e0e\u8bcd\u5178 \u4f18\u5148\u7ea7\u961f\u5217 \u5b57\u7b26\u4e32 \u6392\u5e8f\u7b97\u6cd5","title":"\u6570\u636e\u7ed3\u6784"},{"location":"coding/leetcode.html","text":"Leetcode \u9898\u89e3 \u00b6 1. \u4e24\u6570\u4e4b\u548c 7. \u6574\u6570\u53cd\u8f6c 8. \u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 (leetcode/atoi) 9. \u56de\u6587\u6570 13. \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570 14. \u6700\u957f\u516c\u5171\u524d\u7f00 21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868 24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9 26. \u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879 28. \u5b9e\u73b0 strStr(leetcode/) 36. \u6709\u6548\u7684\u6570\u72ec 38. \u5916\u89c2\u6570\u5217 48. \u65cb\u8f6c\u56fe\u50cf 50. Pow(x, n) 66. \u52a0\u4e00 70. \u722c\u697c\u68af 118. \u6768\u8f89\u4e09\u89d2 119. \u6768\u8f89\u4e09\u89d2 II 122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II 125. \u9a8c\u8bc1\u56de\u6587\u4e32 136. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 189. \u65cb\u8f6c\u6570\u7ec4 206. \u53cd\u8f6c\u94fe\u8868 217. \u5b58\u5728\u91cd\u590d\u5143\u7d20 237. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9 242. \u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd 315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570 344. \u53cd\u8f6c\u5b57\u7b26\u4e32 387. \u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u552f\u4e00\u5b57\u7b26","title":"\u76ee\u5f55"},{"location":"coding/leetcode.html#leetcode","text":"1. \u4e24\u6570\u4e4b\u548c 7. \u6574\u6570\u53cd\u8f6c 8. \u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 (leetcode/atoi) 9. \u56de\u6587\u6570 13. \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570 14. \u6700\u957f\u516c\u5171\u524d\u7f00 21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868 24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9 26. \u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879 28. \u5b9e\u73b0 strStr(leetcode/) 36. \u6709\u6548\u7684\u6570\u72ec 38. \u5916\u89c2\u6570\u5217 48. \u65cb\u8f6c\u56fe\u50cf 50. Pow(x, n) 66. \u52a0\u4e00 70. \u722c\u697c\u68af 118. \u6768\u8f89\u4e09\u89d2 119. \u6768\u8f89\u4e09\u89d2 II 122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II 125. \u9a8c\u8bc1\u56de\u6587\u4e32 136. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 189. \u65cb\u8f6c\u6570\u7ec4 206. \u53cd\u8f6c\u94fe\u8868 217. \u5b58\u5728\u91cd\u590d\u5143\u7d20 237. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9 242. \u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd 315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570 344. \u53cd\u8f6c\u5b57\u7b26\u4e32 387. \u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u552f\u4e00\u5b57\u7b26","title":"Leetcode \u9898\u89e3"},{"location":"coding/python.html","text":"Python \u00b6 \u591a\u7ebf\u7a0b/\u591a\u8fdb\u7a0b\u76f8\u5173 \u00b6 \u5173\u95edPython\u7ebf\u7a0b","title":"\u76ee\u5f55"},{"location":"coding/python.html#python","text":"","title":"Python"},{"location":"coding/python.html#_1","text":"\u5173\u95edPython\u7ebf\u7a0b","title":"\u591a\u7ebf\u7a0b/\u591a\u8fdb\u7a0b\u76f8\u5173"},{"location":"coding/dsa/vector-and-list.html","text":"\u5411\u91cf\u4e0e\u5217\u8868 \u00b6 \u4e3b\u8981\u7684\u57fa\u7840\u7ebf\u6027\u6570\u636e\u7ed3\u6784\u662f\u5411\u91cf\u4e0e\u5217\u8868\u3002\u5728\u672c\u5408\u96c6\u4e2d\uff0c\u5411\u91cf\u6307\u4ee5\u6570\u7ec4\u65b9\u5f0f\u7ec4\u5408\u5e76\u5c01\u88c5\u901a\u7528\u62bd\u8c61\u63a5\u53e3\u7684\u6570\u636e\u7c7b\u578b\uff1b\u5217\u8868\u6307\u4ee5\u94fe\u8868\u65b9\u5f0f\u7ec4\u5408\u5e76\u5c01\u88c5\u901a\u7528\u62bd\u8c61\u63a5\u53e3\u7684\u6570\u636e\u7c7b\u578b\u3002 \u8f83\u4e3a\u9ad8\u7ea7\u7684\u6570\u636e\u7ed3\u6784\u2014\u2014\u6808\u4e0e\u961f\u5217\u5efa\u7acb\u5728\u5411\u91cf\u4e0e\u5217\u8868\u7684\u57fa\u7840\u4e0a\u3002\u63d0\u4f9b\u4e86\u4e00\u4e9b\u53d7\u9650\u5236\u7684\u64cd\u4f5c\u63a5\u53e3\u3002 \u7ebf\u6027\u6570\u636e\u7ed3\u6784 \u00b6 \u5bf9\u4e8e\u57fa\u7840\u7684\u7ebf\u6027\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u4e0b\u7684\u63a5\u53e3\u53ef\u4ee5\u89c6\u4e3a\u901a\u7528\uff1a \u64cd\u4f5c \u63cf\u8ff0 \u901a\u7528\u6027 size() \u83b7\u53d6\u5bf9\u8c61\u4e2d\u5143\u7d20\u7684\u6570\u76ee get() \u83b7\u53d6\u5bf9\u8c61\u4e2d\u67d0\u4e2a\u5143\u7d20\u7684\u503c set() \u4fee\u6539\u5bf9\u8c61\u4e2d\u67d0\u4e2a\u5143\u7d20\u7684\u503c insert() \u5411\u5bf9\u8c61\u4e2d\u7684\u67d0\u4e2a\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20 remove() \u79fb\u9664\u5bf9\u8c61\u4e2d\u7684\u67d0\u4e2a\u5143\u7d20 traverse() \u904d\u5386\u5bf9\u8c61\u4e2d\u7684\u6240\u6709\u5143\u7d20\uff0c\u5e76\u6267\u884c\u67d0\u64cd\u4f5c find() \u5728\u5bf9\u8c61\u4e2d\u67e5\u627e\u67d0\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e search() \u5728\u6709\u5e8f\u7684\u7ed3\u6784\u4e2d\u67e5\u627e\u67d0\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e \u8981\u6c42\u6709\u5e8f sort() \u6392\u5e8f\u5bf9\u8c61\u4e2d\u7684\u5143\u7d20 \u8981\u6c42\u91cd\u8f7d < \u548c > \u8fd0\u7b97\u7b26 \u5411\u91cf \u00b6 C/C++\u8bed\u8a00\u4e2d\u7684\u6570\u7ec4\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u89c6\u4e3a\u7b80\u5355\u7684\u5411\u91cf\u3002\u4f46\u6570\u7ec4\u4e0d\u63d0\u4f9b\u63d2\u5165\u3001\u5220\u9664\u7b49\u5177\u4f53\u7684\u64cd\u4f5c\u63a5\u53e3\uff0c\u9700\u8981\u5728\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u624b\u52a8\u5b9e\u73b0\u3002\u5c06\u6570\u7ec4\u5c01\u88c5\u6210\u7c7b\u53ef\u4ee5\u63d0\u4f9b\u66f4\u591a\u7684\u64cd\u4f5c\u63a5\u53e3\uff0c\u5e76\u4e14\u4fdd\u8bc1\u6570\u636e\u88ab\u5408\u6cd5\u5730\u8bbf\u95ee\u53ca\u4fee\u6539\u3002 \u5411\u91cf\u662f\u6570\u7ec4\u7684\u62bd\u8c61\u6cdb\u5316\u3001\u652f\u6301\u6240\u6709\u6570\u7ec4\u7684\u529f\u80fd\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7c7b\u578b\u7684\u5143\u7d20\u63d0\u4f9b\u4e86\u7edf\u4e00\u7684\u64cd\u4f5c\u63a5\u53e3\u3002 C++\u63d0\u4f9b\u4e86\u6a21\u677f\u7c7b\u7684\u529f\u80fd\u7528\u6765\u9488\u5bf9\u4e0d\u540c\u7c7b\u578b\u7684\u5143\u7d20\u63d0\u4f9b\u76f8\u540c\u7684\u529f\u80fd\u3002\u5bf9\u4e8e\u67d0\u4e2aADT\uff08\u4ee5\u5411\u91cf\u4e3a\u4f8b\uff09\uff0c\u5176\u5c5e\u6027\u548c\u63a5\u53e3\u7684\u7ec4\u7ec7\u65b9\u5f0f\u53ef\u9075\u5faa\u5982\u4e0b\u89c4\u5219\uff1a template < typename T > class Vector { //\u5411\u91cf\u6a21\u677f\u7c7b private : Rank _size ; int _capacity ; T * _elem ; //\u89c4\u6a21\u3001\u5bb9\u91cf\u3001\u6570\u636e\u533a protected : /* ... \u5185\u90e8\u51fd\u6570 */ public : /* ... \u6784\u9020\u51fd\u6570 */ /* ... \u6790\u6784\u51fd\u6570 */ /* ... \u53ea\u8bfb\u63a5\u53e3 */ /* ... \u53ef\u5199\u63a5\u53e3 */ /* ... \u904d\u5386\u63a5\u53e3 */ };","title":"\u5411\u91cf\u4e0e\u5217\u8868"},{"location":"coding/dsa/vector-and-list.html#_1","text":"\u4e3b\u8981\u7684\u57fa\u7840\u7ebf\u6027\u6570\u636e\u7ed3\u6784\u662f\u5411\u91cf\u4e0e\u5217\u8868\u3002\u5728\u672c\u5408\u96c6\u4e2d\uff0c\u5411\u91cf\u6307\u4ee5\u6570\u7ec4\u65b9\u5f0f\u7ec4\u5408\u5e76\u5c01\u88c5\u901a\u7528\u62bd\u8c61\u63a5\u53e3\u7684\u6570\u636e\u7c7b\u578b\uff1b\u5217\u8868\u6307\u4ee5\u94fe\u8868\u65b9\u5f0f\u7ec4\u5408\u5e76\u5c01\u88c5\u901a\u7528\u62bd\u8c61\u63a5\u53e3\u7684\u6570\u636e\u7c7b\u578b\u3002 \u8f83\u4e3a\u9ad8\u7ea7\u7684\u6570\u636e\u7ed3\u6784\u2014\u2014\u6808\u4e0e\u961f\u5217\u5efa\u7acb\u5728\u5411\u91cf\u4e0e\u5217\u8868\u7684\u57fa\u7840\u4e0a\u3002\u63d0\u4f9b\u4e86\u4e00\u4e9b\u53d7\u9650\u5236\u7684\u64cd\u4f5c\u63a5\u53e3\u3002","title":"\u5411\u91cf\u4e0e\u5217\u8868"},{"location":"coding/dsa/vector-and-list.html#_2","text":"\u5bf9\u4e8e\u57fa\u7840\u7684\u7ebf\u6027\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u4e0b\u7684\u63a5\u53e3\u53ef\u4ee5\u89c6\u4e3a\u901a\u7528\uff1a \u64cd\u4f5c \u63cf\u8ff0 \u901a\u7528\u6027 size() \u83b7\u53d6\u5bf9\u8c61\u4e2d\u5143\u7d20\u7684\u6570\u76ee get() \u83b7\u53d6\u5bf9\u8c61\u4e2d\u67d0\u4e2a\u5143\u7d20\u7684\u503c set() \u4fee\u6539\u5bf9\u8c61\u4e2d\u67d0\u4e2a\u5143\u7d20\u7684\u503c insert() \u5411\u5bf9\u8c61\u4e2d\u7684\u67d0\u4e2a\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20 remove() \u79fb\u9664\u5bf9\u8c61\u4e2d\u7684\u67d0\u4e2a\u5143\u7d20 traverse() \u904d\u5386\u5bf9\u8c61\u4e2d\u7684\u6240\u6709\u5143\u7d20\uff0c\u5e76\u6267\u884c\u67d0\u64cd\u4f5c find() \u5728\u5bf9\u8c61\u4e2d\u67e5\u627e\u67d0\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e search() \u5728\u6709\u5e8f\u7684\u7ed3\u6784\u4e2d\u67e5\u627e\u67d0\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e \u8981\u6c42\u6709\u5e8f sort() \u6392\u5e8f\u5bf9\u8c61\u4e2d\u7684\u5143\u7d20 \u8981\u6c42\u91cd\u8f7d < \u548c > \u8fd0\u7b97\u7b26","title":"\u7ebf\u6027\u6570\u636e\u7ed3\u6784"},{"location":"coding/dsa/vector-and-list.html#_3","text":"C/C++\u8bed\u8a00\u4e2d\u7684\u6570\u7ec4\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u89c6\u4e3a\u7b80\u5355\u7684\u5411\u91cf\u3002\u4f46\u6570\u7ec4\u4e0d\u63d0\u4f9b\u63d2\u5165\u3001\u5220\u9664\u7b49\u5177\u4f53\u7684\u64cd\u4f5c\u63a5\u53e3\uff0c\u9700\u8981\u5728\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u624b\u52a8\u5b9e\u73b0\u3002\u5c06\u6570\u7ec4\u5c01\u88c5\u6210\u7c7b\u53ef\u4ee5\u63d0\u4f9b\u66f4\u591a\u7684\u64cd\u4f5c\u63a5\u53e3\uff0c\u5e76\u4e14\u4fdd\u8bc1\u6570\u636e\u88ab\u5408\u6cd5\u5730\u8bbf\u95ee\u53ca\u4fee\u6539\u3002 \u5411\u91cf\u662f\u6570\u7ec4\u7684\u62bd\u8c61\u6cdb\u5316\u3001\u652f\u6301\u6240\u6709\u6570\u7ec4\u7684\u529f\u80fd\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7c7b\u578b\u7684\u5143\u7d20\u63d0\u4f9b\u4e86\u7edf\u4e00\u7684\u64cd\u4f5c\u63a5\u53e3\u3002 C++\u63d0\u4f9b\u4e86\u6a21\u677f\u7c7b\u7684\u529f\u80fd\u7528\u6765\u9488\u5bf9\u4e0d\u540c\u7c7b\u578b\u7684\u5143\u7d20\u63d0\u4f9b\u76f8\u540c\u7684\u529f\u80fd\u3002\u5bf9\u4e8e\u67d0\u4e2aADT\uff08\u4ee5\u5411\u91cf\u4e3a\u4f8b\uff09\uff0c\u5176\u5c5e\u6027\u548c\u63a5\u53e3\u7684\u7ec4\u7ec7\u65b9\u5f0f\u53ef\u9075\u5faa\u5982\u4e0b\u89c4\u5219\uff1a template < typename T > class Vector { //\u5411\u91cf\u6a21\u677f\u7c7b private : Rank _size ; int _capacity ; T * _elem ; //\u89c4\u6a21\u3001\u5bb9\u91cf\u3001\u6570\u636e\u533a protected : /* ... \u5185\u90e8\u51fd\u6570 */ public : /* ... \u6784\u9020\u51fd\u6570 */ /* ... \u6790\u6784\u51fd\u6570 */ /* ... \u53ea\u8bfb\u63a5\u53e3 */ /* ... \u53ef\u5199\u63a5\u53e3 */ /* ... \u904d\u5386\u63a5\u53e3 */ };","title":"\u5411\u91cf"},{"location":"coding/leetcode/1.html","text":"1. \u4e24\u6570\u4e4b\u548c \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u76ee\u6807\u503c target \uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa\u548c\u4e3a\u76ee\u6807\u503c\u7684\u90a3 \u4e24\u4e2a \u6574\u6570\uff0c\u5e76\u8fd4\u56de\u4ed6\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u6570\u7ec4\u4e2d\u540c\u4e00\u4e2a\u5143\u7d20\u4e0d\u80fd\u4f7f\u7528\u4e24\u904d\u3002 \u793a\u4f8b: \u7ed9\u5b9a nums = [2, 7, 11, 15], target = 9 \u56e0\u4e3a nums[0] + nums[1] = 2 + 7 = 9 \u6240\u4ee5\u8fd4\u56de [0, 1] Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5c06\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u5b58\u50a8\u5728\u54c8\u5e0c\u8868\u4e2d\uff0c\u6bcf\u6b21\u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u76ee\u6807\u503c\u4e0e\u5f53\u524d\u503c\u4e4b\u5dee\u662f\u5426\u5728\u54c8\u5e0c\u8868\u4e2d\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Note: The returned array must be malloced, assume caller calls free(). */ #define MAX(a, b) (a > b ? a : b) #define MIN(a, b) (a < b ? a : b) struct cell { int value ; int flag ; }; int * twoSum ( int * nums , int numsSize , int target , int * returnSize ){ * returnSize = 2 ; int i = 0 , mapSize = numsSize * 2 , cur , * ret = malloc ( sizeof ( int ) * 2 ), targetval , j = 0 ; struct cell * hashMap = ( struct cell * ) memset ( malloc ( sizeof ( struct cell ) * mapSize ), 0 , sizeof ( struct cell ) * mapSize ); for ( i = 0 ; i < numsSize ; i ++ ) { cur = ( nums [ i ] > 0 ? nums [ i ] : - nums [ i ]) % mapSize ; while ( hashMap [ cur ]. flag != 0 && hashMap [ cur ]. value != nums [ i ]) { cur ++ ; cur = cur == mapSize ? 0 : cur ; } if ( hashMap [ cur ]. flag == 0 ) hashMap [ cur ]. value = nums [ i ]; hashMap [ cur ]. flag ++ ; } for ( i = 0 ; i < numsSize ; i ++ ) { targetval = target - nums [ i ]; cur = ( targetval > 0 ? targetval : - targetval ) % mapSize ; while ( hashMap [ cur ]. flag != 0 && hashMap [ cur ]. value != targetval ) { cur ++ ; cur = cur == mapSize ? 0 : cur ; } if ( hashMap [ cur ]. value == targetval ) { for ( j = 0 ; j < numsSize ; j ++ ) if ( nums [ j ] == targetval && j != i ) break ; if ( j != numsSize ) break ; } } ret [ 0 ] = MIN ( i , j ); ret [ 1 ] = MAX ( i , j ); if ( nums [ i ] + nums [ j ] == target ) return ret ; * returnSize = 0 ; return NULL ; }","title":"1. \u4e24\u6570\u4e4b\u548c"},{"location":"coding/leetcode/1.html#1","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"1. \u4e24\u6570\u4e4b\u548c"},{"location":"coding/leetcode/1.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u76ee\u6807\u503c target \uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa\u548c\u4e3a\u76ee\u6807\u503c\u7684\u90a3 \u4e24\u4e2a \u6574\u6570\uff0c\u5e76\u8fd4\u56de\u4ed6\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u6570\u7ec4\u4e2d\u540c\u4e00\u4e2a\u5143\u7d20\u4e0d\u80fd\u4f7f\u7528\u4e24\u904d\u3002 \u793a\u4f8b: \u7ed9\u5b9a nums = [2, 7, 11, 15], target = 9 \u56e0\u4e3a nums[0] + nums[1] = 2 + 7 = 9 \u6240\u4ee5\u8fd4\u56de [0, 1] Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/1.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5c06\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u5b58\u50a8\u5728\u54c8\u5e0c\u8868\u4e2d\uff0c\u6bcf\u6b21\u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u76ee\u6807\u503c\u4e0e\u5f53\u524d\u503c\u4e4b\u5dee\u662f\u5426\u5728\u54c8\u5e0c\u8868\u4e2d\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Note: The returned array must be malloced, assume caller calls free(). */ #define MAX(a, b) (a > b ? a : b) #define MIN(a, b) (a < b ? a : b) struct cell { int value ; int flag ; }; int * twoSum ( int * nums , int numsSize , int target , int * returnSize ){ * returnSize = 2 ; int i = 0 , mapSize = numsSize * 2 , cur , * ret = malloc ( sizeof ( int ) * 2 ), targetval , j = 0 ; struct cell * hashMap = ( struct cell * ) memset ( malloc ( sizeof ( struct cell ) * mapSize ), 0 , sizeof ( struct cell ) * mapSize ); for ( i = 0 ; i < numsSize ; i ++ ) { cur = ( nums [ i ] > 0 ? nums [ i ] : - nums [ i ]) % mapSize ; while ( hashMap [ cur ]. flag != 0 && hashMap [ cur ]. value != nums [ i ]) { cur ++ ; cur = cur == mapSize ? 0 : cur ; } if ( hashMap [ cur ]. flag == 0 ) hashMap [ cur ]. value = nums [ i ]; hashMap [ cur ]. flag ++ ; } for ( i = 0 ; i < numsSize ; i ++ ) { targetval = target - nums [ i ]; cur = ( targetval > 0 ? targetval : - targetval ) % mapSize ; while ( hashMap [ cur ]. flag != 0 && hashMap [ cur ]. value != targetval ) { cur ++ ; cur = cur == mapSize ? 0 : cur ; } if ( hashMap [ cur ]. value == targetval ) { for ( j = 0 ; j < numsSize ; j ++ ) if ( nums [ j ] == targetval && j != i ) break ; if ( j != numsSize ) break ; } } ret [ 0 ] = MIN ( i , j ); ret [ 1 ] = MAX ( i , j ); if ( nums [ i ] + nums [ j ] == target ) return ret ; * returnSize = 0 ; return NULL ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/101.html","text":"101. \u5bf9\u79f0\u4e8c\u53c9\u6811 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u68c0\u67e5\u5b83\u662f\u5426\u662f\u955c\u50cf\u5bf9\u79f0\u7684\u3002 \u4f8b\u5982\uff0c\u4e8c\u53c9\u6811 [1,2,2,3,4,4,3] \u662f\u5bf9\u79f0\u7684\u3002 1 / \\ 2 2 / \\ / \\ 3 4 4 3 \u4f46\u662f\u4e0b\u9762\u8fd9\u4e2a [1,2,2,null,3,null,3] \u5219\u4e0d\u662f\u955c\u50cf\u5bf9\u79f0\u7684: 1 / \\ 2 2 \\ \\ 3 3 \u8fdb\u9636\uff1a \u4f60\u53ef\u4ee5\u8fd0\u7528\u9012\u5f52\u548c\u8fed\u4ee3\u4e24\u79cd\u65b9\u6cd5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u9012\u5f52\u5224\u65ad\u4e24\u4e2a\u6839\u8282\u70b9\u662f\u5426\u6210\u955c\u50cf\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for a binary tree node. * struct TreeNode { * int val; * struct TreeNode *left; * struct TreeNode *right; * }; */ bool isMirrored ( struct TreeNode * root1 , struct TreeNode * root2 ) { if ( ! root1 || ! root2 ) return root1 == root2 ; if ( root1 -> val != root2 -> val ) return false ; return isMirrored ( root1 -> left , root2 -> right ) && isMirrored ( root2 -> left , root1 -> right ); } bool isSymmetric ( struct TreeNode * root ){ if ( root == NULL ) return true ; return isMirrored ( root -> left , root -> right ); }","title":"101. \u5bf9\u79f0\u4e8c\u53c9\u6811"},{"location":"coding/leetcode/101.html#101","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"101. \u5bf9\u79f0\u4e8c\u53c9\u6811"},{"location":"coding/leetcode/101.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u68c0\u67e5\u5b83\u662f\u5426\u662f\u955c\u50cf\u5bf9\u79f0\u7684\u3002 \u4f8b\u5982\uff0c\u4e8c\u53c9\u6811 [1,2,2,3,4,4,3] \u662f\u5bf9\u79f0\u7684\u3002 1 / \\ 2 2 / \\ / \\ 3 4 4 3 \u4f46\u662f\u4e0b\u9762\u8fd9\u4e2a [1,2,2,null,3,null,3] \u5219\u4e0d\u662f\u955c\u50cf\u5bf9\u79f0\u7684: 1 / \\ 2 2 \\ \\ 3 3 \u8fdb\u9636\uff1a \u4f60\u53ef\u4ee5\u8fd0\u7528\u9012\u5f52\u548c\u8fed\u4ee3\u4e24\u79cd\u65b9\u6cd5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/101.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u9012\u5f52\u5224\u65ad\u4e24\u4e2a\u6839\u8282\u70b9\u662f\u5426\u6210\u955c\u50cf\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for a binary tree node. * struct TreeNode { * int val; * struct TreeNode *left; * struct TreeNode *right; * }; */ bool isMirrored ( struct TreeNode * root1 , struct TreeNode * root2 ) { if ( ! root1 || ! root2 ) return root1 == root2 ; if ( root1 -> val != root2 -> val ) return false ; return isMirrored ( root1 -> left , root2 -> right ) && isMirrored ( root2 -> left , root1 -> right ); } bool isSymmetric ( struct TreeNode * root ){ if ( root == NULL ) return true ; return isMirrored ( root -> left , root -> right ); }","title":"\u9898\u89e3"},{"location":"coding/leetcode/102.html","text":"102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386 \u00b6 \u96be\u5ea6\uff1a \u4e2d\u7b49 \u9898\u76ee \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8bf7\u4f60\u8fd4\u56de\u5176\u6309 \u5c42\u5e8f\u904d\u5386 \u5f97\u5230\u7684\u8282\u70b9\u503c\u3002 \uff08\u5373\u9010\u5c42\u5730\uff0c\u4ece\u5de6\u5230\u53f3\u8bbf\u95ee\u6240\u6709\u8282\u70b9\uff09\u3002 \u793a\u4f8b\uff1a \u4e8c\u53c9\u6811\uff1a [3,9,20,null,null,15,7] , 3 / \\ 9 20 / \\ 15 7 \u8fd4\u56de\u5176\u5c42\u6b21\u904d\u5386\u7ed3\u679c\uff1a [ [3], [9,20], [15,7] ] Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u7b2c\u4e00\u5c42\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u5373\u6839\u8282\u70b9\u7684\u503c\uff0c\u518d\u5c42\u5e8f\u904d\u5386\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\uff0c\u5408\u5e76\u540c\u5c42\u7684\u7ed3\u679c\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for a binary tree node. * struct TreeNode { * int val; * struct TreeNode *left; * struct TreeNode *right; * }; */ /** * Return an array of arrays of size *returnSize. * The sizes of the arrays are returned as *returnColumnSizes array. * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free(). */ #define MAX(x, y) (x > y ? x : y) int * merge ( int * leftBranch , int leftSize , int * rightBranch , int rightSize , int * returnSize ) { * returnSize = leftSize + rightSize ; int * ret = ( int * ) malloc ( sizeof ( int ) * ( leftSize + rightSize )); if ( leftSize != 0 ) { memcpy ( ret , leftBranch , sizeof ( int ) * leftSize ); free ( leftBranch ); } if ( rightSize != 0 ) { memcpy ( ret + leftSize , rightBranch , sizeof ( int ) * rightSize ); free ( rightBranch ); } return ret ; } int ** levelOrder ( struct TreeNode * root , int * returnSize , int ** returnColumnSizes ){ if ( root == NULL ) { * returnSize = 0 ; * returnColumnSizes = NULL ; return NULL ; } int leftBranchSize = 0 , * leftColumnSizes = NULL , ** leftBranch = levelOrder ( root -> left , & leftBranchSize , & leftColumnSizes ), rightBranchSize = 0 , * rightColumnSizes = NULL , ** rightBranch = levelOrder ( root -> right , & rightBranchSize , & rightColumnSizes ); * returnSize = 1 + MAX ( leftBranchSize , rightBranchSize ); int ** ret = ( int ** ) malloc ( sizeof ( int * ) * * returnSize ), * returnCols = ( int * ) malloc ( sizeof ( int ) * * returnSize ), i = 0 ; * returnColumnSizes = returnCols ; * returnCols = 1 ; * ret = malloc ( sizeof ( int )); ** ret = root -> val ; for ( i = 1 ; i < * returnSize ; i ++ ) { if ( i <= leftBranchSize && i <= rightBranchSize ) ret [ i ] = merge ( leftBranch [ i - 1 ], leftColumnSizes [ i - 1 ], rightBranch [ i - 1 ], rightColumnSizes [ i - 1 ], returnCols + i ); else if ( i <= leftBranchSize ) ret [ i ] = merge ( leftBranch [ i -1 ], leftColumnSizes [ i -1 ], NULL , 0 , returnCols + i ); else if ( i <= rightBranchSize ) ret [ i ] = merge ( NULL , 0 , rightBranch [ i -1 ], rightColumnSizes [ i -1 ], returnCols + i ); } free ( leftBranch ); free ( rightBranch ); free ( leftColumnSizes ); free ( rightColumnSizes ); return ret ; }","title":"102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386"},{"location":"coding/leetcode/102.html#102","text":"\u96be\u5ea6\uff1a \u4e2d\u7b49","title":"102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386"},{"location":"coding/leetcode/102.html#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8bf7\u4f60\u8fd4\u56de\u5176\u6309 \u5c42\u5e8f\u904d\u5386 \u5f97\u5230\u7684\u8282\u70b9\u503c\u3002 \uff08\u5373\u9010\u5c42\u5730\uff0c\u4ece\u5de6\u5230\u53f3\u8bbf\u95ee\u6240\u6709\u8282\u70b9\uff09\u3002 \u793a\u4f8b\uff1a \u4e8c\u53c9\u6811\uff1a [3,9,20,null,null,15,7] , 3 / \\ 9 20 / \\ 15 7 \u8fd4\u56de\u5176\u5c42\u6b21\u904d\u5386\u7ed3\u679c\uff1a [ [3], [9,20], [15,7] ] Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/102.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u7b2c\u4e00\u5c42\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u5373\u6839\u8282\u70b9\u7684\u503c\uff0c\u518d\u5c42\u5e8f\u904d\u5386\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\uff0c\u5408\u5e76\u540c\u5c42\u7684\u7ed3\u679c\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for a binary tree node. * struct TreeNode { * int val; * struct TreeNode *left; * struct TreeNode *right; * }; */ /** * Return an array of arrays of size *returnSize. * The sizes of the arrays are returned as *returnColumnSizes array. * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free(). */ #define MAX(x, y) (x > y ? x : y) int * merge ( int * leftBranch , int leftSize , int * rightBranch , int rightSize , int * returnSize ) { * returnSize = leftSize + rightSize ; int * ret = ( int * ) malloc ( sizeof ( int ) * ( leftSize + rightSize )); if ( leftSize != 0 ) { memcpy ( ret , leftBranch , sizeof ( int ) * leftSize ); free ( leftBranch ); } if ( rightSize != 0 ) { memcpy ( ret + leftSize , rightBranch , sizeof ( int ) * rightSize ); free ( rightBranch ); } return ret ; } int ** levelOrder ( struct TreeNode * root , int * returnSize , int ** returnColumnSizes ){ if ( root == NULL ) { * returnSize = 0 ; * returnColumnSizes = NULL ; return NULL ; } int leftBranchSize = 0 , * leftColumnSizes = NULL , ** leftBranch = levelOrder ( root -> left , & leftBranchSize , & leftColumnSizes ), rightBranchSize = 0 , * rightColumnSizes = NULL , ** rightBranch = levelOrder ( root -> right , & rightBranchSize , & rightColumnSizes ); * returnSize = 1 + MAX ( leftBranchSize , rightBranchSize ); int ** ret = ( int ** ) malloc ( sizeof ( int * ) * * returnSize ), * returnCols = ( int * ) malloc ( sizeof ( int ) * * returnSize ), i = 0 ; * returnColumnSizes = returnCols ; * returnCols = 1 ; * ret = malloc ( sizeof ( int )); ** ret = root -> val ; for ( i = 1 ; i < * returnSize ; i ++ ) { if ( i <= leftBranchSize && i <= rightBranchSize ) ret [ i ] = merge ( leftBranch [ i - 1 ], leftColumnSizes [ i - 1 ], rightBranch [ i - 1 ], rightColumnSizes [ i - 1 ], returnCols + i ); else if ( i <= leftBranchSize ) ret [ i ] = merge ( leftBranch [ i -1 ], leftColumnSizes [ i -1 ], NULL , 0 , returnCols + i ); else if ( i <= rightBranchSize ) ret [ i ] = merge ( NULL , 0 , rightBranch [ i -1 ], rightColumnSizes [ i -1 ], returnCols + i ); } free ( leftBranch ); free ( rightBranch ); free ( leftColumnSizes ); free ( rightColumnSizes ); return ret ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/118.html","text":"118. \u6768\u8f89\u4e09\u89d2 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570 numRows \uff0c\u751f\u6210\u6768\u8f89\u4e09\u89d2\u7684\u524d numRows \u884c\u3002 \u5728\u6768\u8f89\u4e09\u89d2\u4e2d\uff0c\u6bcf\u4e2a\u6570\u662f\u5b83\u5de6\u4e0a\u65b9\u548c\u53f3\u4e0a\u65b9\u7684\u6570\u7684\u548c\u3002 \u793a\u4f8b\uff1a \u8f93\u5165: 5 \u8f93\u51fa: [ [1], [1,1], [1,2,1], [1,3,3,1], [1,4,6,4,1] ] Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u6839\u636e\u6768\u8f89\u4e09\u89d2\u7684\u5b9a\u4e49\uff0c\u901a\u8fc7\u9012\u5f52\u9010\u884c\u6784\u9020\u51fa\u6bcf\u4e00\u884c\u7684\u503c \u4ee3\u7801\u5982\u4e0b\uff1a /** * Return an array of arrays of size *returnSize. * The sizes of the arrays are returned as *returnColumnSizes array. * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free(). */ int ** generate ( int numRows , int * returnSize , int ** returnColumnSizes ) { * returnSize = numRows ; if ( numRows == 0 ) return NULL ; if ( numRows == 1 ) { * returnColumnSizes = ( int * ) malloc ( sizeof ( int )); ** returnColumnSizes = 1 ; int ** ret = ( int ** ) malloc ( sizeof ( int * )); * ret = ( int * ) malloc ( sizeof ( int )); ** ret = 1 ; return ret ; } int retSize = 0 , * oldRetColSizes = NULL , ** rec = generate ( numRows - 1 , & retSize , & oldRetColSizes ), i = 0 ; ** ret = ( int ** ) memcpy ( malloc ( sizeof ( int * ) * numRows ), rec , ( numRows - 1 ) * sizeof ( int * )); * newRetColSizes = memcpy (( int * ) malloc ( sizeof ( int ) * numRows ), oldRetColSizes , ( numRows - 1 ) * sizeof ( int )); * tempArray = ( int * ) malloc ( sizeof ( int ) * numRows ); free ( oldRetColSizes ); free ( rec ); newRetColSizes [ numRows - 1 ] = numRows ; for ( i = 1 ; i < numRows - 1 ; i ++ ) tempArray [ i ] = * ( ret [ numRows - 2 ] + i ) + * ( ret [ numRows - 2 ] + i - 1 ); tempArray [ 0 ] = 1 ; tempArray [ numRows - 1 ] = 1 ; ret [ numRows - 1 ] = tempArray ; * returnColumnSizes = newRetColSizes ; return ret ; }","title":"118. \u6768\u8f89\u4e09\u89d2"},{"location":"coding/leetcode/118.html#118","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"118. \u6768\u8f89\u4e09\u89d2"},{"location":"coding/leetcode/118.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570 numRows \uff0c\u751f\u6210\u6768\u8f89\u4e09\u89d2\u7684\u524d numRows \u884c\u3002 \u5728\u6768\u8f89\u4e09\u89d2\u4e2d\uff0c\u6bcf\u4e2a\u6570\u662f\u5b83\u5de6\u4e0a\u65b9\u548c\u53f3\u4e0a\u65b9\u7684\u6570\u7684\u548c\u3002 \u793a\u4f8b\uff1a \u8f93\u5165: 5 \u8f93\u51fa: [ [1], [1,1], [1,2,1], [1,3,3,1], [1,4,6,4,1] ] Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/118.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u6839\u636e\u6768\u8f89\u4e09\u89d2\u7684\u5b9a\u4e49\uff0c\u901a\u8fc7\u9012\u5f52\u9010\u884c\u6784\u9020\u51fa\u6bcf\u4e00\u884c\u7684\u503c \u4ee3\u7801\u5982\u4e0b\uff1a /** * Return an array of arrays of size *returnSize. * The sizes of the arrays are returned as *returnColumnSizes array. * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free(). */ int ** generate ( int numRows , int * returnSize , int ** returnColumnSizes ) { * returnSize = numRows ; if ( numRows == 0 ) return NULL ; if ( numRows == 1 ) { * returnColumnSizes = ( int * ) malloc ( sizeof ( int )); ** returnColumnSizes = 1 ; int ** ret = ( int ** ) malloc ( sizeof ( int * )); * ret = ( int * ) malloc ( sizeof ( int )); ** ret = 1 ; return ret ; } int retSize = 0 , * oldRetColSizes = NULL , ** rec = generate ( numRows - 1 , & retSize , & oldRetColSizes ), i = 0 ; ** ret = ( int ** ) memcpy ( malloc ( sizeof ( int * ) * numRows ), rec , ( numRows - 1 ) * sizeof ( int * )); * newRetColSizes = memcpy (( int * ) malloc ( sizeof ( int ) * numRows ), oldRetColSizes , ( numRows - 1 ) * sizeof ( int )); * tempArray = ( int * ) malloc ( sizeof ( int ) * numRows ); free ( oldRetColSizes ); free ( rec ); newRetColSizes [ numRows - 1 ] = numRows ; for ( i = 1 ; i < numRows - 1 ; i ++ ) tempArray [ i ] = * ( ret [ numRows - 2 ] + i ) + * ( ret [ numRows - 2 ] + i - 1 ); tempArray [ 0 ] = 1 ; tempArray [ numRows - 1 ] = 1 ; ret [ numRows - 1 ] = tempArray ; * returnColumnSizes = newRetColSizes ; return ret ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/119.html","text":"119. \u6768\u8f89\u4e09\u89d2 II \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u7d22\u5f15 k k \uff0c\u5176\u4e2d k\\leq33 k\\leq33 \uff0c\u8fd4\u56de\u6768\u8f89\u4e09\u89d2\u7684\u7b2c k k \u884c\u3002 \u5728\u6768\u8f89\u4e09\u89d2\u4e2d\uff0c\u6bcf\u4e2a\u6570\u662f\u5b83\u5de6\u4e0a\u65b9\u548c\u53f3\u4e0a\u65b9\u7684\u6570\u7684\u548c\u3002 \u793a\u4f8b\uff1a \u8f93\u5165: 3 \u8f93\u51fa: [1,3,3,1] \u8fdb\u9636\uff1a \u4f60\u53ef\u4ee5\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\u5230 O(k) O(k) \u7a7a\u95f4\u590d\u6742\u5ea6\u5417\uff1f Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5f53\u524d\u884c\u7684\u7ed3\u679c\u4ec5\u4f9d\u8d56\u4e8e\u4e0a\u4e00\u884c\u7684\u7ed3\u679c\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Note: The returned array must be malloced, assume caller calls free(). */ void recur ( int rowIndex , int * Filling ) { if ( rowIndex <= 1 ) return ; recur ( rowIndex - 1 , Filling ); for ( int i = rowIndex - 1 ; i > 0 ; i -- ) Filling [ i ] += Filling [ i - 1 ]; } int * getRow ( int rowIndex , int * returnSize ){ * returnSize = rowIndex + 1 ; int * ret = ( int * ) memset ( malloc ( sizeof ( int ) * * returnSize ), 0 , sizeof ( int ) * * returnSize ); ret [ 0 ] = 1 ; recur ( * returnSize , ret ); return ret ; }","title":"119. \u6768\u8f89\u4e09\u89d2 II"},{"location":"coding/leetcode/119.html#119-ii","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"119. \u6768\u8f89\u4e09\u89d2 II"},{"location":"coding/leetcode/119.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u7d22\u5f15 k k \uff0c\u5176\u4e2d k\\leq33 k\\leq33 \uff0c\u8fd4\u56de\u6768\u8f89\u4e09\u89d2\u7684\u7b2c k k \u884c\u3002 \u5728\u6768\u8f89\u4e09\u89d2\u4e2d\uff0c\u6bcf\u4e2a\u6570\u662f\u5b83\u5de6\u4e0a\u65b9\u548c\u53f3\u4e0a\u65b9\u7684\u6570\u7684\u548c\u3002 \u793a\u4f8b\uff1a \u8f93\u5165: 3 \u8f93\u51fa: [1,3,3,1] \u8fdb\u9636\uff1a \u4f60\u53ef\u4ee5\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\u5230 O(k) O(k) \u7a7a\u95f4\u590d\u6742\u5ea6\u5417\uff1f Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/119.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5f53\u524d\u884c\u7684\u7ed3\u679c\u4ec5\u4f9d\u8d56\u4e8e\u4e0a\u4e00\u884c\u7684\u7ed3\u679c\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Note: The returned array must be malloced, assume caller calls free(). */ void recur ( int rowIndex , int * Filling ) { if ( rowIndex <= 1 ) return ; recur ( rowIndex - 1 , Filling ); for ( int i = rowIndex - 1 ; i > 0 ; i -- ) Filling [ i ] += Filling [ i - 1 ]; } int * getRow ( int rowIndex , int * returnSize ){ * returnSize = rowIndex + 1 ; int * ret = ( int * ) memset ( malloc ( sizeof ( int ) * * returnSize ), 0 , sizeof ( int ) * * returnSize ); ret [ 0 ] = 1 ; recur ( * returnSize , ret ); return ret ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/120.html","text":"120. \u4e09\u89d2\u5f62\u6700\u5c0f\u8def\u5f84\u548c \u00b6 \u96be\u5ea6\uff1a \u4e2d\u7b49 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u4e09\u89d2\u5f62\uff0c\u627e\u51fa\u81ea\u9876\u5411\u4e0b\u7684\u6700\u5c0f\u8def\u5f84\u548c\u3002\u6bcf\u4e00\u6b65\u53ea\u80fd\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\u4e2d\u76f8\u90bb\u7684\u7ed3\u70b9\u4e0a\u3002 \u76f8\u90bb\u7684\u7ed3\u70b9 \u5728\u8fd9\u91cc\u6307\u7684\u662f \u4e0b\u6807 \u4e0e \u4e0a\u4e00\u5c42\u7ed3\u70b9\u4e0b\u6807 \u76f8\u540c\u6216\u8005\u7b49\u4e8e \u4e0a\u4e00\u5c42\u7ed3\u70b9\u4e0b\u6807 + 1 \u7684\u4e24\u4e2a\u7ed3\u70b9\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e09\u89d2\u5f62\uff1a [ [2], [3,4], [6,5,7], [4,1,8,3] ] \u81ea\u9876\u5411\u4e0b\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a 11 \uff08\u5373\uff0c 2 + 3 + 5 + 1 = 11\uff09\u3002 \u8bf4\u660e\uff1a \u5982\u679c\u4f60\u53ef\u4ee5\u53ea\u4f7f\u7528 O(n) O(n) \u7684\u989d\u5916\u7a7a\u95f4\uff08 n n \u4e3a\u4e09\u89d2\u5f62\u7684\u603b\u884c\u6570\uff09\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u90a3\u4e48\u4f60\u7684\u7b97\u6cd5\u4f1a\u5f88\u52a0\u5206\u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u52a8\u6001\u89c4\u5212\uff0c\u4f7f\u7528\u4e09\u89d2\u5f62\u7684\u6700\u540e\u4e00\u884c\u5b58\u653e\u6700\u5c0f\u7684\u548c\uff0c\u4ece\u4e0b\u5f80\u4e0a\u8fdb\u884c\u8ba1\u7b97\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a #define MIN(x, y) (x < y ? x : y) int minimumTotal ( int ** triangle , int triangleSize , int * triangleColSize ) { if ( ! triangleSize ) return 0 ; int * dp1 = triangle [ triangleSize - 1 ], i = 0 , j = 0 ; for ( i = triangleSize - 1 ; i > 0 ; i -- ) for ( j = 0 ; j < triangleColSize [ i - 1 ]; j ++ ) dp1 [ j ] = triangle [ i - 1 ][ j ] + MIN ( dp1 [ j ], dp1 [ j + 1 ]); return dp1 [ 0 ]; }","title":"120. \u4e09\u89d2\u5f62\u6700\u5c0f\u8def\u5f84\u548c"},{"location":"coding/leetcode/120.html#120","text":"\u96be\u5ea6\uff1a \u4e2d\u7b49","title":"120. \u4e09\u89d2\u5f62\u6700\u5c0f\u8def\u5f84\u548c"},{"location":"coding/leetcode/120.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e09\u89d2\u5f62\uff0c\u627e\u51fa\u81ea\u9876\u5411\u4e0b\u7684\u6700\u5c0f\u8def\u5f84\u548c\u3002\u6bcf\u4e00\u6b65\u53ea\u80fd\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\u4e2d\u76f8\u90bb\u7684\u7ed3\u70b9\u4e0a\u3002 \u76f8\u90bb\u7684\u7ed3\u70b9 \u5728\u8fd9\u91cc\u6307\u7684\u662f \u4e0b\u6807 \u4e0e \u4e0a\u4e00\u5c42\u7ed3\u70b9\u4e0b\u6807 \u76f8\u540c\u6216\u8005\u7b49\u4e8e \u4e0a\u4e00\u5c42\u7ed3\u70b9\u4e0b\u6807 + 1 \u7684\u4e24\u4e2a\u7ed3\u70b9\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e09\u89d2\u5f62\uff1a [ [2], [3,4], [6,5,7], [4,1,8,3] ] \u81ea\u9876\u5411\u4e0b\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a 11 \uff08\u5373\uff0c 2 + 3 + 5 + 1 = 11\uff09\u3002 \u8bf4\u660e\uff1a \u5982\u679c\u4f60\u53ef\u4ee5\u53ea\u4f7f\u7528 O(n) O(n) \u7684\u989d\u5916\u7a7a\u95f4\uff08 n n \u4e3a\u4e09\u89d2\u5f62\u7684\u603b\u884c\u6570\uff09\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u90a3\u4e48\u4f60\u7684\u7b97\u6cd5\u4f1a\u5f88\u52a0\u5206\u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/120.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u52a8\u6001\u89c4\u5212\uff0c\u4f7f\u7528\u4e09\u89d2\u5f62\u7684\u6700\u540e\u4e00\u884c\u5b58\u653e\u6700\u5c0f\u7684\u548c\uff0c\u4ece\u4e0b\u5f80\u4e0a\u8fdb\u884c\u8ba1\u7b97\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a #define MIN(x, y) (x < y ? x : y) int minimumTotal ( int ** triangle , int triangleSize , int * triangleColSize ) { if ( ! triangleSize ) return 0 ; int * dp1 = triangle [ triangleSize - 1 ], i = 0 , j = 0 ; for ( i = triangleSize - 1 ; i > 0 ; i -- ) for ( j = 0 ; j < triangleColSize [ i - 1 ]; j ++ ) dp1 [ j ] = triangle [ i - 1 ][ j ] + MIN ( dp1 [ j ], dp1 [ j + 1 ]); return dp1 [ 0 ]; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/121.html","text":"121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u5982\u679c\u4f60\u6700\u591a\u53ea\u5141\u8bb8\u5b8c\u6210\u4e00\u7b14\u4ea4\u6613\uff08\u5373\u4e70\u5165\u548c\u5356\u51fa\u4e00\u652f\u80a1\u7968\u4e00\u6b21\uff09\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002 \u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u5728\u4e70\u5165\u80a1\u7968\u524d\u5356\u51fa\u80a1\u7968\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [7,1,5,3,6,4] \u8f93\u51fa: 5 \u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u6700\u5927\u5229\u6da6 = 6-1 = 5 \u3002 \u6ce8\u610f\u5229\u6da6\u4e0d\u80fd\u662f 7-1 = 6, \u56e0\u4e3a\u5356\u51fa\u4ef7\u683c\u9700\u8981\u5927\u4e8e\u4e70\u5165\u4ef7\u683c\uff1b\u540c\u65f6\uff0c\u4f60\u4e0d\u80fd\u5728\u4e70\u5165\u524d\u5356\u51fa\u80a1\u7968\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u627e\u51fa\u76f8\u5dee\u6700\u5927\u7684\u6ee1\u8db3 a_i < a_j a_i < a_j \u4e14 i < j i < j \u7684\u4e24\u4e2a\u6570\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int maxProfit ( int * prices , int pricesSize ){ int max = 0 , i = pricesSize - 1 , value = 0 , profit = 0 ; for (; i >= 0 ; i -- ) { if ( prices [ i ] > value ) value = prices [ i ]; else profit = value - prices [ i ]; max = max > profit ? max : profit ; } return max ; }","title":"121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a"},{"location":"coding/leetcode/121.html#121","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a"},{"location":"coding/leetcode/121.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u5982\u679c\u4f60\u6700\u591a\u53ea\u5141\u8bb8\u5b8c\u6210\u4e00\u7b14\u4ea4\u6613\uff08\u5373\u4e70\u5165\u548c\u5356\u51fa\u4e00\u652f\u80a1\u7968\u4e00\u6b21\uff09\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002 \u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u5728\u4e70\u5165\u80a1\u7968\u524d\u5356\u51fa\u80a1\u7968\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [7,1,5,3,6,4] \u8f93\u51fa: 5 \u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u6700\u5927\u5229\u6da6 = 6-1 = 5 \u3002 \u6ce8\u610f\u5229\u6da6\u4e0d\u80fd\u662f 7-1 = 6, \u56e0\u4e3a\u5356\u51fa\u4ef7\u683c\u9700\u8981\u5927\u4e8e\u4e70\u5165\u4ef7\u683c\uff1b\u540c\u65f6\uff0c\u4f60\u4e0d\u80fd\u5728\u4e70\u5165\u524d\u5356\u51fa\u80a1\u7968\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/121.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u627e\u51fa\u76f8\u5dee\u6700\u5927\u7684\u6ee1\u8db3 a_i < a_j a_i < a_j \u4e14 i < j i < j \u7684\u4e24\u4e2a\u6570\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int maxProfit ( int * prices , int pricesSize ){ int max = 0 , i = pricesSize - 1 , value = 0 , profit = 0 ; for (; i >= 0 ; i -- ) { if ( prices [ i ] > value ) value = prices [ i ]; else profit = value - prices [ i ]; max = max > profit ? max : profit ; } return max ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/122.html","text":"122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\u4e00\u652f\u80a1\u7968\uff09\u3002 \u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [7,1,5,3,6,4] \u8f93\u51fa: 7 \u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 3 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u968f\u540e\uff0c\u5728\u7b2c 4 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 3\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 6-3 = 3 \u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165: [1,2,3,4,5] \u8f93\u51fa: 4 \u89e3\u91ca: \u5728\u7b2c 1 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u7b2c 1 \u5929\u548c\u7b2c 2 \u5929\u63a5\u8fde\u8d2d\u4e70\u80a1\u7968\uff0c\u4e4b\u540e\u518d\u5c06\u5b83\u4eec\u5356\u51fa\u3002 \u56e0\u4e3a\u8fd9\u6837\u5c5e\u4e8e\u540c\u65f6\u53c2\u4e0e\u4e86\u591a\u7b14\u4ea4\u6613\uff0c\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\u3002 \u793a\u4f8b 3\uff1a \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002 \u63d0\u793a\uff1a 1 <= prices.length <= 3 * 10 ^ 4 0 <= prices[i] <= 10 ^ 4 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5f53\u6570\u7ec4\u957f\u5ea6\u4e3a1\u65f6\uff0c\u4e0d\u80fd\u83b7\u53d6\u4efb\u4f55\u5229\u6da6\uff0c\u8fd4\u56de 0 \uff1b \u4ece\u6570\u7ec4\u672b\u5c3e\u5f00\u59cb\u641c\u7d22\u7b2c\u4e00\u4e2a\u80fd\u76c8\u5229\u7684\u70b9\uff0c\u5219\u6700\u5927\u5229\u6da6\u4e3a\u672c\u6b21\u76c8\u5229\u4e0e\u4e4b\u524d\u6700\u5927\u76c8\u5229\u4e4b\u548c\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int maxProfit ( int * prices , int pricesSize ){ if ( pricesSize < 2 ) return 0 ; int * cur = prices + pricesSize - 1 , currentVal = * cur , len = pricesSize ; while ( cur > prices ) { if ( * cur < * ( cur - 1 )) break ; len -- ; cur -- ; } return ( currentVal - * cur ) + maxProfit ( prices , len - 1 ); }","title":"122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II"},{"location":"coding/leetcode/122.html#122-ii","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II"},{"location":"coding/leetcode/122.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\u4e00\u652f\u80a1\u7968\uff09\u3002 \u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [7,1,5,3,6,4] \u8f93\u51fa: 7 \u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 3 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u968f\u540e\uff0c\u5728\u7b2c 4 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 3\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 6-3 = 3 \u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165: [1,2,3,4,5] \u8f93\u51fa: 4 \u89e3\u91ca: \u5728\u7b2c 1 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u7b2c 1 \u5929\u548c\u7b2c 2 \u5929\u63a5\u8fde\u8d2d\u4e70\u80a1\u7968\uff0c\u4e4b\u540e\u518d\u5c06\u5b83\u4eec\u5356\u51fa\u3002 \u56e0\u4e3a\u8fd9\u6837\u5c5e\u4e8e\u540c\u65f6\u53c2\u4e0e\u4e86\u591a\u7b14\u4ea4\u6613\uff0c\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\u3002 \u793a\u4f8b 3\uff1a \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002 \u63d0\u793a\uff1a 1 <= prices.length <= 3 * 10 ^ 4 0 <= prices[i] <= 10 ^ 4 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/122.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5f53\u6570\u7ec4\u957f\u5ea6\u4e3a1\u65f6\uff0c\u4e0d\u80fd\u83b7\u53d6\u4efb\u4f55\u5229\u6da6\uff0c\u8fd4\u56de 0 \uff1b \u4ece\u6570\u7ec4\u672b\u5c3e\u5f00\u59cb\u641c\u7d22\u7b2c\u4e00\u4e2a\u80fd\u76c8\u5229\u7684\u70b9\uff0c\u5219\u6700\u5927\u5229\u6da6\u4e3a\u672c\u6b21\u76c8\u5229\u4e0e\u4e4b\u524d\u6700\u5927\u76c8\u5229\u4e4b\u548c\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int maxProfit ( int * prices , int pricesSize ){ if ( pricesSize < 2 ) return 0 ; int * cur = prices + pricesSize - 1 , currentVal = * cur , len = pricesSize ; while ( cur > prices ) { if ( * cur < * ( cur - 1 )) break ; len -- ; cur -- ; } return ( currentVal - * cur ) + maxProfit ( prices , len - 1 ); }","title":"\u9898\u89e3"},{"location":"coding/leetcode/125.html","text":"125. \u9a8c\u8bc1\u56de\u6587\u4e32 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u9a8c\u8bc1\u5b83\u662f\u5426\u662f\u56de\u6587\u4e32\uff0c\u53ea\u8003\u8651\u5b57\u6bcd\u548c\u6570\u5b57\u5b57\u7b26\uff0c\u53ef\u4ee5\u5ffd\u7565\u5b57\u6bcd\u7684\u5927\u5c0f\u5199\u3002 \u8bf4\u660e\uff1a \u672c\u9898\u4e2d\uff0c\u6211\u4eec\u5c06\u7a7a\u5b57\u7b26\u4e32\u5b9a\u4e49\u4e3a\u6709\u6548\u7684\u56de\u6587\u4e32\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: \"A man, a plan, a canal: Panama\" \u8f93\u51fa: true \u793a\u4f8b 2\uff1a \u8f93\u5165: \"race a car\" \u8f93\u51fa: false Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\u8fdb\u884c\u5904\u7406\uff0c\u9700\u8981\u6ce8\u610f\u5982\u4e0b\u7279\u6b8a\u60c5\u51b5 \u9700\u8981\u5ffd\u7565\u5b57\u7b26\u4e32\u4e2d\u7684\u7b26\u53f7\u800c\u53ea\u8003\u8651\u5b57\u6bcd\u548c\u6570\u5b57 \u5927\u5c0f\u5199\u7684ASCII\u6570\u503c\u76f8\u5dee32\uff0c\u4f46ASCII\u6570\u503c\u76f8\u5dee32\u7684\u4e24\u4e2a\u5b57\u7b26\u4e0d\u4e00\u5b9a\u662f\u5927\u5c0f\u5199\u5173\u7cfb\uff0c\u5982 '0' (48)\u4e0e 'P' (80) \u4ee3\u7801\u5982\u4e0b\uff1a bool isText ( char s ) { return ( s >= 'A' && s <= 'Z' ) || ( s >= 'a' && s <= 'z' ) || ( s >= '0' && s <= '9' ); } bool isSame ( char s1 , char s2 ) { return ( s1 == s2 ) || ( s2 >= 'A' && s1 - s2 == 32 ) || ( s1 >= 'A' && s2 - s1 == 32 ); } bool isPalindrome ( char * s ){ int len = strlen ( s ), head = 0 , tail = len - 1 ; while ( head < len && ! isText ( s [ head ])) head ++ ; while ( tail >= 0 && ! isText ( s [ tail ])) tail -- ; while ( tail > head && head < len && tail >= 0 ) { if ( ! isSame ( s [ head ], s [ tail ])) return false ; head ++ ; tail -- ; while ( ! isText ( s [ head ])) head ++ ; while ( ! isText ( s [ tail ])) tail -- ; } return true ; }","title":"125. \u9a8c\u8bc1\u56de\u6587\u4e32"},{"location":"coding/leetcode/125.html#125","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"125. \u9a8c\u8bc1\u56de\u6587\u4e32"},{"location":"coding/leetcode/125.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u9a8c\u8bc1\u5b83\u662f\u5426\u662f\u56de\u6587\u4e32\uff0c\u53ea\u8003\u8651\u5b57\u6bcd\u548c\u6570\u5b57\u5b57\u7b26\uff0c\u53ef\u4ee5\u5ffd\u7565\u5b57\u6bcd\u7684\u5927\u5c0f\u5199\u3002 \u8bf4\u660e\uff1a \u672c\u9898\u4e2d\uff0c\u6211\u4eec\u5c06\u7a7a\u5b57\u7b26\u4e32\u5b9a\u4e49\u4e3a\u6709\u6548\u7684\u56de\u6587\u4e32\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: \"A man, a plan, a canal: Panama\" \u8f93\u51fa: true \u793a\u4f8b 2\uff1a \u8f93\u5165: \"race a car\" \u8f93\u51fa: false Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/125.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\u8fdb\u884c\u5904\u7406\uff0c\u9700\u8981\u6ce8\u610f\u5982\u4e0b\u7279\u6b8a\u60c5\u51b5 \u9700\u8981\u5ffd\u7565\u5b57\u7b26\u4e32\u4e2d\u7684\u7b26\u53f7\u800c\u53ea\u8003\u8651\u5b57\u6bcd\u548c\u6570\u5b57 \u5927\u5c0f\u5199\u7684ASCII\u6570\u503c\u76f8\u5dee32\uff0c\u4f46ASCII\u6570\u503c\u76f8\u5dee32\u7684\u4e24\u4e2a\u5b57\u7b26\u4e0d\u4e00\u5b9a\u662f\u5927\u5c0f\u5199\u5173\u7cfb\uff0c\u5982 '0' (48)\u4e0e 'P' (80) \u4ee3\u7801\u5982\u4e0b\uff1a bool isText ( char s ) { return ( s >= 'A' && s <= 'Z' ) || ( s >= 'a' && s <= 'z' ) || ( s >= '0' && s <= '9' ); } bool isSame ( char s1 , char s2 ) { return ( s1 == s2 ) || ( s2 >= 'A' && s1 - s2 == 32 ) || ( s1 >= 'A' && s2 - s1 == 32 ); } bool isPalindrome ( char * s ){ int len = strlen ( s ), head = 0 , tail = len - 1 ; while ( head < len && ! isText ( s [ head ])) head ++ ; while ( tail >= 0 && ! isText ( s [ tail ])) tail -- ; while ( tail > head && head < len && tail >= 0 ) { if ( ! isSame ( s [ head ], s [ tail ])) return false ; head ++ ; tail -- ; while ( ! isText ( s [ head ])) head ++ ; while ( ! isText ( s [ tail ])) tail -- ; } return true ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/13.html","text":"13. \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7f57\u9a6c\u6570\u5b57\u5305\u542b\u4ee5\u4e0b\u4e03\u79cd\u5b57\u7b26: I \uff0c V \uff0c X \uff0c L \uff0c C \uff0c D \u548c M \u3002 \u5b57\u7b26 \u6570\u503c I 1 V 5 X 10 L 50 C 100 D 500 M 1000 \u4f8b\u5982\uff0c \u7f57\u9a6c\u6570\u5b57 2 \u5199\u505a II \uff0c\u5373\u4e3a\u4e24\u4e2a\u5e76\u5217\u7684 1\u300212 \u5199\u505a XII \uff0c\u5373\u4e3a X + II \u3002 27 \u5199\u505a XXVII , \u5373\u4e3a XX + V + II \u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7f57\u9a6c\u6570\u5b57\u4e2d\u5c0f\u7684\u6570\u5b57\u5728\u5927\u7684\u6570\u5b57\u7684\u53f3\u8fb9\u3002\u4f46\u4e5f\u5b58\u5728\u7279\u4f8b\uff0c\u4f8b\u5982 4 \u4e0d\u5199\u505a IIII \uff0c\u800c\u662f IV \u3002\u6570\u5b57 1 \u5728\u6570\u5b57 5 \u7684\u5de6\u8fb9\uff0c\u6240\u8868\u793a\u7684\u6570\u7b49\u4e8e\u5927\u6570 5 \u51cf\u5c0f\u6570 1 \u5f97\u5230\u7684\u6570\u503c 4 \u3002\u540c\u6837\u5730\uff0c\u6570\u5b57 9 \u8868\u793a\u4e3a IX \u3002\u8fd9\u4e2a\u7279\u6b8a\u7684\u89c4\u5219\u53ea\u9002\u7528\u4e8e\u4ee5\u4e0b\u516d\u79cd\u60c5\u51b5\uff1a I \u53ef\u4ee5\u653e\u5728 V (5) \u548c X (10) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 4 \u548c 9\u3002 X \u53ef\u4ee5\u653e\u5728 L (50) \u548c C (100) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 40 \u548c 90\u3002 C \u53ef\u4ee5\u653e\u5728 D (500) \u548c M (1000) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 400 \u548c 900\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u7f57\u9a6c\u6570\u5b57\uff0c\u5c06\u5176\u8f6c\u6362\u6210\u6574\u6570\u3002\u8f93\u5165\u786e\u4fdd\u5728 1 \u5230 3999 \u7684\u8303\u56f4\u5185\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: \"III\" \u8f93\u51fa: 3 \u793a\u4f8b 2\uff1a \u8f93\u5165: \"IV\" \u8f93\u51fa: 4 \u793a\u4f8b 3\uff1a \u8f93\u5165: \"IX\" \u8f93\u51fa: 9 \u793a\u4f8b 4\uff1a \u8f93\u5165: \"LVIII\" \u8f93\u51fa: 58 \u89e3\u91ca: L = 50, V= 5, III = 3. \u793a\u4f8b 5\uff1a \u8f93\u5165: \"MCMXCIV\" \u8f93\u51fa: 1994 \u89e3\u91ca: M = 1000, CM = 900, XC = 90, IV = 4. \u63d0\u793a\uff1a \u9898\u76ee\u6240\u7ed9\u6d4b\u8bd5\u7528\u4f8b\u7686\u7b26\u5408\u7f57\u9a6c\u6570\u5b57\u4e66\u5199\u89c4\u5219\uff0c\u4e0d\u4f1a\u51fa\u73b0\u8de8\u4f4d\u7b49\u60c5\u51b5\u3002 IC \u548c IM \u8fd9\u6837\u7684\u4f8b\u5b50\u5e76\u4e0d\u7b26\u5408\u9898\u76ee\u8981\u6c42\uff0c49 \u5e94\u8be5\u5199\u4f5c XLIX \uff0c999 \u5e94\u8be5\u5199\u4f5c CMXCIX \u3002 \u5173\u4e8e\u7f57\u9a6c\u6570\u5b57\u7684\u8be6\u5c3d\u4e66\u5199\u89c4\u5219\uff0c\u53ef\u4ee5\u53c2\u8003 \u7f57\u9a6c\u6570\u5b57 - Mathematics \u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u9010\u4f4d\u5904\u7406\u5373\u53ef\uff0c\u6ce8\u610f\u5c0f\u7684\u6570\u5b57\u5728\u5927\u7684\u6570\u5b57\u5de6\u8fb9\u7684\u7279\u6b8a\u60c5\u51b5 \u4ee3\u7801\u5982\u4e0b\uff1a int romanToInt ( char * s ){ char * cur = s ; int ret = 0 ; while ( * cur ) { switch ( * cur ) { case 'I' : if ( * ( cur + 1 ) == 'V' || * ( cur + 1 ) == 'X' ) ret -= 1 ; else ret += 1 ; break ; case 'V' : ret += 5 ; break ; case 'X' : if ( * ( cur + 1 ) == 'L' || * ( cur + 1 ) == 'C' ) ret -= 10 ; else ret += 10 ; break ; case 'L' : ret += 50 ; break ; case 'C' : if ( * ( cur + 1 ) == 'D' || * ( cur + 1 ) == 'M' ) ret -= 100 ; else ret += 100 ; break ; case 'M' : ret += 500 ; case 'D' : ret += 500 ; } cur ++ ; } return ret ; }","title":"13. \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570"},{"location":"coding/leetcode/13.html#13","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"13. \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570"},{"location":"coding/leetcode/13.html#_1","text":"\u7f57\u9a6c\u6570\u5b57\u5305\u542b\u4ee5\u4e0b\u4e03\u79cd\u5b57\u7b26: I \uff0c V \uff0c X \uff0c L \uff0c C \uff0c D \u548c M \u3002 \u5b57\u7b26 \u6570\u503c I 1 V 5 X 10 L 50 C 100 D 500 M 1000 \u4f8b\u5982\uff0c \u7f57\u9a6c\u6570\u5b57 2 \u5199\u505a II \uff0c\u5373\u4e3a\u4e24\u4e2a\u5e76\u5217\u7684 1\u300212 \u5199\u505a XII \uff0c\u5373\u4e3a X + II \u3002 27 \u5199\u505a XXVII , \u5373\u4e3a XX + V + II \u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7f57\u9a6c\u6570\u5b57\u4e2d\u5c0f\u7684\u6570\u5b57\u5728\u5927\u7684\u6570\u5b57\u7684\u53f3\u8fb9\u3002\u4f46\u4e5f\u5b58\u5728\u7279\u4f8b\uff0c\u4f8b\u5982 4 \u4e0d\u5199\u505a IIII \uff0c\u800c\u662f IV \u3002\u6570\u5b57 1 \u5728\u6570\u5b57 5 \u7684\u5de6\u8fb9\uff0c\u6240\u8868\u793a\u7684\u6570\u7b49\u4e8e\u5927\u6570 5 \u51cf\u5c0f\u6570 1 \u5f97\u5230\u7684\u6570\u503c 4 \u3002\u540c\u6837\u5730\uff0c\u6570\u5b57 9 \u8868\u793a\u4e3a IX \u3002\u8fd9\u4e2a\u7279\u6b8a\u7684\u89c4\u5219\u53ea\u9002\u7528\u4e8e\u4ee5\u4e0b\u516d\u79cd\u60c5\u51b5\uff1a I \u53ef\u4ee5\u653e\u5728 V (5) \u548c X (10) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 4 \u548c 9\u3002 X \u53ef\u4ee5\u653e\u5728 L (50) \u548c C (100) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 40 \u548c 90\u3002 C \u53ef\u4ee5\u653e\u5728 D (500) \u548c M (1000) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 400 \u548c 900\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u7f57\u9a6c\u6570\u5b57\uff0c\u5c06\u5176\u8f6c\u6362\u6210\u6574\u6570\u3002\u8f93\u5165\u786e\u4fdd\u5728 1 \u5230 3999 \u7684\u8303\u56f4\u5185\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: \"III\" \u8f93\u51fa: 3 \u793a\u4f8b 2\uff1a \u8f93\u5165: \"IV\" \u8f93\u51fa: 4 \u793a\u4f8b 3\uff1a \u8f93\u5165: \"IX\" \u8f93\u51fa: 9 \u793a\u4f8b 4\uff1a \u8f93\u5165: \"LVIII\" \u8f93\u51fa: 58 \u89e3\u91ca: L = 50, V= 5, III = 3. \u793a\u4f8b 5\uff1a \u8f93\u5165: \"MCMXCIV\" \u8f93\u51fa: 1994 \u89e3\u91ca: M = 1000, CM = 900, XC = 90, IV = 4. \u63d0\u793a\uff1a \u9898\u76ee\u6240\u7ed9\u6d4b\u8bd5\u7528\u4f8b\u7686\u7b26\u5408\u7f57\u9a6c\u6570\u5b57\u4e66\u5199\u89c4\u5219\uff0c\u4e0d\u4f1a\u51fa\u73b0\u8de8\u4f4d\u7b49\u60c5\u51b5\u3002 IC \u548c IM \u8fd9\u6837\u7684\u4f8b\u5b50\u5e76\u4e0d\u7b26\u5408\u9898\u76ee\u8981\u6c42\uff0c49 \u5e94\u8be5\u5199\u4f5c XLIX \uff0c999 \u5e94\u8be5\u5199\u4f5c CMXCIX \u3002 \u5173\u4e8e\u7f57\u9a6c\u6570\u5b57\u7684\u8be6\u5c3d\u4e66\u5199\u89c4\u5219\uff0c\u53ef\u4ee5\u53c2\u8003 \u7f57\u9a6c\u6570\u5b57 - Mathematics \u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/13.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u9010\u4f4d\u5904\u7406\u5373\u53ef\uff0c\u6ce8\u610f\u5c0f\u7684\u6570\u5b57\u5728\u5927\u7684\u6570\u5b57\u5de6\u8fb9\u7684\u7279\u6b8a\u60c5\u51b5 \u4ee3\u7801\u5982\u4e0b\uff1a int romanToInt ( char * s ){ char * cur = s ; int ret = 0 ; while ( * cur ) { switch ( * cur ) { case 'I' : if ( * ( cur + 1 ) == 'V' || * ( cur + 1 ) == 'X' ) ret -= 1 ; else ret += 1 ; break ; case 'V' : ret += 5 ; break ; case 'X' : if ( * ( cur + 1 ) == 'L' || * ( cur + 1 ) == 'C' ) ret -= 10 ; else ret += 10 ; break ; case 'L' : ret += 50 ; break ; case 'C' : if ( * ( cur + 1 ) == 'D' || * ( cur + 1 ) == 'M' ) ret -= 100 ; else ret += 100 ; break ; case 'M' : ret += 500 ; case 'D' : ret += 500 ; } cur ++ ; } return ret ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/136.html","text":"136. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u6574\u6570\u6570\u7ec4\uff0c\u9664\u4e86\u67d0\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u4ee5\u5916\uff0c\u5176\u4f59\u6bcf\u4e2a\u5143\u7d20\u5747\u51fa\u73b0\u4e24\u6b21\u3002\u627e\u51fa\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\u7684\u5143\u7d20\u3002 \u8bf4\u660e\uff1a \u4f60\u7684\u7b97\u6cd5\u5e94\u8be5\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u4f60\u53ef\u4ee5\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u6765\u5b9e\u73b0\u5417\uff1f \u793a\u4f8b 1\uff1a \u8f93\u5165: [2,2,1] \u8f93\u51fa: 1 \u793a\u4f8b 2\uff1a \u8f93\u5165: [4,1,2,1,2] \u8f93\u51fa: 4 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5f02\u6216\u8fd0\u7b97\u5177\u6709\u5982\u4e0b\u6027\u8d28\uff1a \u4ea4\u6362\u5f8b\uff1a a ^ b = b ^ a \u7ed3\u5408\u5f8b\uff1a (a ^ b) ^ c = a ^ (b ^ c) \u82e5 a ^ b = c \uff0c\u5219 a ^ c = b \u3001 b ^ c = a a ^ a = 0 \u6839\u636e\u6027\u8d281\u30012\uff0c\u5f02\u6216\u8fd0\u7b97\u7684\u7ed3\u679c\u4e0e\u53c2\u4e0e\u8fd0\u7b97\u7684\u6240\u6709\u6570\u503c\u7684\u6392\u5217\u987a\u5e8f\u65e0\u5173\u3002\u6839\u636e\u6027\u8d283\u30014\uff0c\u76f8\u540c\u6574\u6570\u7684\u5f02\u6216\u503c\u4e3a0\uff0c0\u4e0e\u4efb\u4f55\u6570\u5f02\u6216\u4ecd\u4e3a\u8be5\u6570\u3002\u56e0\u6b64\u5c06\u6570\u7ec4\u4e2d\u5404\u5143\u7d20\u8fdb\u884c\u6309\u4f4d\u5f02\u6216\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5373\u4e3a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u503c\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int singleNumber ( int * nums , int numsSize ){ int ret = 0 , i = 0 ; for ( i = 0 ; i < numsSize ; i ++ ) ret ^= nums [ i ]; return ret ; }","title":"136. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57"},{"location":"coding/leetcode/136.html#136","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"136. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57"},{"location":"coding/leetcode/136.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u6574\u6570\u6570\u7ec4\uff0c\u9664\u4e86\u67d0\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u4ee5\u5916\uff0c\u5176\u4f59\u6bcf\u4e2a\u5143\u7d20\u5747\u51fa\u73b0\u4e24\u6b21\u3002\u627e\u51fa\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\u7684\u5143\u7d20\u3002 \u8bf4\u660e\uff1a \u4f60\u7684\u7b97\u6cd5\u5e94\u8be5\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u4f60\u53ef\u4ee5\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u6765\u5b9e\u73b0\u5417\uff1f \u793a\u4f8b 1\uff1a \u8f93\u5165: [2,2,1] \u8f93\u51fa: 1 \u793a\u4f8b 2\uff1a \u8f93\u5165: [4,1,2,1,2] \u8f93\u51fa: 4 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/136.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5f02\u6216\u8fd0\u7b97\u5177\u6709\u5982\u4e0b\u6027\u8d28\uff1a \u4ea4\u6362\u5f8b\uff1a a ^ b = b ^ a \u7ed3\u5408\u5f8b\uff1a (a ^ b) ^ c = a ^ (b ^ c) \u82e5 a ^ b = c \uff0c\u5219 a ^ c = b \u3001 b ^ c = a a ^ a = 0 \u6839\u636e\u6027\u8d281\u30012\uff0c\u5f02\u6216\u8fd0\u7b97\u7684\u7ed3\u679c\u4e0e\u53c2\u4e0e\u8fd0\u7b97\u7684\u6240\u6709\u6570\u503c\u7684\u6392\u5217\u987a\u5e8f\u65e0\u5173\u3002\u6839\u636e\u6027\u8d283\u30014\uff0c\u76f8\u540c\u6574\u6570\u7684\u5f02\u6216\u503c\u4e3a0\uff0c0\u4e0e\u4efb\u4f55\u6570\u5f02\u6216\u4ecd\u4e3a\u8be5\u6570\u3002\u56e0\u6b64\u5c06\u6570\u7ec4\u4e2d\u5404\u5143\u7d20\u8fdb\u884c\u6309\u4f4d\u5f02\u6216\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5373\u4e3a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u503c\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int singleNumber ( int * nums , int numsSize ){ int ret = 0 , i = 0 ; for ( i = 0 ; i < numsSize ; i ++ ) ret ^= nums [ i ]; return ret ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/14.html","text":"14. \u6700\u957f\u516c\u5171\u524d\u7f00 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e\u5b57\u7b26\u4e32\u6570\u7ec4\u4e2d\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 \"\" \u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [\"flower\",\"flow\",\"flight\"] \u8f93\u51fa: \"fl\" \u793a\u4f8b 2\uff1a \u8f93\u5165: [\"dog\",\"racecar\",\"car\"] \u8f93\u51fa: \"\" \u89e3\u91ca: \u8f93\u5165\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\u3002 \u8bf4\u660e\uff1a \u6240\u6709\u8f93\u5165\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd a-z \u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5728\u6bd4\u8f83\u524d\u7f00\u65f6\u53ea\u9700\u8981\u5c06\u524d n \u4e2a\u5b57\u7b26\u4e32\u7684\u516c\u5171\u524d\u7f00\u4e0e\u7b2c n+1 \u4e2a\u5b57\u7b26\u4e32\u8fdb\u884c\u6bd4\u8f83\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a char * compareTwo ( char * str1 , char * str2 ) { char * cur1 = str1 , * cur2 = str2 , * ret = NULL ; int len = 0 ; while ( * cur1 && * cur2 ) { if ( * cur1 != * cur2 ) break ; else len ++ ; cur1 ++ ; cur2 ++ ; } ret = ( char * ) memset ( malloc ( sizeof ( char ) * ( len + 1 )), 0 , sizeof ( char ) * ( len + 1 )); return memcpy ( ret , str1 , sizeof ( char ) * len ); } char * longestCommonPrefix ( char ** strs , int strsSize ){ if ( strsSize == 0 ) return memset ( malloc ( sizeof ( char )), 0 , sizeof ( char )); if ( strsSize == 1 ) return strs [ 0 ]; if ( strsSize == 2 ) return compareTwo ( strs [ 0 ], strs [ 1 ]); int rec_size = ( strsSize + 1 ) >> 1 , i = 0 ; char ** rec = ( char ** ) memset ( malloc ( sizeof ( char * ) * rec_size ), 0 , sizeof ( char * ) * rec_size ); for ( i = 0 ; i < strsSize >> 1 ; i ++ ) rec [ i ] = compareTwo ( strs [ 2 * i ], strs [ 2 * i + 1 ]); if ( strsSize & 1 ) rec [ rec_size - 1 ] = strs [ strsSize - 1 ]; return longestCommonPrefix ( rec , rec_size ); }","title":"14. \u6700\u957f\u516c\u5171\u524d\u7f00"},{"location":"coding/leetcode/14.html#14","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"14. \u6700\u957f\u516c\u5171\u524d\u7f00"},{"location":"coding/leetcode/14.html#_1","text":"\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e\u5b57\u7b26\u4e32\u6570\u7ec4\u4e2d\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 \"\" \u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [\"flower\",\"flow\",\"flight\"] \u8f93\u51fa: \"fl\" \u793a\u4f8b 2\uff1a \u8f93\u5165: [\"dog\",\"racecar\",\"car\"] \u8f93\u51fa: \"\" \u89e3\u91ca: \u8f93\u5165\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\u3002 \u8bf4\u660e\uff1a \u6240\u6709\u8f93\u5165\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd a-z \u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/14.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5728\u6bd4\u8f83\u524d\u7f00\u65f6\u53ea\u9700\u8981\u5c06\u524d n \u4e2a\u5b57\u7b26\u4e32\u7684\u516c\u5171\u524d\u7f00\u4e0e\u7b2c n+1 \u4e2a\u5b57\u7b26\u4e32\u8fdb\u884c\u6bd4\u8f83\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a char * compareTwo ( char * str1 , char * str2 ) { char * cur1 = str1 , * cur2 = str2 , * ret = NULL ; int len = 0 ; while ( * cur1 && * cur2 ) { if ( * cur1 != * cur2 ) break ; else len ++ ; cur1 ++ ; cur2 ++ ; } ret = ( char * ) memset ( malloc ( sizeof ( char ) * ( len + 1 )), 0 , sizeof ( char ) * ( len + 1 )); return memcpy ( ret , str1 , sizeof ( char ) * len ); } char * longestCommonPrefix ( char ** strs , int strsSize ){ if ( strsSize == 0 ) return memset ( malloc ( sizeof ( char )), 0 , sizeof ( char )); if ( strsSize == 1 ) return strs [ 0 ]; if ( strsSize == 2 ) return compareTwo ( strs [ 0 ], strs [ 1 ]); int rec_size = ( strsSize + 1 ) >> 1 , i = 0 ; char ** rec = ( char ** ) memset ( malloc ( sizeof ( char * ) * rec_size ), 0 , sizeof ( char * ) * rec_size ); for ( i = 0 ; i < strsSize >> 1 ; i ++ ) rec [ i ] = compareTwo ( strs [ 2 * i ], strs [ 2 * i + 1 ]); if ( strsSize & 1 ) rec [ rec_size - 1 ] = strs [ strsSize - 1 ]; return longestCommonPrefix ( rec , rec_size ); }","title":"\u9898\u89e3"},{"location":"coding/leetcode/155.html","text":"155. \u6700\u5c0f\u6808 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301 push \uff0c pop \uff0c top \u64cd\u4f5c\uff0c\u5e76\u80fd\u5728\u5e38\u6570\u65f6\u95f4\u5185\u68c0\u7d22\u5230\u6700\u5c0f\u5143\u7d20\u7684\u6808\u3002 push(x) \u2014\u2014 \u5c06\u5143\u7d20 x \u63a8\u5165\u6808\u4e2d\u3002 pop() \u2014\u2014 \u5220\u9664\u6808\u9876\u7684\u5143\u7d20\u3002 top() \u2014\u2014 \u83b7\u53d6\u6808\u9876\u5143\u7d20\u3002 getMin() \u2014\u2014 \u68c0\u7d22\u6808\u4e2d\u7684\u6700\u5c0f\u5143\u7d20\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a [\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"] [[],[-2],[0],[-3],[],[],[],[]] \u8f93\u51fa\uff1a [null,null,null,null,-3,null,0,-2] \u89e3\u91ca\uff1a MinStack minStack = new MinStack(); minStack.push(-2); minStack.push(0); minStack.push(-3); minStack.getMin(); --> \u8fd4\u56de -3. minStack.pop(); minStack.top(); --> \u8fd4\u56de 0. minStack.getMin(); --> \u8fd4\u56de -2. \u63d0\u793a\uff1a pop \u3001 top \u548c getMin \u64cd\u4f5c\u603b\u662f\u5728 \u975e\u7a7a\u6808 \u4e0a\u8c03\u7528\u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u4f7f\u7528\u4e24\u4e2a\u57df\u5206\u522b\u5b58\u50a8\u5f53\u524d\u6570\u503c\u548c\u5f53\u524d\u6808\u4e2d\u7684\u6700\u5c0f\u503c\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a #define MIN(x, y) (x < y ? x : y) struct cell { int val ; int curMin ; }; typedef struct { struct cell values [ 10000 ]; int top ; } MinStack ; /** initialize your data structure here. */ MinStack * minStackCreate () { return ( MinStack * ) memset ( malloc ( sizeof ( MinStack )), 0 , sizeof ( MinStack )); } void minStackPush ( MinStack * obj , int x ) { obj -> values [ obj -> top ]. val = x ; obj -> values [ obj -> top ]. curMin = obj -> top > 0 ? MIN ( x , obj -> values [ obj -> top - 1 ]. curMin ) : x ; obj -> top ++ ; } void minStackPop ( MinStack * obj ) { obj -> top -- ; } int minStackTop ( MinStack * obj ) { return obj -> values [ obj -> top - 1 ]. val ; } int minStackGetMin ( MinStack * obj ) { return obj -> values [ obj -> top - 1 ]. curMin ; } void minStackFree ( MinStack * obj ) { free ( obj ); } /** * Your MinStack struct will be instantiated and called as such: * MinStack* obj = minStackCreate(); * minStackPush(obj, x); * minStackPop(obj); * int param_3 = minStackTop(obj); * int param_4 = minStackGetMin(obj); * minStackFree(obj); */","title":"155. \u6700\u5c0f\u6808"},{"location":"coding/leetcode/155.html#155","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"155. \u6700\u5c0f\u6808"},{"location":"coding/leetcode/155.html#_1","text":"\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301 push \uff0c pop \uff0c top \u64cd\u4f5c\uff0c\u5e76\u80fd\u5728\u5e38\u6570\u65f6\u95f4\u5185\u68c0\u7d22\u5230\u6700\u5c0f\u5143\u7d20\u7684\u6808\u3002 push(x) \u2014\u2014 \u5c06\u5143\u7d20 x \u63a8\u5165\u6808\u4e2d\u3002 pop() \u2014\u2014 \u5220\u9664\u6808\u9876\u7684\u5143\u7d20\u3002 top() \u2014\u2014 \u83b7\u53d6\u6808\u9876\u5143\u7d20\u3002 getMin() \u2014\u2014 \u68c0\u7d22\u6808\u4e2d\u7684\u6700\u5c0f\u5143\u7d20\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a [\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"] [[],[-2],[0],[-3],[],[],[],[]] \u8f93\u51fa\uff1a [null,null,null,null,-3,null,0,-2] \u89e3\u91ca\uff1a MinStack minStack = new MinStack(); minStack.push(-2); minStack.push(0); minStack.push(-3); minStack.getMin(); --> \u8fd4\u56de -3. minStack.pop(); minStack.top(); --> \u8fd4\u56de 0. minStack.getMin(); --> \u8fd4\u56de -2. \u63d0\u793a\uff1a pop \u3001 top \u548c getMin \u64cd\u4f5c\u603b\u662f\u5728 \u975e\u7a7a\u6808 \u4e0a\u8c03\u7528\u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/155.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u4f7f\u7528\u4e24\u4e2a\u57df\u5206\u522b\u5b58\u50a8\u5f53\u524d\u6570\u503c\u548c\u5f53\u524d\u6808\u4e2d\u7684\u6700\u5c0f\u503c\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a #define MIN(x, y) (x < y ? x : y) struct cell { int val ; int curMin ; }; typedef struct { struct cell values [ 10000 ]; int top ; } MinStack ; /** initialize your data structure here. */ MinStack * minStackCreate () { return ( MinStack * ) memset ( malloc ( sizeof ( MinStack )), 0 , sizeof ( MinStack )); } void minStackPush ( MinStack * obj , int x ) { obj -> values [ obj -> top ]. val = x ; obj -> values [ obj -> top ]. curMin = obj -> top > 0 ? MIN ( x , obj -> values [ obj -> top - 1 ]. curMin ) : x ; obj -> top ++ ; } void minStackPop ( MinStack * obj ) { obj -> top -- ; } int minStackTop ( MinStack * obj ) { return obj -> values [ obj -> top - 1 ]. val ; } int minStackGetMin ( MinStack * obj ) { return obj -> values [ obj -> top - 1 ]. curMin ; } void minStackFree ( MinStack * obj ) { free ( obj ); } /** * Your MinStack struct will be instantiated and called as such: * MinStack* obj = minStackCreate(); * minStackPush(obj, x); * minStackPop(obj); * int param_3 = minStackTop(obj); * int param_4 = minStackGetMin(obj); * minStackFree(obj); */","title":"\u9898\u89e3"},{"location":"coding/leetcode/189.html","text":"189. \u65cb\u8f6c\u6570\u7ec4 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5c06\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u5411\u53f3\u79fb\u52a8 k \u4e2a\u4f4d\u7f6e\uff0c\u5176\u4e2d k \u662f\u975e\u8d1f\u6570\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [1,2,3,4,5,6,7] \u548c k = 3 \u8f93\u51fa: [5,6,7,1,2,3,4] \u89e3\u91ca: \u5411\u53f3\u65cb\u8f6c 1 \u6b65: [7,1,2,3,4,5,6] \u5411\u53f3\u65cb\u8f6c 2 \u6b65: [6,7,1,2,3,4,5] \u5411\u53f3\u65cb\u8f6c 3 \u6b65: [5,6,7,1,2,3,4] \u793a\u4f8b 2\uff1a \u8f93\u5165: [-1,-100,3,99] \u548c k = 2 \u8f93\u51fa: [3,99,-1,-100] \u89e3\u91ca: \u5411\u53f3\u65cb\u8f6c 1 \u6b65: [99,-1,-100,3] \u5411\u53f3\u65cb\u8f6c 2 \u6b65: [3,99,-1,-100] \u8bf4\u660e\uff1a \u5c3d\u53ef\u80fd\u60f3\u51fa\u66f4\u591a\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u81f3\u5c11\u6709\u4e09\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u8981\u6c42\u4f7f\u7528\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(1) O(1) \u7684 \u539f\u5730 \u7b97\u6cd5\u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5148\u53cd\u8f6c\u6574\u4e2a\u6570\u7ec4\uff0c\u518d\u4ee5\u7b2c k k \u4e2a\u5143\u7d20\u4e3a\u754c\uff0c\u5206\u522b\u53cd\u8f6c k k \u4e4b\u524d\u7684\u90e8\u5206\u4e0e k k \u53ca k k \u4e4b\u540e\u7684\u90e8\u5206\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a void Reverse ( int * nums , int numsSize ) { int head = 0 , tail = numsSize - 1 , temp = 0 ; while ( tail > head ) { temp = nums [ head ]; nums [ head ] = nums [ tail ]; nums [ tail ] = temp ; tail -- ; head ++ ; } } void rotate ( int * nums , int numsSize , int k ){ if ( numsSize < 2 ) return ; k %= numsSize ; Reverse ( nums , numsSize ); Reverse ( nums , k ); Reverse ( nums + k , numsSize - k ); }","title":"189. \u65cb\u8f6c\u6570\u7ec4"},{"location":"coding/leetcode/189.html#189","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"189. \u65cb\u8f6c\u6570\u7ec4"},{"location":"coding/leetcode/189.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5c06\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u5411\u53f3\u79fb\u52a8 k \u4e2a\u4f4d\u7f6e\uff0c\u5176\u4e2d k \u662f\u975e\u8d1f\u6570\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [1,2,3,4,5,6,7] \u548c k = 3 \u8f93\u51fa: [5,6,7,1,2,3,4] \u89e3\u91ca: \u5411\u53f3\u65cb\u8f6c 1 \u6b65: [7,1,2,3,4,5,6] \u5411\u53f3\u65cb\u8f6c 2 \u6b65: [6,7,1,2,3,4,5] \u5411\u53f3\u65cb\u8f6c 3 \u6b65: [5,6,7,1,2,3,4] \u793a\u4f8b 2\uff1a \u8f93\u5165: [-1,-100,3,99] \u548c k = 2 \u8f93\u51fa: [3,99,-1,-100] \u89e3\u91ca: \u5411\u53f3\u65cb\u8f6c 1 \u6b65: [99,-1,-100,3] \u5411\u53f3\u65cb\u8f6c 2 \u6b65: [3,99,-1,-100] \u8bf4\u660e\uff1a \u5c3d\u53ef\u80fd\u60f3\u51fa\u66f4\u591a\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u81f3\u5c11\u6709\u4e09\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u8981\u6c42\u4f7f\u7528\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(1) O(1) \u7684 \u539f\u5730 \u7b97\u6cd5\u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/189.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5148\u53cd\u8f6c\u6574\u4e2a\u6570\u7ec4\uff0c\u518d\u4ee5\u7b2c k k \u4e2a\u5143\u7d20\u4e3a\u754c\uff0c\u5206\u522b\u53cd\u8f6c k k \u4e4b\u524d\u7684\u90e8\u5206\u4e0e k k \u53ca k k \u4e4b\u540e\u7684\u90e8\u5206\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a void Reverse ( int * nums , int numsSize ) { int head = 0 , tail = numsSize - 1 , temp = 0 ; while ( tail > head ) { temp = nums [ head ]; nums [ head ] = nums [ tail ]; nums [ tail ] = temp ; tail -- ; head ++ ; } } void rotate ( int * nums , int numsSize , int k ){ if ( numsSize < 2 ) return ; k %= numsSize ; Reverse ( nums , numsSize ); Reverse ( nums , k ); Reverse ( nums + k , numsSize - k ); }","title":"\u9898\u89e3"},{"location":"coding/leetcode/19.html","text":"19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9 \u00b6 \u96be\u5ea6\uff1a \u4e2d\u7b49 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c n \u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002 \u793a\u4f8b\uff1a `` \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868: 1->2->3->4->5, \u548c n = 2. \u5f53\u5220\u9664\u4e86\u5012\u6570\u7b2c\u4e8c\u4e2a\u8282\u70b9\u540e\uff0c\u94fe\u8868\u53d8\u4e3a 1->2->3->5. `` \u8bf4\u660e\uff1a \u7ed9\u5b9a\u7684 n \u4fdd\u8bc1\u662f\u6709\u6548\u7684\u3002 \u8fdb\u9636\uff1a \u4f60\u80fd\u5c1d\u8bd5\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b9e\u73b0\u5417\uff1f Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5148\u627e\u5230\u5012\u6570\u7b2c n \u4e2a\u8282\u70b9\uff0c\u518d\u8fdb\u884c\u5220\u9664 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for singly-linked list. * struct ListNode { * int val; * struct ListNode *next; * }; */ struct ListNode * removeNthFromEnd ( struct ListNode * head , int n ){ struct ListNode * cur = head , * temp = NULL ; int length = 1 , i = 0 ; while ( cur -> next != NULL ) { cur = cur -> next ; length ++ ; } cur = head ; for ( i = 0 ; i < length - n - 1 ; i ++ ) cur = cur -> next ; if ( n == length ) return cur -> next ; if ( cur -> next ) { cur -> next = cur -> next -> next ; return head ; } return NULL ; }","title":"19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9"},{"location":"coding/leetcode/19.html#19-n","text":"\u96be\u5ea6\uff1a \u4e2d\u7b49","title":"19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9"},{"location":"coding/leetcode/19.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c n \u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002 \u793a\u4f8b\uff1a `` \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868: 1->2->3->4->5, \u548c n = 2. \u5f53\u5220\u9664\u4e86\u5012\u6570\u7b2c\u4e8c\u4e2a\u8282\u70b9\u540e\uff0c\u94fe\u8868\u53d8\u4e3a 1->2->3->5. `` \u8bf4\u660e\uff1a \u7ed9\u5b9a\u7684 n \u4fdd\u8bc1\u662f\u6709\u6548\u7684\u3002 \u8fdb\u9636\uff1a \u4f60\u80fd\u5c1d\u8bd5\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b9e\u73b0\u5417\uff1f Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/19.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5148\u627e\u5230\u5012\u6570\u7b2c n \u4e2a\u8282\u70b9\uff0c\u518d\u8fdb\u884c\u5220\u9664 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for singly-linked list. * struct ListNode { * int val; * struct ListNode *next; * }; */ struct ListNode * removeNthFromEnd ( struct ListNode * head , int n ){ struct ListNode * cur = head , * temp = NULL ; int length = 1 , i = 0 ; while ( cur -> next != NULL ) { cur = cur -> next ; length ++ ; } cur = head ; for ( i = 0 ; i < length - n - 1 ; i ++ ) cur = cur -> next ; if ( n == length ) return cur -> next ; if ( cur -> next ) { cur -> next = cur -> next -> next ; return head ; } return NULL ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/198.html","text":"198. \u6253\u5bb6\u52ab\u820d \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u4f60\u662f\u4e00\u4e2a\u4e13\u4e1a\u7684\u5c0f\u5077\uff0c\u8ba1\u5212\u5077\u7a83\u6cbf\u8857\u7684\u623f\u5c4b\u3002\u6bcf\u95f4\u623f\u5185\u90fd\u85cf\u6709\u4e00\u5b9a\u7684\u73b0\u91d1\uff0c\u5f71\u54cd\u4f60\u5077\u7a83\u7684\u552f\u4e00\u5236\u7ea6\u56e0\u7d20\u5c31\u662f\u76f8\u90bb\u7684\u623f\u5c4b\u88c5\u6709\u76f8\u4e92\u8fde\u901a\u7684\u9632\u76d7\u7cfb\u7edf\uff0c\u5982\u679c\u4e24\u95f4\u76f8\u90bb\u7684\u623f\u5c4b\u5728\u540c\u4e00\u665a\u4e0a\u88ab\u5c0f\u5077\u95ef\u5165\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u62a5\u8b66\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u4ee3\u8868\u6bcf\u4e2a\u623f\u5c4b\u5b58\u653e\u91d1\u989d\u7684\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u8ba1\u7b97\u4f60 \u4e0d\u89e6\u52a8\u8b66\u62a5\u88c5\u7f6e\u7684\u60c5\u51b5\u4e0b \uff0c\u4e00\u591c\u4e4b\u5185\u80fd\u591f\u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a[1,2,3,1] \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u5077\u7a83 1 \u53f7\u623f\u5c4b (\u91d1\u989d = 1) \uff0c\u7136\u540e\u5077\u7a83 3 \u53f7\u623f\u5c4b (\u91d1\u989d = 3)\u3002 \u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d = 1 + 3 = 4 \u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a[2,7,9,3,1] \u8f93\u51fa\uff1a12 \u89e3\u91ca\uff1a\u5077\u7a83 1 \u53f7\u623f\u5c4b (\u91d1\u989d = 2), \u5077\u7a83 3 \u53f7\u623f\u5c4b (\u91d1\u989d = 9)\uff0c\u63a5\u7740\u5077\u7a83 5 \u53f7\u623f\u5c4b (\u91d1\u989d = 1)\u3002 \u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d = 2 + 9 + 1 = 12 \u3002 \u63d0\u793a\uff1a 0 <= nums.length <= 100 0 <= nums[i] <= 400 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u52a8\u6001\u89c4\u5212\uff0c\u4ee4 f(i) f(i) \u8868\u793a\u524d i i \u4e2a\u623f\u95f4\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u91d1\u989d\uff0c\u5219\u6709\uff1a f(i + 1) = \\max\\left\\{f(i), a_{i + 1} + f(i - 1)\\right\\} f(i + 1) = \\max\\left\\{f(i), a_{i + 1} + f(i - 1)\\right\\} \u4ee3\u7801\u5982\u4e0b\uff1a #define MAX(x, y) (x > y ? x : y) int rob ( int * nums , int numsSize ){ if ( numsSize < 2 ) return numsSize ? * nums : 0 ; int * dp = ( int * ) memset ( malloc ( sizeof ( int ) * ( numsSize )), 0 , sizeof ( int ) * ( numsSize )), i = 0 ; dp [ 0 ] = * nums ; dp [ 1 ] = MAX ( nums [ 0 ], nums [ 1 ]); for ( i = 2 ; i < numsSize ; i ++ ) dp [ i ] = MAX ( dp [ i -2 ] + nums [ i ], dp [ i -1 ]); return dp [ numsSize -1 ]; }","title":"198. \u6253\u5bb6\u52ab\u820d"},{"location":"coding/leetcode/198.html#198","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"198. \u6253\u5bb6\u52ab\u820d"},{"location":"coding/leetcode/198.html#_1","text":"\u4f60\u662f\u4e00\u4e2a\u4e13\u4e1a\u7684\u5c0f\u5077\uff0c\u8ba1\u5212\u5077\u7a83\u6cbf\u8857\u7684\u623f\u5c4b\u3002\u6bcf\u95f4\u623f\u5185\u90fd\u85cf\u6709\u4e00\u5b9a\u7684\u73b0\u91d1\uff0c\u5f71\u54cd\u4f60\u5077\u7a83\u7684\u552f\u4e00\u5236\u7ea6\u56e0\u7d20\u5c31\u662f\u76f8\u90bb\u7684\u623f\u5c4b\u88c5\u6709\u76f8\u4e92\u8fde\u901a\u7684\u9632\u76d7\u7cfb\u7edf\uff0c\u5982\u679c\u4e24\u95f4\u76f8\u90bb\u7684\u623f\u5c4b\u5728\u540c\u4e00\u665a\u4e0a\u88ab\u5c0f\u5077\u95ef\u5165\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u62a5\u8b66\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u4ee3\u8868\u6bcf\u4e2a\u623f\u5c4b\u5b58\u653e\u91d1\u989d\u7684\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u8ba1\u7b97\u4f60 \u4e0d\u89e6\u52a8\u8b66\u62a5\u88c5\u7f6e\u7684\u60c5\u51b5\u4e0b \uff0c\u4e00\u591c\u4e4b\u5185\u80fd\u591f\u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a[1,2,3,1] \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u5077\u7a83 1 \u53f7\u623f\u5c4b (\u91d1\u989d = 1) \uff0c\u7136\u540e\u5077\u7a83 3 \u53f7\u623f\u5c4b (\u91d1\u989d = 3)\u3002 \u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d = 1 + 3 = 4 \u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a[2,7,9,3,1] \u8f93\u51fa\uff1a12 \u89e3\u91ca\uff1a\u5077\u7a83 1 \u53f7\u623f\u5c4b (\u91d1\u989d = 2), \u5077\u7a83 3 \u53f7\u623f\u5c4b (\u91d1\u989d = 9)\uff0c\u63a5\u7740\u5077\u7a83 5 \u53f7\u623f\u5c4b (\u91d1\u989d = 1)\u3002 \u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d = 2 + 9 + 1 = 12 \u3002 \u63d0\u793a\uff1a 0 <= nums.length <= 100 0 <= nums[i] <= 400 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/198.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u52a8\u6001\u89c4\u5212\uff0c\u4ee4 f(i) f(i) \u8868\u793a\u524d i i \u4e2a\u623f\u95f4\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u91d1\u989d\uff0c\u5219\u6709\uff1a f(i + 1) = \\max\\left\\{f(i), a_{i + 1} + f(i - 1)\\right\\} f(i + 1) = \\max\\left\\{f(i), a_{i + 1} + f(i - 1)\\right\\} \u4ee3\u7801\u5982\u4e0b\uff1a #define MAX(x, y) (x > y ? x : y) int rob ( int * nums , int numsSize ){ if ( numsSize < 2 ) return numsSize ? * nums : 0 ; int * dp = ( int * ) memset ( malloc ( sizeof ( int ) * ( numsSize )), 0 , sizeof ( int ) * ( numsSize )), i = 0 ; dp [ 0 ] = * nums ; dp [ 1 ] = MAX ( nums [ 0 ], nums [ 1 ]); for ( i = 2 ; i < numsSize ; i ++ ) dp [ i ] = MAX ( dp [ i -2 ] + nums [ i ], dp [ i -1 ]); return dp [ numsSize -1 ]; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/204.html","text":"204. \u8ba1\u6570\u8d28\u6570 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7edf\u8ba1\u6240\u6709\u5c0f\u4e8e\u975e\u8d1f\u6574\u6570 n \u7684\u8d28\u6570\u7684\u6570\u91cf\u3002 \u793a\u4f8b\uff1a \u8f93\u5165: 10 \u8f93\u51fa: 4 \u89e3\u91ca: \u5c0f\u4e8e 10 \u7684\u8d28\u6570\u4e00\u5171\u6709 4 \u4e2a, \u5b83\u4eec\u662f 2, 3, 5, 7 \u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u4ece2\u5f00\u59cb\uff0c\u5728\u6570\u5217 2, 3, \\cdots, n 2, 3, \\cdots, n \u4e2d\u5212\u53bb\u6240\u67092\u7684\u500d\u6570\uff0c\u5269\u4e0b\u7684\u7b2c\u4e00\u4e2a\u6ca1\u6709\u88ab\u5212\u53bb\u7684\u6570\u5b573\u5373\u4e3a\u8d28\u6570\uff0c\u518d\u82b1\u65d7\u6240\u67093\u7684\u500d\u6570\uff0c\u5269\u4e0b\u7684\u7b2c\u4e00\u4e2a\u6ca1\u6709\u88ab\u5212\u53bb\u7684\u6570\u5b575\u5373\u4e3a\u8d28\u6570\u3002\u91cd\u590d\u5982\u4e0a\u64cd\u4f5c\uff0c\u76f4\u5230\u68c0\u67e5\u5b8c\u6240\u6709\u5c0f\u4e8e\u7b49\u4e8e \\sqrt n \\sqrt n \u7684\u6574\u6570\uff0c\u5373\u5b8c\u6210\u3002 \u6570\u5b57\u662f\u5426\u5212\u53bb\u7684\u72b6\u6001\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u63a7\u5236\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e00\u4e2a\u7c7b\u578b\u4e2d\u76841\u4f4d\u8868\u793a\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int countPrimes ( int n ) { unsigned char * map = memset ( malloc ( sizeof ( unsigned char ) * (( n + 1 >> 3 ) + 1 )), 0x55 , sizeof ( unsigned char ) * (( n + 1 >> 3 ) + 1 )); int i = 0 , j , ret = 0 , sq = ( int ) sqrt ( n ), increment = 1 , start = 2 ; * map = 0x51 ; for ( i = 3 ; i <= sq ; i ++ ) if ( ! ( map [ i >> 3 ] & ( unsigned char ) 1 << ( i & 7 ))) for ( j = i * 3 ; j <= n ; j += i << 1 ) map [ j >> 3 ] |= ( unsigned char ) 1 << ( j & 7 ); for ( i = 2 ; i < n ; i ++ ) if ( ! ( map [ i >> 3 ] & ( unsigned char ) 1 << ( i & 7 ))) ret ++ ; return ret ; }","title":"204. \u8ba1\u6570\u8d28\u6570"},{"location":"coding/leetcode/204.html#204","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"204. \u8ba1\u6570\u8d28\u6570"},{"location":"coding/leetcode/204.html#_1","text":"\u7edf\u8ba1\u6240\u6709\u5c0f\u4e8e\u975e\u8d1f\u6574\u6570 n \u7684\u8d28\u6570\u7684\u6570\u91cf\u3002 \u793a\u4f8b\uff1a \u8f93\u5165: 10 \u8f93\u51fa: 4 \u89e3\u91ca: \u5c0f\u4e8e 10 \u7684\u8d28\u6570\u4e00\u5171\u6709 4 \u4e2a, \u5b83\u4eec\u662f 2, 3, 5, 7 \u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/204.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u4ece2\u5f00\u59cb\uff0c\u5728\u6570\u5217 2, 3, \\cdots, n 2, 3, \\cdots, n \u4e2d\u5212\u53bb\u6240\u67092\u7684\u500d\u6570\uff0c\u5269\u4e0b\u7684\u7b2c\u4e00\u4e2a\u6ca1\u6709\u88ab\u5212\u53bb\u7684\u6570\u5b573\u5373\u4e3a\u8d28\u6570\uff0c\u518d\u82b1\u65d7\u6240\u67093\u7684\u500d\u6570\uff0c\u5269\u4e0b\u7684\u7b2c\u4e00\u4e2a\u6ca1\u6709\u88ab\u5212\u53bb\u7684\u6570\u5b575\u5373\u4e3a\u8d28\u6570\u3002\u91cd\u590d\u5982\u4e0a\u64cd\u4f5c\uff0c\u76f4\u5230\u68c0\u67e5\u5b8c\u6240\u6709\u5c0f\u4e8e\u7b49\u4e8e \\sqrt n \\sqrt n \u7684\u6574\u6570\uff0c\u5373\u5b8c\u6210\u3002 \u6570\u5b57\u662f\u5426\u5212\u53bb\u7684\u72b6\u6001\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u63a7\u5236\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e00\u4e2a\u7c7b\u578b\u4e2d\u76841\u4f4d\u8868\u793a\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int countPrimes ( int n ) { unsigned char * map = memset ( malloc ( sizeof ( unsigned char ) * (( n + 1 >> 3 ) + 1 )), 0x55 , sizeof ( unsigned char ) * (( n + 1 >> 3 ) + 1 )); int i = 0 , j , ret = 0 , sq = ( int ) sqrt ( n ), increment = 1 , start = 2 ; * map = 0x51 ; for ( i = 3 ; i <= sq ; i ++ ) if ( ! ( map [ i >> 3 ] & ( unsigned char ) 1 << ( i & 7 ))) for ( j = i * 3 ; j <= n ; j += i << 1 ) map [ j >> 3 ] |= ( unsigned char ) 1 << ( j & 7 ); for ( i = 2 ; i < n ; i ++ ) if ( ! ( map [ i >> 3 ] & ( unsigned char ) 1 << ( i & 7 ))) ret ++ ; return ret ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/206.html","text":"206. \u53cd\u8f6c\u94fe\u8868 \u00b6 \u96be\u5ea6\uff1a \u4e2d\u7b49 \u9898\u76ee \u00b6 \u53cd\u8f6c\u4e00\u4e2a\u5355\u94fe\u8868\u3002 \u793a\u4f8b\uff1a \u8f93\u5165: 1->2->3->4->5->NULL \u8f93\u51fa: 5->4->3->2->1->NULL \u8fdb\u9636\uff1a \u4f60\u53ef\u4ee5\u8fed\u4ee3\u6216\u9012\u5f52\u5730\u53cd\u8f6c\u94fe\u8868\u3002\u4f60\u80fd\u5426\u7528\u4e24\u79cd\u65b9\u6cd5\u89e3\u51b3\u8fd9\u9053\u9898\uff1f Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u53ea\u9700\u8981\u5c06\u94fe\u8868\u7ed3\u6784\u4e2d\u7684\u6240\u6709\u6307\u9488\u53cd\u8f6c\uff0c\u5373\u6307\u5411\u524d\u4e00\u8282\u70b9\u7684\u6307\u9488\u73b0\u5728\u6307\u5411\u540e\u4e00\u8282\u70b9\u3002\u5b9a\u4e49\u4e24\u4e2a\u6307\u9488\u6307\u5411\u9700\u8981\u53cd\u8f6c\u90e8\u5206\u7684\u4e24\u4e2a\u8282\u70b9\uff0c\u5c06\u540e\u4e00\u6307\u9488\u7684 next \u57df\u6307\u5411\u524d\u4e00\u6307\u9488\u3002\u6539\u53cd\u8f6c\u64cd\u4f5c\u7834\u574f\u4e86\u540e\u4e00\u6307\u9488\u539f\u6709\u7684 next \u57df\uff0c\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684\u6307\u9488\u7528\u4e8e\u5411\u524d\u79fb\u52a8\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for singly-linked list. * struct ListNode { * int val; * struct ListNode *next; * }; */ struct ListNode * reverseList ( struct ListNode * head ){ if ( ! head || ! ( head -> next )) return head ; struct ListNode * cur1 = head , * cur2 = head -> next , * cur3 = cur2 -> next ; head -> next = NULL ; while ( cur3 ) { cur2 -> next = cur1 ; cur1 = cur2 ; cur2 = cur3 ; cur3 = cur3 -> next ; } cur2 -> next = cur1 ; return cur2 ; }","title":"206. \u53cd\u8f6c\u94fe\u8868"},{"location":"coding/leetcode/206.html#206","text":"\u96be\u5ea6\uff1a \u4e2d\u7b49","title":"206. \u53cd\u8f6c\u94fe\u8868"},{"location":"coding/leetcode/206.html#_1","text":"\u53cd\u8f6c\u4e00\u4e2a\u5355\u94fe\u8868\u3002 \u793a\u4f8b\uff1a \u8f93\u5165: 1->2->3->4->5->NULL \u8f93\u51fa: 5->4->3->2->1->NULL \u8fdb\u9636\uff1a \u4f60\u53ef\u4ee5\u8fed\u4ee3\u6216\u9012\u5f52\u5730\u53cd\u8f6c\u94fe\u8868\u3002\u4f60\u80fd\u5426\u7528\u4e24\u79cd\u65b9\u6cd5\u89e3\u51b3\u8fd9\u9053\u9898\uff1f Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/206.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u53ea\u9700\u8981\u5c06\u94fe\u8868\u7ed3\u6784\u4e2d\u7684\u6240\u6709\u6307\u9488\u53cd\u8f6c\uff0c\u5373\u6307\u5411\u524d\u4e00\u8282\u70b9\u7684\u6307\u9488\u73b0\u5728\u6307\u5411\u540e\u4e00\u8282\u70b9\u3002\u5b9a\u4e49\u4e24\u4e2a\u6307\u9488\u6307\u5411\u9700\u8981\u53cd\u8f6c\u90e8\u5206\u7684\u4e24\u4e2a\u8282\u70b9\uff0c\u5c06\u540e\u4e00\u6307\u9488\u7684 next \u57df\u6307\u5411\u524d\u4e00\u6307\u9488\u3002\u6539\u53cd\u8f6c\u64cd\u4f5c\u7834\u574f\u4e86\u540e\u4e00\u6307\u9488\u539f\u6709\u7684 next \u57df\uff0c\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684\u6307\u9488\u7528\u4e8e\u5411\u524d\u79fb\u52a8\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for singly-linked list. * struct ListNode { * int val; * struct ListNode *next; * }; */ struct ListNode * reverseList ( struct ListNode * head ){ if ( ! head || ! ( head -> next )) return head ; struct ListNode * cur1 = head , * cur2 = head -> next , * cur3 = cur2 -> next ; head -> next = NULL ; while ( cur3 ) { cur2 -> next = cur1 ; cur1 = cur2 ; cur2 = cur3 ; cur3 = cur3 -> next ; } cur2 -> next = cur1 ; return cur2 ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/21.html","text":"21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u5c06\u4e24\u4e2a\u5347\u5e8f\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684 \u5347\u5e8f \u94fe\u8868\u5e76\u8fd4\u56de\u3002\u65b0\u94fe\u8868\u662f\u901a\u8fc7\u62fc\u63a5\u7ed9\u5b9a\u7684\u4e24\u4e2a\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u7ec4\u6210\u7684\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a1->2->4, 1->3->4 \u8f93\u51fa\uff1a1->1->2->3->4->4 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u6bd4\u8f83\u4e24\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9\uff0c\u5c06\u66f4\u5c0f\u7684\u8282\u70b9\u5e76\u5165\u7ed3\u679c\u94fe\u8868\u4e2d\uff0c\u540c\u65f6\u94fe\u8868\u5934\u540e\u79fb\uff0c\u9012\u5f52\u5904\u7406\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for singly-linked list. * struct ListNode { * int val; * struct ListNode *next; * }; */ struct ListNode * mergeTwoLists ( struct ListNode * l1 , struct ListNode * l2 ){ if ( ! l1 ) return l2 ; if ( ! l2 ) return l1 ; if ( l1 -> val < l2 -> val ) { l1 -> next = mergeTwoLists ( l1 -> next , l2 ); return l1 ; } else { l2 -> next = mergeTwoLists ( l1 , l2 -> next ); return l2 ; } }","title":"21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868"},{"location":"coding/leetcode/21.html#21","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868"},{"location":"coding/leetcode/21.html#_1","text":"\u5c06\u4e24\u4e2a\u5347\u5e8f\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684 \u5347\u5e8f \u94fe\u8868\u5e76\u8fd4\u56de\u3002\u65b0\u94fe\u8868\u662f\u901a\u8fc7\u62fc\u63a5\u7ed9\u5b9a\u7684\u4e24\u4e2a\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u7ec4\u6210\u7684\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a1->2->4, 1->3->4 \u8f93\u51fa\uff1a1->1->2->3->4->4 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/21.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u6bd4\u8f83\u4e24\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9\uff0c\u5c06\u66f4\u5c0f\u7684\u8282\u70b9\u5e76\u5165\u7ed3\u679c\u94fe\u8868\u4e2d\uff0c\u540c\u65f6\u94fe\u8868\u5934\u540e\u79fb\uff0c\u9012\u5f52\u5904\u7406\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for singly-linked list. * struct ListNode { * int val; * struct ListNode *next; * }; */ struct ListNode * mergeTwoLists ( struct ListNode * l1 , struct ListNode * l2 ){ if ( ! l1 ) return l2 ; if ( ! l2 ) return l1 ; if ( l1 -> val < l2 -> val ) { l1 -> next = mergeTwoLists ( l1 -> next , l2 ); return l1 ; } else { l2 -> next = mergeTwoLists ( l1 , l2 -> next ); return l2 ; } }","title":"\u9898\u89e3"},{"location":"coding/leetcode/217.html","text":"217. \u5b58\u5728\u91cd\u590d\u5143\u7d20 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u91cd\u590d\u5143\u7d20\u3002 \u5982\u679c\u4efb\u610f\u4e00\u503c\u5728\u6570\u7ec4\u4e2d\u51fa\u73b0\u81f3\u5c11\u4e24\u6b21\uff0c\u51fd\u6570\u8fd4\u56de true \u3002\u5982\u679c\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4e0d\u76f8\u540c\uff0c\u5219\u8fd4\u56de false \u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [1,2,3,1] \u8f93\u51fa: true \u793a\u4f8b 2\uff1a \u8f93\u5165: [1,2,3,4] \u8f93\u51fa: false \u793a\u4f8b 3\uff1a \u8f93\u5165: [1,1,1,3,3,4,3,2,4,2] \u8f93\u51fa: true Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5c06\u6570\u7ec4\u6392\u5e8f\u540e\u68c0\u67e5\u662f\u5426\u6709\u91cd\u590d\u5143\u7d20\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int comp ( const void * a , const void * b ) { return * ( int * ) a - * ( int * ) b ; } bool containsDuplicate ( int * nums , int numsSize ){ if ( numsSize < 2 ) return false ; qsort ( nums , numsSize , sizeof ( int ), comp ); int i = 0 ; for ( i = 1 ; i < numsSize ; i ++ ) if ( nums [ i ] == nums [ i - 1 ]) return true ; return false ; }","title":"217. \u5b58\u5728\u91cd\u590d\u5143\u7d20"},{"location":"coding/leetcode/217.html#217","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"217. \u5b58\u5728\u91cd\u590d\u5143\u7d20"},{"location":"coding/leetcode/217.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u91cd\u590d\u5143\u7d20\u3002 \u5982\u679c\u4efb\u610f\u4e00\u503c\u5728\u6570\u7ec4\u4e2d\u51fa\u73b0\u81f3\u5c11\u4e24\u6b21\uff0c\u51fd\u6570\u8fd4\u56de true \u3002\u5982\u679c\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4e0d\u76f8\u540c\uff0c\u5219\u8fd4\u56de false \u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [1,2,3,1] \u8f93\u51fa: true \u793a\u4f8b 2\uff1a \u8f93\u5165: [1,2,3,4] \u8f93\u51fa: false \u793a\u4f8b 3\uff1a \u8f93\u5165: [1,1,1,3,3,4,3,2,4,2] \u8f93\u51fa: true Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/217.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5c06\u6570\u7ec4\u6392\u5e8f\u540e\u68c0\u67e5\u662f\u5426\u6709\u91cd\u590d\u5143\u7d20\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int comp ( const void * a , const void * b ) { return * ( int * ) a - * ( int * ) b ; } bool containsDuplicate ( int * nums , int numsSize ){ if ( numsSize < 2 ) return false ; qsort ( nums , numsSize , sizeof ( int ), comp ); int i = 0 ; for ( i = 1 ; i < numsSize ; i ++ ) if ( nums [ i ] == nums [ i - 1 ]) return true ; return false ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/234.html","text":"234. \u56de\u6587\u94fe\u8868 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u8bf7\u5224\u65ad\u4e00\u4e2a\u94fe\u8868\u662f\u5426\u4e3a\u56de\u6587\u94fe\u8868\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 1->2 \u8f93\u51fa: false \u793a\u4f8b 2\uff1a \u8f93\u5165: 1->2->2->1 \u8f93\u51fa: true \u8fdb\u9636\uff1a \u4f60\u80fd\u5426\u7528 O(n) O(n) \u65f6\u95f4\u590d\u6742\u5ea6\u548c O(1) O(1) \u7a7a\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u6b64\u9898\uff1f Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u53cd\u5e8f\u6784\u5efa\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\uff0c\u6bd4\u8f83\u4e24\u4e2a\u94fe\u8868\u662f\u5426\u76f8\u540c \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for singly-linked list. * struct ListNode { * int val; * struct ListNode *next; * }; */ struct ListNode * getNode ( int val , struct ListNode * next ) { struct ListNode * ret = ( struct ListNode * ) malloc ( sizeof ( struct ListNode )); ret -> val = val ; ret -> next = next ; return ret ; } bool isPalindrome ( struct ListNode * head ){ int len = 0 ; struct ListNode * reversed = NULL , * cur1 = head , * cur2 = NULL ; while ( cur1 != NULL ) { reversed = getNode ( cur1 -> val , reversed ); cur1 = cur1 -> next ; len ++ ; } cur1 = head ; cur2 = reversed ; for ( int i = 0 ; i < len / 2 ; i ++ ) { if ( cur1 -> val != cur2 -> val ) return false ; cur1 = cur1 -> next ; cur2 = cur2 -> next ; } return true ; }","title":"234. \u56de\u6587\u94fe\u8868"},{"location":"coding/leetcode/234.html#234","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"234. \u56de\u6587\u94fe\u8868"},{"location":"coding/leetcode/234.html#_1","text":"\u8bf7\u5224\u65ad\u4e00\u4e2a\u94fe\u8868\u662f\u5426\u4e3a\u56de\u6587\u94fe\u8868\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 1->2 \u8f93\u51fa: false \u793a\u4f8b 2\uff1a \u8f93\u5165: 1->2->2->1 \u8f93\u51fa: true \u8fdb\u9636\uff1a \u4f60\u80fd\u5426\u7528 O(n) O(n) \u65f6\u95f4\u590d\u6742\u5ea6\u548c O(1) O(1) \u7a7a\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u6b64\u9898\uff1f Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/234.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u53cd\u5e8f\u6784\u5efa\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\uff0c\u6bd4\u8f83\u4e24\u4e2a\u94fe\u8868\u662f\u5426\u76f8\u540c \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for singly-linked list. * struct ListNode { * int val; * struct ListNode *next; * }; */ struct ListNode * getNode ( int val , struct ListNode * next ) { struct ListNode * ret = ( struct ListNode * ) malloc ( sizeof ( struct ListNode )); ret -> val = val ; ret -> next = next ; return ret ; } bool isPalindrome ( struct ListNode * head ){ int len = 0 ; struct ListNode * reversed = NULL , * cur1 = head , * cur2 = NULL ; while ( cur1 != NULL ) { reversed = getNode ( cur1 -> val , reversed ); cur1 = cur1 -> next ; len ++ ; } cur1 = head ; cur2 = reversed ; for ( int i = 0 ; i < len / 2 ; i ++ ) { if ( cur1 -> val != cur2 -> val ) return false ; cur1 = cur1 -> next ; cur2 = cur2 -> next ; } return true ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/237.html","text":"237. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u8bf7\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u4f7f\u5176\u53ef\u4ee5\u5220\u9664\u67d0\u4e2a\u94fe\u8868\u4e2d\u7ed9\u5b9a\u7684\uff08\u975e\u672b\u5c3e\uff09\u8282\u70b9\u3002\u4f20\u5165\u51fd\u6570\u7684\u552f\u4e00\u53c2\u6570\u4e3a \u8981\u88ab\u5220\u9664\u7684\u8282\u70b9 \u3002 \u73b0\u6709\u4e00\u4e2a\u94fe\u8868 -- head = [4,5,1,9]\uff0c\u5b83\u53ef\u4ee5\u8868\u793a\u4e3a: \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1ahead = [4,5,1,9], node = 5 \u8f93\u51fa\uff1a[4,1,9] \u89e3\u91ca\uff1a\u7ed9\u5b9a\u4f60\u94fe\u8868\u4e2d\u503c\u4e3a 5 \u7684\u7b2c\u4e8c\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5728\u8c03\u7528\u4e86\u4f60\u7684\u51fd\u6570\u4e4b\u540e\uff0c\u8be5\u94fe\u8868\u5e94\u53d8\u4e3a 4 -> 1 -> 9. \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1ahead = [4,5,1,9], node = 1 \u8f93\u51fa\uff1a[4,5,9] \u89e3\u91ca\uff1a\u7ed9\u5b9a\u4f60\u94fe\u8868\u4e2d\u503c\u4e3a 1 \u7684\u7b2c\u4e09\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5728\u8c03\u7528\u4e86\u4f60\u7684\u51fd\u6570\u4e4b\u540e\uff0c\u8be5\u94fe\u8868\u5e94\u53d8\u4e3a 4 -> 5 -> 9. \u63d0\u793a\uff1a \u94fe\u8868\u81f3\u5c11\u5305\u542b\u4e24\u4e2a\u8282\u70b9\u3002 \u94fe\u8868\u4e2d\u6240\u6709\u8282\u70b9\u7684\u503c\u90fd\u662f\u552f\u4e00\u7684\u3002 \u7ed9\u5b9a\u7684\u8282\u70b9\u4e3a\u975e\u672b\u5c3e\u8282\u70b9\u5e76\u4e14\u4e00\u5b9a\u662f\u94fe\u8868\u4e2d\u7684\u4e00\u4e2a\u6709\u6548\u8282\u70b9\u3002 \u4e0d\u8981\u4ece\u4f60\u7684\u51fd\u6570\u4e2d\u8fd4\u56de\u4efb\u4f55\u7ed3\u679c\u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5c06\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u503c\u590d\u5236\u5230\u5f53\u524d\u8282\u70b9\uff0c\u7136\u540e\u5220\u53bb\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002\uff08\u5df2\u77e5\u5f53\u524d\u8282\u70b9\u4e00\u5b9a\u4e0d\u662f\u672b\u5c3e\u8282\u70b9\uff09 \u4ee3\u7801\u5982\u4e0b\uff1a void deleteNode ( struct ListNode * node ) { node -> val = node -> next -> val ; node -> next = node -> next -> next ; }","title":"237. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9"},{"location":"coding/leetcode/237.html#237","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"237. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9"},{"location":"coding/leetcode/237.html#_1","text":"\u8bf7\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u4f7f\u5176\u53ef\u4ee5\u5220\u9664\u67d0\u4e2a\u94fe\u8868\u4e2d\u7ed9\u5b9a\u7684\uff08\u975e\u672b\u5c3e\uff09\u8282\u70b9\u3002\u4f20\u5165\u51fd\u6570\u7684\u552f\u4e00\u53c2\u6570\u4e3a \u8981\u88ab\u5220\u9664\u7684\u8282\u70b9 \u3002 \u73b0\u6709\u4e00\u4e2a\u94fe\u8868 -- head = [4,5,1,9]\uff0c\u5b83\u53ef\u4ee5\u8868\u793a\u4e3a: \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1ahead = [4,5,1,9], node = 5 \u8f93\u51fa\uff1a[4,1,9] \u89e3\u91ca\uff1a\u7ed9\u5b9a\u4f60\u94fe\u8868\u4e2d\u503c\u4e3a 5 \u7684\u7b2c\u4e8c\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5728\u8c03\u7528\u4e86\u4f60\u7684\u51fd\u6570\u4e4b\u540e\uff0c\u8be5\u94fe\u8868\u5e94\u53d8\u4e3a 4 -> 1 -> 9. \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1ahead = [4,5,1,9], node = 1 \u8f93\u51fa\uff1a[4,5,9] \u89e3\u91ca\uff1a\u7ed9\u5b9a\u4f60\u94fe\u8868\u4e2d\u503c\u4e3a 1 \u7684\u7b2c\u4e09\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5728\u8c03\u7528\u4e86\u4f60\u7684\u51fd\u6570\u4e4b\u540e\uff0c\u8be5\u94fe\u8868\u5e94\u53d8\u4e3a 4 -> 5 -> 9. \u63d0\u793a\uff1a \u94fe\u8868\u81f3\u5c11\u5305\u542b\u4e24\u4e2a\u8282\u70b9\u3002 \u94fe\u8868\u4e2d\u6240\u6709\u8282\u70b9\u7684\u503c\u90fd\u662f\u552f\u4e00\u7684\u3002 \u7ed9\u5b9a\u7684\u8282\u70b9\u4e3a\u975e\u672b\u5c3e\u8282\u70b9\u5e76\u4e14\u4e00\u5b9a\u662f\u94fe\u8868\u4e2d\u7684\u4e00\u4e2a\u6709\u6548\u8282\u70b9\u3002 \u4e0d\u8981\u4ece\u4f60\u7684\u51fd\u6570\u4e2d\u8fd4\u56de\u4efb\u4f55\u7ed3\u679c\u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/237.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5c06\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u503c\u590d\u5236\u5230\u5f53\u524d\u8282\u70b9\uff0c\u7136\u540e\u5220\u53bb\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002\uff08\u5df2\u77e5\u5f53\u524d\u8282\u70b9\u4e00\u5b9a\u4e0d\u662f\u672b\u5c3e\u8282\u70b9\uff09 \u4ee3\u7801\u5982\u4e0b\uff1a void deleteNode ( struct ListNode * node ) { node -> val = node -> next -> val ; node -> next = node -> next -> next ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/24.html","text":"24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9 \u00b6 \u96be\u5ea6\uff1a \u4e2d\u7b49 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u4e24\u4e24\u4ea4\u6362\u5176\u4e2d\u76f8\u90bb\u7684\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u4ea4\u6362\u540e\u7684\u94fe\u8868\u3002 \u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002 \u793a\u4f8b\uff1a \u7ed9\u5b9a 1->2->3->4, \u4f60\u5e94\u8be5\u8fd4\u56de 2->1->4->3. Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5148\u4ea4\u6362\u524d\u4e24\u4e2a\u8282\u70b9\uff0c\u518d\u9012\u5f52\u5904\u7406\u540e\u9762\u7684\u8282\u70b9\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for singly-linked list. * struct ListNode { * int val; * struct ListNode *next; * }; */ struct ListNode * swapPairs ( struct ListNode * head ){ if ( ! head || ! ( head -> next )) return head ; struct ListNode * temp1 = head -> next , * temp2 = temp1 -> next ; temp1 -> next = head ; head -> next = swapPairs ( temp2 ); return temp1 ; }","title":"24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9"},{"location":"coding/leetcode/24.html#24","text":"\u96be\u5ea6\uff1a \u4e2d\u7b49","title":"24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9"},{"location":"coding/leetcode/24.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u4e24\u4e24\u4ea4\u6362\u5176\u4e2d\u76f8\u90bb\u7684\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u4ea4\u6362\u540e\u7684\u94fe\u8868\u3002 \u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002 \u793a\u4f8b\uff1a \u7ed9\u5b9a 1->2->3->4, \u4f60\u5e94\u8be5\u8fd4\u56de 2->1->4->3. Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/24.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5148\u4ea4\u6362\u524d\u4e24\u4e2a\u8282\u70b9\uff0c\u518d\u9012\u5f52\u5904\u7406\u540e\u9762\u7684\u8282\u70b9\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for singly-linked list. * struct ListNode { * int val; * struct ListNode *next; * }; */ struct ListNode * swapPairs ( struct ListNode * head ){ if ( ! head || ! ( head -> next )) return head ; struct ListNode * temp1 = head -> next , * temp2 = temp1 -> next ; temp1 -> next = head ; head -> next = swapPairs ( temp2 ); return temp1 ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/242.html","text":"242. \u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 s \u548c t \uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad t \u662f\u5426\u662f s \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: s = \"anagram\", t = \"nagaram\" \u8f93\u51fa: true \u793a\u4f8b 2\uff1a \u8f93\u5165: s = \"rat\", t = \"car\" \u8f93\u51fa: false \u8bf4\u660e\uff1a \u4f60\u53ef\u4ee5\u5047\u8bbe\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002 \u8fdb\u9636\uff1a \u5982\u679c\u8f93\u5165\u5b57\u7b26\u4e32\u5305\u542b unicode \u5b57\u7b26\u600e\u4e48\u529e\uff1f\u4f60\u80fd\u5426\u8c03\u6574\u4f60\u7684\u89e3\u6cd5\u6765\u5e94\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff1f Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u7edf\u8ba1\u5e76\u6bd4\u8f83\u4e24\u4e2a\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u5404\u5b57\u7b26\u7684\u51fa\u73b0\u6b21\u6570\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a bool isAnagram ( char * s , char * t ){ int hashMap1 [ 26 ] = { 0 }, hashMap2 [ 26 ] = { 0 }; char * cur = s ; while ( * cur ) { hashMap1 [ * cur - 'a' ] ++ ; cur ++ ; } cur = t ; while ( * cur ) { hashMap2 [ * cur - 'a' ] ++ ; cur ++ ; } int i = 0 ; for ( i = 0 ; i < 26 ; i ++ ) if ( hashMap1 [ i ] != hashMap2 [ i ]) return false ; return true ; }","title":"242. \u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd"},{"location":"coding/leetcode/242.html#242","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"242. \u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd"},{"location":"coding/leetcode/242.html#_1","text":"\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 s \u548c t \uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad t \u662f\u5426\u662f s \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: s = \"anagram\", t = \"nagaram\" \u8f93\u51fa: true \u793a\u4f8b 2\uff1a \u8f93\u5165: s = \"rat\", t = \"car\" \u8f93\u51fa: false \u8bf4\u660e\uff1a \u4f60\u53ef\u4ee5\u5047\u8bbe\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002 \u8fdb\u9636\uff1a \u5982\u679c\u8f93\u5165\u5b57\u7b26\u4e32\u5305\u542b unicode \u5b57\u7b26\u600e\u4e48\u529e\uff1f\u4f60\u80fd\u5426\u8c03\u6574\u4f60\u7684\u89e3\u6cd5\u6765\u5e94\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff1f Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/242.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u7edf\u8ba1\u5e76\u6bd4\u8f83\u4e24\u4e2a\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u5404\u5b57\u7b26\u7684\u51fa\u73b0\u6b21\u6570\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a bool isAnagram ( char * s , char * t ){ int hashMap1 [ 26 ] = { 0 }, hashMap2 [ 26 ] = { 0 }; char * cur = s ; while ( * cur ) { hashMap1 [ * cur - 'a' ] ++ ; cur ++ ; } cur = t ; while ( * cur ) { hashMap2 [ * cur - 'a' ] ++ ; cur ++ ; } int i = 0 ; for ( i = 0 ; i < 26 ; i ++ ) if ( hashMap1 [ i ] != hashMap2 [ i ]) return false ; return true ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/26.html","text":"26. \u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5728 \u539f\u5730 \u5220\u9664\u91cd\u590d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002 \u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728 \u539f\u5730 \u4fee\u6539\u8f93\u5165\u6570\u7ec4 \u5e76\u5728\u4f7f\u7528 O(1) O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002 \u793a\u4f8b 1\uff1a \u7ed9\u5b9a\u6570\u7ec4 nums = [1,1,2], \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 2, \u5e76\u4e14\u539f\u6570\u7ec4 nums \u7684\u524d\u4e24\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a 1, 2\u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u793a\u4f8b 2\uff1a \u7ed9\u5b9a nums = [0,0,1,1,1,2,2,3,3,4], \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 5, \u5e76\u4e14\u539f\u6570\u7ec4 nums \u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a 0, 1, 2, 3, 4\u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u8bf4\u660e\uff1a \u4e3a\u4ec0\u4e48\u8fd4\u56de\u6570\u503c\u662f\u6574\u6570\uff0c\u4f46\u8f93\u51fa\u7684\u7b54\u6848\u662f\u6570\u7ec4\u5462? \u8bf7\u6ce8\u610f\uff0c\u8f93\u5165\u6570\u7ec4\u662f\u4ee5 \u300c\u5f15\u7528\u300d \u65b9\u5f0f\u4f20\u9012\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002 \u4f60\u53ef\u4ee5\u60f3\u8c61\u5185\u90e8\u64cd\u4f5c\u5982\u4e0b: // nums \u662f\u4ee5\u201c\u5f15\u7528\u201d\u65b9\u5f0f\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5bf9\u5b9e\u53c2\u505a\u4efb\u4f55\u62f7\u8d1d int len = removeDuplicates(nums); // \u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002 // \u6839\u636e\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u7684\u957f\u5ea6, \u5b83\u4f1a\u6253\u5370\u51fa\u6570\u7ec4\u4e2d\u8be5\u957f\u5ea6\u8303\u56f4\u5185\u7684\u6240\u6709\u5143\u7d20\u3002 for (int i = 0; i < len; i++) { print(nums[i]); } Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5f53\u6570\u7ec4\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u4e0d\u5b58\u5728\u91cd\u590d\u5143\u7d20\uff1b \u4f7f\u7528\u4e00\u4e2a\u6307\u9488\u5206\u522b\u6307\u5411\u5220\u9664\u91cd\u590d\u503c\u540e\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\uff0c\u53e6\u4e00\u4e2a\u6570\u503c\u8868\u793a\u5220\u53bb\u5143\u7d20\u7684\u4e2a\u6570\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int removeDuplicates ( int * nums , int numsSize ){ if ( numsSize < 2 ) return numsSize ; int steps = 0 , i = 0 ; while ( i < numsSize - steps - 1 ) { if ( steps ) nums [ i + 1 ] = nums [ i + steps + 1 ]; if ( nums [ i ] == nums [ i + steps + 1 ]) steps ++ ; else i ++ ; } return numsSize - steps ; }","title":"26. \u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879"},{"location":"coding/leetcode/26.html#26","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"26. \u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879"},{"location":"coding/leetcode/26.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5728 \u539f\u5730 \u5220\u9664\u91cd\u590d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002 \u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728 \u539f\u5730 \u4fee\u6539\u8f93\u5165\u6570\u7ec4 \u5e76\u5728\u4f7f\u7528 O(1) O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002 \u793a\u4f8b 1\uff1a \u7ed9\u5b9a\u6570\u7ec4 nums = [1,1,2], \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 2, \u5e76\u4e14\u539f\u6570\u7ec4 nums \u7684\u524d\u4e24\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a 1, 2\u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u793a\u4f8b 2\uff1a \u7ed9\u5b9a nums = [0,0,1,1,1,2,2,3,3,4], \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 5, \u5e76\u4e14\u539f\u6570\u7ec4 nums \u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a 0, 1, 2, 3, 4\u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u8bf4\u660e\uff1a \u4e3a\u4ec0\u4e48\u8fd4\u56de\u6570\u503c\u662f\u6574\u6570\uff0c\u4f46\u8f93\u51fa\u7684\u7b54\u6848\u662f\u6570\u7ec4\u5462? \u8bf7\u6ce8\u610f\uff0c\u8f93\u5165\u6570\u7ec4\u662f\u4ee5 \u300c\u5f15\u7528\u300d \u65b9\u5f0f\u4f20\u9012\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002 \u4f60\u53ef\u4ee5\u60f3\u8c61\u5185\u90e8\u64cd\u4f5c\u5982\u4e0b: // nums \u662f\u4ee5\u201c\u5f15\u7528\u201d\u65b9\u5f0f\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5bf9\u5b9e\u53c2\u505a\u4efb\u4f55\u62f7\u8d1d int len = removeDuplicates(nums); // \u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002 // \u6839\u636e\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u7684\u957f\u5ea6, \u5b83\u4f1a\u6253\u5370\u51fa\u6570\u7ec4\u4e2d\u8be5\u957f\u5ea6\u8303\u56f4\u5185\u7684\u6240\u6709\u5143\u7d20\u3002 for (int i = 0; i < len; i++) { print(nums[i]); } Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/26.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5f53\u6570\u7ec4\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u4e0d\u5b58\u5728\u91cd\u590d\u5143\u7d20\uff1b \u4f7f\u7528\u4e00\u4e2a\u6307\u9488\u5206\u522b\u6307\u5411\u5220\u9664\u91cd\u590d\u503c\u540e\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\uff0c\u53e6\u4e00\u4e2a\u6570\u503c\u8868\u793a\u5220\u53bb\u5143\u7d20\u7684\u4e2a\u6570\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int removeDuplicates ( int * nums , int numsSize ){ if ( numsSize < 2 ) return numsSize ; int steps = 0 , i = 0 ; while ( i < numsSize - steps - 1 ) { if ( steps ) nums [ i + 1 ] = nums [ i + steps + 1 ]; if ( nums [ i ] == nums [ i + steps + 1 ]) steps ++ ; else i ++ ; } return numsSize - steps ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/28.html","text":"28. \u5b9e\u73b0 strStr() \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u5b9e\u73b0 strStr() \u51fd\u6570\u3002 \u7ed9\u5b9a\u4e00\u4e2a haystack \u5b57\u7b26\u4e32\u548c\u4e00\u4e2a needle \u5b57\u7b26\u4e32\uff0c\u5728 haystack \u5b57\u7b26\u4e32\u4e2d\u627e\u51fa needle \u5b57\u7b26\u4e32\u51fa\u73b0\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e (\u4ece0\u5f00\u59cb)\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de -1 \u3002 \u793a\u4f8b 1: \u8f93\u5165: haystack = \"hello\", needle = \"ll\" \u8f93\u51fa: 2 \u793a\u4f8b 2: \u8f93\u5165: haystack = \"aaaaa\", needle = \"bba\" \u8f93\u51fa: -1 \u8bf4\u660e: \u5f53 needle \u662f\u7a7a\u5b57\u7b26\u4e32\u65f6\uff0c\u6211\u4eec\u5e94\u5f53\u8fd4\u56de\u4ec0\u4e48\u503c\u5462\uff1f\u8fd9\u662f\u4e00\u4e2a\u5728\u9762\u8bd5\u4e2d\u5f88\u597d\u7684\u95ee\u9898\u3002 \u5bf9\u4e8e\u672c\u9898\u800c\u8a00\uff0c\u5f53 needle \u662f\u7a7a\u5b57\u7b26\u4e32\u65f6\u6211\u4eec\u5e94\u5f53\u8fd4\u56de 0 \u3002\u8fd9\u4e0eC\u8bed\u8a00\u7684 strstr() \u4ee5\u53caJava\u7684 indexOf() \u5b9a\u4e49\u76f8\u7b26\u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u66b4\u529b\u6309\u4f4d\u5339\u914d \u4ee3\u7801\u5982\u4e0b\uff1a int strStr ( char * haystack , char * needle ){ int len1 = strlen ( haystack ), len2 = strlen ( needle ), cur1 = 0 , cur2 = 0 , cur3 = 0 , success = 1 ; if ( ! len2 ) return 0 ; if ( len1 < len2 ) return -1 ; do { success = 1 ; if ( haystack [ cur1 ] == needle [ 0 ]) { cur2 = 0 ; cur3 = 0 ; while ( cur2 < len2 && cur3 + cur1 < len1 && success ) { if ( haystack [ cur1 + cur3 ] != needle [ cur2 ]) success = 0 ; cur3 ++ ; cur2 ++ ; } if ( success ) return cur1 ; } cur1 ++ ; } while ( haystack [ cur1 + len2 - 1 ]); return -1 ; }","title":"28. \u5b9e\u73b0 strStr()"},{"location":"coding/leetcode/28.html#28-strstr","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"28. \u5b9e\u73b0 strStr()"},{"location":"coding/leetcode/28.html#_1","text":"\u5b9e\u73b0 strStr() \u51fd\u6570\u3002 \u7ed9\u5b9a\u4e00\u4e2a haystack \u5b57\u7b26\u4e32\u548c\u4e00\u4e2a needle \u5b57\u7b26\u4e32\uff0c\u5728 haystack \u5b57\u7b26\u4e32\u4e2d\u627e\u51fa needle \u5b57\u7b26\u4e32\u51fa\u73b0\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e (\u4ece0\u5f00\u59cb)\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de -1 \u3002 \u793a\u4f8b 1: \u8f93\u5165: haystack = \"hello\", needle = \"ll\" \u8f93\u51fa: 2 \u793a\u4f8b 2: \u8f93\u5165: haystack = \"aaaaa\", needle = \"bba\" \u8f93\u51fa: -1 \u8bf4\u660e: \u5f53 needle \u662f\u7a7a\u5b57\u7b26\u4e32\u65f6\uff0c\u6211\u4eec\u5e94\u5f53\u8fd4\u56de\u4ec0\u4e48\u503c\u5462\uff1f\u8fd9\u662f\u4e00\u4e2a\u5728\u9762\u8bd5\u4e2d\u5f88\u597d\u7684\u95ee\u9898\u3002 \u5bf9\u4e8e\u672c\u9898\u800c\u8a00\uff0c\u5f53 needle \u662f\u7a7a\u5b57\u7b26\u4e32\u65f6\u6211\u4eec\u5e94\u5f53\u8fd4\u56de 0 \u3002\u8fd9\u4e0eC\u8bed\u8a00\u7684 strstr() \u4ee5\u53caJava\u7684 indexOf() \u5b9a\u4e49\u76f8\u7b26\u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/28.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u66b4\u529b\u6309\u4f4d\u5339\u914d \u4ee3\u7801\u5982\u4e0b\uff1a int strStr ( char * haystack , char * needle ){ int len1 = strlen ( haystack ), len2 = strlen ( needle ), cur1 = 0 , cur2 = 0 , cur3 = 0 , success = 1 ; if ( ! len2 ) return 0 ; if ( len1 < len2 ) return -1 ; do { success = 1 ; if ( haystack [ cur1 ] == needle [ 0 ]) { cur2 = 0 ; cur3 = 0 ; while ( cur2 < len2 && cur3 + cur1 < len1 && success ) { if ( haystack [ cur1 + cur3 ] != needle [ cur2 ]) success = 0 ; cur3 ++ ; cur2 ++ ; } if ( success ) return cur1 ; } cur1 ++ ; } while ( haystack [ cur1 + len2 - 1 ]); return -1 ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/315.html","text":"315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570 \u00b6 \u96be\u5ea6\uff1a \u56f0\u96be \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u6309\u8981\u6c42\u8fd4\u56de\u4e00\u4e2a\u65b0\u6570\u7ec4 counts \u3002\u6570\u7ec4 counts \u6709\u8be5\u6027\u8d28\uff1a counts[i] \u7684\u503c\u662f nums[i] \u53f3\u4fa7\u5c0f\u4e8e nums[i] \u7684\u5143\u7d20\u7684\u6570\u91cf\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1anums = [5,2,6,1] \u8f93\u51fa\uff1a[2,1,1,0] \u89e3\u91ca\uff1a 5 \u7684\u53f3\u4fa7\u6709 2 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (2 \u548c 1) 2 \u7684\u53f3\u4fa7\u4ec5\u6709 1 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (1) 6 \u7684\u53f3\u4fa7\u6709 1 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (1) 1 \u7684\u53f3\u4fa7\u6709 0 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 \u63d0\u793a\uff1a 0 <= nums.length <= 10^5 -10^4 <= nums[i] <= 10^4 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u4ece\u540e\u5f80\u524d\u6784\u9020\u4e00\u4e2a\u4e8c\u53c9\u67e5\u627e\u6811\uff0c\u5728\u4e8c\u53c9\u67e5\u627e\u6811\u4e2d\u7ef4\u62a4\u6811\u4e2d\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u6570\u5b57\u7684\u4e2a\u6570\u3002 \u4e8c\u53c9\u6811\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u57df\u7528\u4e8e\u8ba1\u7b97\u5de6\u5b50\u6811\u7684\u5143\u7d20\u603b\u6570\uff0c\u5373\u5f53\u524d\u6811\u4e2d\u6570\u503c\u5c0f\u4e8e\u8be5\u8282\u70b9\u7684\u5143\u7d20\u603b\u6570\u3002\u5b9e\u73b0\u65b9\u6cd5\u662f\u5728\u5de6\u5b50\u6811\u6dfb\u52a0\u5143\u7d20\u540e\u8be5\u57df\u7684\u503c\u589e\u52a01\u3002 \u5728\u8282\u70b9\u7684\u53f3\u5b50\u6811\u6dfb\u52a0\u5143\u7d20\u65f6\uff0c\u610f\u5473\u7740\u5f53\u524d\u8282\u70b9\u548c\u8282\u70b9\u5de6\u5b50\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9\u90fd\u662f\u7b26\u5408\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u8282\u70b9\u3002\u5728\u9012\u5f52\u8fc7\u7a0b\u4e2d\u9700\u8981\u4f20\u9012\u4e00\u4e2a\u7528\u4f5c\u8ba1\u6570\u5668\u7684\u6307\u9488\u53c2\u6570\uff08\u8ba1\u6570\u7684\u6570\u503c\u5373\u4e3a\u6240\u6c42\u7684\u7ed3\u679c\uff09\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Note: The returned array must be malloced, assume caller calls free(). */ struct TreeNode2 { struct TreeNode2 * left ; struct TreeNode2 * right ; int val ; int subs ; }; struct TreeNode2 * insert ( struct TreeNode2 * dest , int src , int * depth ) { if ( dest == NULL ) { struct TreeNode2 * ret = ( struct TreeNode2 * ) malloc ( sizeof ( struct TreeNode2 )); ret -> left = NULL ; ret -> right = NULL ; ret -> val = src ; ret -> subs = 0 ; return ret ; } if ( src > dest -> val ) { * depth += 1 + dest -> subs ; dest -> right = insert ( dest -> right , src , depth ); } else { dest -> subs ++ ; dest -> left = insert ( dest -> left , src , depth ); } return dest ; } int * countSmaller ( int * nums , int numsSize , int * returnSize ) { * returnSize = numsSize ; int * ret = ( int * ) memset ( malloc ( sizeof ( int ) * numsSize ), 0 , sizeof ( int ) * numsSize ), i = 0 ; if ( numsSize <= 1 ) return ret ; struct TreeNode2 * tempTree = NULL ; for ( i = numsSize - 1 ; i >= 0 ; i -- ) tempTree = insert ( tempTree , nums [ i ], ret + i ); return ret ; }","title":"315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570"},{"location":"coding/leetcode/315.html#315","text":"\u96be\u5ea6\uff1a \u56f0\u96be","title":"315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570"},{"location":"coding/leetcode/315.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u6309\u8981\u6c42\u8fd4\u56de\u4e00\u4e2a\u65b0\u6570\u7ec4 counts \u3002\u6570\u7ec4 counts \u6709\u8be5\u6027\u8d28\uff1a counts[i] \u7684\u503c\u662f nums[i] \u53f3\u4fa7\u5c0f\u4e8e nums[i] \u7684\u5143\u7d20\u7684\u6570\u91cf\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1anums = [5,2,6,1] \u8f93\u51fa\uff1a[2,1,1,0] \u89e3\u91ca\uff1a 5 \u7684\u53f3\u4fa7\u6709 2 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (2 \u548c 1) 2 \u7684\u53f3\u4fa7\u4ec5\u6709 1 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (1) 6 \u7684\u53f3\u4fa7\u6709 1 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (1) 1 \u7684\u53f3\u4fa7\u6709 0 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 \u63d0\u793a\uff1a 0 <= nums.length <= 10^5 -10^4 <= nums[i] <= 10^4 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/315.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u4ece\u540e\u5f80\u524d\u6784\u9020\u4e00\u4e2a\u4e8c\u53c9\u67e5\u627e\u6811\uff0c\u5728\u4e8c\u53c9\u67e5\u627e\u6811\u4e2d\u7ef4\u62a4\u6811\u4e2d\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u6570\u5b57\u7684\u4e2a\u6570\u3002 \u4e8c\u53c9\u6811\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u57df\u7528\u4e8e\u8ba1\u7b97\u5de6\u5b50\u6811\u7684\u5143\u7d20\u603b\u6570\uff0c\u5373\u5f53\u524d\u6811\u4e2d\u6570\u503c\u5c0f\u4e8e\u8be5\u8282\u70b9\u7684\u5143\u7d20\u603b\u6570\u3002\u5b9e\u73b0\u65b9\u6cd5\u662f\u5728\u5de6\u5b50\u6811\u6dfb\u52a0\u5143\u7d20\u540e\u8be5\u57df\u7684\u503c\u589e\u52a01\u3002 \u5728\u8282\u70b9\u7684\u53f3\u5b50\u6811\u6dfb\u52a0\u5143\u7d20\u65f6\uff0c\u610f\u5473\u7740\u5f53\u524d\u8282\u70b9\u548c\u8282\u70b9\u5de6\u5b50\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9\u90fd\u662f\u7b26\u5408\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u8282\u70b9\u3002\u5728\u9012\u5f52\u8fc7\u7a0b\u4e2d\u9700\u8981\u4f20\u9012\u4e00\u4e2a\u7528\u4f5c\u8ba1\u6570\u5668\u7684\u6307\u9488\u53c2\u6570\uff08\u8ba1\u6570\u7684\u6570\u503c\u5373\u4e3a\u6240\u6c42\u7684\u7ed3\u679c\uff09\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Note: The returned array must be malloced, assume caller calls free(). */ struct TreeNode2 { struct TreeNode2 * left ; struct TreeNode2 * right ; int val ; int subs ; }; struct TreeNode2 * insert ( struct TreeNode2 * dest , int src , int * depth ) { if ( dest == NULL ) { struct TreeNode2 * ret = ( struct TreeNode2 * ) malloc ( sizeof ( struct TreeNode2 )); ret -> left = NULL ; ret -> right = NULL ; ret -> val = src ; ret -> subs = 0 ; return ret ; } if ( src > dest -> val ) { * depth += 1 + dest -> subs ; dest -> right = insert ( dest -> right , src , depth ); } else { dest -> subs ++ ; dest -> left = insert ( dest -> left , src , depth ); } return dest ; } int * countSmaller ( int * nums , int numsSize , int * returnSize ) { * returnSize = numsSize ; int * ret = ( int * ) memset ( malloc ( sizeof ( int ) * numsSize ), 0 , sizeof ( int ) * numsSize ), i = 0 ; if ( numsSize <= 1 ) return ret ; struct TreeNode2 * tempTree = NULL ; for ( i = numsSize - 1 ; i >= 0 ; i -- ) tempTree = insert ( tempTree , nums [ i ], ret + i ); return ret ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/344.html","text":"344. \u53cd\u8f6c\u5b57\u7b26\u4e32 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u5176\u4f5c\u7528\u662f\u5c06\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u53cd\u8f6c\u8fc7\u6765\u3002\u8f93\u5165\u5b57\u7b26\u4e32\u4ee5\u5b57\u7b26\u6570\u7ec4 char[] \u7684\u5f62\u5f0f\u7ed9\u51fa\u3002 \u4e0d\u8981\u7ed9\u53e6\u5916\u7684\u6570\u7ec4\u5206\u914d\u989d\u5916\u7684\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u539f\u5730\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u3001\u4f7f\u7528 O(1) \u7684\u989d\u5916\u7a7a\u95f4\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5b57\u7b26\u90fd\u662f ASCII \u7801\u8868\u4e2d\u7684\u53ef\u6253\u5370\u5b57\u7b26\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a[\"h\",\"e\",\"l\",\"l\",\"o\"] \u8f93\u51fa\uff1a[\"o\",\"l\",\"l\",\"e\",\"h\"] \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a[\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"] \u8f93\u51fa\uff1a[\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"] Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5206\u522b\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\u6307\u5411\u5b57\u7b26\u4e32\u7684\u5f00\u5934\u4e0e\u7ed3\u5c3e\uff0c\u4ea4\u6362\u4e24\u8005\u7684\u503c\u540e\u6536\u7f29\u6307\u9488\u3002\uff08\u5de6\u6307\u9488\u53f3\u79fb\uff0c\u53f3\u6307\u9488\u5de6\u79fb\uff09 \u4ee3\u7801\u5982\u4e0b\uff1a void reverseString ( char * s , int sSize ) { if ( sSize <= 1 ) return ; char temp = 0 ; temp = * s ; * s = s [ sSize - 1 ]; s [ sSize - 1 ] = temp ; reverseString ( s + 1 , sSize - 2 ); }","title":"344. \u53cd\u8f6c\u5b57\u7b26\u4e32"},{"location":"coding/leetcode/344.html#344","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"344. \u53cd\u8f6c\u5b57\u7b26\u4e32"},{"location":"coding/leetcode/344.html#_1","text":"\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u5176\u4f5c\u7528\u662f\u5c06\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u53cd\u8f6c\u8fc7\u6765\u3002\u8f93\u5165\u5b57\u7b26\u4e32\u4ee5\u5b57\u7b26\u6570\u7ec4 char[] \u7684\u5f62\u5f0f\u7ed9\u51fa\u3002 \u4e0d\u8981\u7ed9\u53e6\u5916\u7684\u6570\u7ec4\u5206\u914d\u989d\u5916\u7684\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u539f\u5730\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u3001\u4f7f\u7528 O(1) \u7684\u989d\u5916\u7a7a\u95f4\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5b57\u7b26\u90fd\u662f ASCII \u7801\u8868\u4e2d\u7684\u53ef\u6253\u5370\u5b57\u7b26\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a[\"h\",\"e\",\"l\",\"l\",\"o\"] \u8f93\u51fa\uff1a[\"o\",\"l\",\"l\",\"e\",\"h\"] \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a[\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"] \u8f93\u51fa\uff1a[\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"] Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/344.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5206\u522b\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\u6307\u5411\u5b57\u7b26\u4e32\u7684\u5f00\u5934\u4e0e\u7ed3\u5c3e\uff0c\u4ea4\u6362\u4e24\u8005\u7684\u503c\u540e\u6536\u7f29\u6307\u9488\u3002\uff08\u5de6\u6307\u9488\u53f3\u79fb\uff0c\u53f3\u6307\u9488\u5de6\u79fb\uff09 \u4ee3\u7801\u5982\u4e0b\uff1a void reverseString ( char * s , int sSize ) { if ( sSize <= 1 ) return ; char temp = 0 ; temp = * s ; * s = s [ sSize - 1 ]; s [ sSize - 1 ] = temp ; reverseString ( s + 1 , sSize - 2 ); }","title":"\u9898\u89e3"},{"location":"coding/leetcode/350.html","text":"350. \u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6 II \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e24\u4e2a\u6570\u7ec4\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97\u5b83\u4eec\u7684\u4ea4\u96c6\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1anums1 = [1,2,2,1], nums2 = [2,2] \u8f93\u51fa\uff1a[2,2] \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1anums1 = [4,9,5], nums2 = [9,4,9,8,4] \u8f93\u51fa\uff1a[4,9] \u8bf4\u660e\uff1a \u8f93\u51fa\u7ed3\u679c\u4e2d\u6bcf\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5e94\u4e0e\u5143\u7d20\u5728\u4e24\u4e2a\u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u7684\u6700\u5c0f\u503c\u4e00\u81f4\u3002 \u6211\u4eec\u53ef\u4ee5\u4e0d\u8003\u8651\u8f93\u51fa\u7ed3\u679c\u7684\u987a\u5e8f\u3002 \u8fdb\u9636\uff1a \u5982\u679c\u7ed9\u5b9a\u7684\u6570\u7ec4\u5df2\u7ecf\u6392\u597d\u5e8f\u5462\uff1f\u4f60\u5c06\u5982\u4f55\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\uff1f \u5982\u679c nums1 \u7684\u5927\u5c0f\u6bd4 nums2 \u5c0f\u5f88\u591a\uff0c\u54ea\u79cd\u65b9\u6cd5\u66f4\u4f18\uff1f \u5982\u679c nums2 \u7684\u5143\u7d20\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a\uff0c\u5185\u5b58\u662f\u6709\u9650\u7684\uff0c\u5e76\u4e14\u4f60\u4e0d\u80fd\u4e00\u6b21\u52a0\u8f7d\u6240\u6709\u7684\u5143\u7d20\u5230\u5185\u5b58\u4e2d\uff0c\u4f60\u8be5\u600e\u4e48\u529e\uff1f Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u4f7f\u7528\u54c8\u5e0c\u8868\u5b58\u50a8\u6570\u7ec4\u4e2d\u5404\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6ce8\u610f\u6570\u503c\u5728\u4ea4\u96c6\u4e2d\u53ef\u4ee5\u91cd\u590d\u51fa\u73b0\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a #define MIN(x, y) (x > y ? y : x) struct cell { int value ; int times1 ; int times2 ; }; int * intersect ( int * nums1 , int nums1Size , int * nums2 , int nums2Size , int * returnSize ){ int i = 0 , cur , mapSize = nums1Size + nums2Size , * ret = ( int * ) malloc ( sizeof ( int ) * ( nums1Size + nums2Size )); * returnSize = 0 ; struct cell * hashMap = ( struct cell * ) memset ( malloc ( sizeof ( struct cell ) * mapSize ), 0 , sizeof ( struct cell ) * mapSize ); for ( i = 0 ; i < nums1Size ; i ++ ) { cur = ( nums1 [ i ] > 0 ? 1 : -1 ) * ( nums1 [ i ] % mapSize ); while (( hashMap [ cur ]. times1 != 0 || hashMap [ cur ]. times2 ) && hashMap [ cur ]. value != nums1 [ i ]) { cur ++ ; cur = cur == mapSize ? 0 : cur ; } if ( hashMap [ cur ]. times1 == 0 && hashMap [ cur ]. times2 == 0 ) hashMap [ cur ]. value = nums1 [ i ]; hashMap [ cur ]. times1 ++ ; } for ( i = 0 ; i < nums2Size ; i ++ ) { cur = ( nums2 [ i ] > 0 ? 1 : -1 ) * ( nums2 [ i ] % mapSize ); while (( hashMap [ cur ]. times1 != 0 || hashMap [ cur ]. times2 ) && hashMap [ cur ]. value != nums2 [ i ]) { cur ++ ; cur = cur == mapSize ? 0 : cur ; } if ( hashMap [ cur ]. times1 == 0 && hashMap [ cur ]. times2 == 0 ) hashMap [ cur ]. value = nums2 [ i ]; hashMap [ cur ]. times2 ++ ; } for ( i = 0 ; i < mapSize ; i ++ ) while (( hashMap [ i ]. times2 -- ) && ( hashMap [ i ]. times1 -- )) ret [( * returnSize ) ++ ] = hashMap [ i ]. value ; return ret ; }","title":"350. \u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6 II"},{"location":"coding/leetcode/350.html#350-ii","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"350. \u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6 II"},{"location":"coding/leetcode/350.html#_1","text":"\u7ed9\u5b9a\u4e24\u4e2a\u6570\u7ec4\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97\u5b83\u4eec\u7684\u4ea4\u96c6\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1anums1 = [1,2,2,1], nums2 = [2,2] \u8f93\u51fa\uff1a[2,2] \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1anums1 = [4,9,5], nums2 = [9,4,9,8,4] \u8f93\u51fa\uff1a[4,9] \u8bf4\u660e\uff1a \u8f93\u51fa\u7ed3\u679c\u4e2d\u6bcf\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5e94\u4e0e\u5143\u7d20\u5728\u4e24\u4e2a\u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u7684\u6700\u5c0f\u503c\u4e00\u81f4\u3002 \u6211\u4eec\u53ef\u4ee5\u4e0d\u8003\u8651\u8f93\u51fa\u7ed3\u679c\u7684\u987a\u5e8f\u3002 \u8fdb\u9636\uff1a \u5982\u679c\u7ed9\u5b9a\u7684\u6570\u7ec4\u5df2\u7ecf\u6392\u597d\u5e8f\u5462\uff1f\u4f60\u5c06\u5982\u4f55\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\uff1f \u5982\u679c nums1 \u7684\u5927\u5c0f\u6bd4 nums2 \u5c0f\u5f88\u591a\uff0c\u54ea\u79cd\u65b9\u6cd5\u66f4\u4f18\uff1f \u5982\u679c nums2 \u7684\u5143\u7d20\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a\uff0c\u5185\u5b58\u662f\u6709\u9650\u7684\uff0c\u5e76\u4e14\u4f60\u4e0d\u80fd\u4e00\u6b21\u52a0\u8f7d\u6240\u6709\u7684\u5143\u7d20\u5230\u5185\u5b58\u4e2d\uff0c\u4f60\u8be5\u600e\u4e48\u529e\uff1f Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/350.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u4f7f\u7528\u54c8\u5e0c\u8868\u5b58\u50a8\u6570\u7ec4\u4e2d\u5404\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6ce8\u610f\u6570\u503c\u5728\u4ea4\u96c6\u4e2d\u53ef\u4ee5\u91cd\u590d\u51fa\u73b0\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a #define MIN(x, y) (x > y ? y : x) struct cell { int value ; int times1 ; int times2 ; }; int * intersect ( int * nums1 , int nums1Size , int * nums2 , int nums2Size , int * returnSize ){ int i = 0 , cur , mapSize = nums1Size + nums2Size , * ret = ( int * ) malloc ( sizeof ( int ) * ( nums1Size + nums2Size )); * returnSize = 0 ; struct cell * hashMap = ( struct cell * ) memset ( malloc ( sizeof ( struct cell ) * mapSize ), 0 , sizeof ( struct cell ) * mapSize ); for ( i = 0 ; i < nums1Size ; i ++ ) { cur = ( nums1 [ i ] > 0 ? 1 : -1 ) * ( nums1 [ i ] % mapSize ); while (( hashMap [ cur ]. times1 != 0 || hashMap [ cur ]. times2 ) && hashMap [ cur ]. value != nums1 [ i ]) { cur ++ ; cur = cur == mapSize ? 0 : cur ; } if ( hashMap [ cur ]. times1 == 0 && hashMap [ cur ]. times2 == 0 ) hashMap [ cur ]. value = nums1 [ i ]; hashMap [ cur ]. times1 ++ ; } for ( i = 0 ; i < nums2Size ; i ++ ) { cur = ( nums2 [ i ] > 0 ? 1 : -1 ) * ( nums2 [ i ] % mapSize ); while (( hashMap [ cur ]. times1 != 0 || hashMap [ cur ]. times2 ) && hashMap [ cur ]. value != nums2 [ i ]) { cur ++ ; cur = cur == mapSize ? 0 : cur ; } if ( hashMap [ cur ]. times1 == 0 && hashMap [ cur ]. times2 == 0 ) hashMap [ cur ]. value = nums2 [ i ]; hashMap [ cur ]. times2 ++ ; } for ( i = 0 ; i < mapSize ; i ++ ) while (( hashMap [ i ]. times2 -- ) && ( hashMap [ i ]. times1 -- )) ret [( * returnSize ) ++ ] = hashMap [ i ]. value ; return ret ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/36.html","text":"36. \u6709\u6548\u7684\u6570\u72ec \u00b6 \u96be\u5ea6\uff1a \u4e2d\u7b49 \u9898\u76ee \u00b6 \u5224\u65ad\u4e00\u4e2a 9x9 \u7684\u6570\u72ec\u662f\u5426\u6709\u6548\u3002\u53ea\u9700\u8981\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u884c\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u5217\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u4e2a\u4ee5\u7c97\u5b9e\u7ebf\u5206\u9694\u7684 3x3 \u5bab\u5185\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u4e0a\u56fe\u662f\u4e00\u4e2a\u90e8\u5206\u586b\u5145\u7684\u6709\u6548\u7684\u6570\u72ec\u3002 \u6570\u72ec\u90e8\u5206\u7a7a\u683c\u5185\u5df2\u586b\u5165\u4e86\u6570\u5b57\uff0c\u7a7a\u767d\u683c\u7528 '.' \u8868\u793a\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [ [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"], [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"], [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"], [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"], [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"], [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"], [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"], [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"], [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"] ] \u8f93\u51fa: true \u793a\u4f8b 2\uff1a \u8f93\u5165: [ [\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"], [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"], [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"], [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"], [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"], [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"], [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"], [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"], [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"] ] \u8f93\u51fa: false \u89e3\u91ca: \u9664\u4e86\u7b2c\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\u4ece 5 \u6539\u4e3a 8 \u4ee5\u5916\uff0c\u7a7a\u683c\u5185\u5176\u4ed6\u6570\u5b57\u5747\u4e0e \u793a\u4f8b1 \u76f8\u540c\u3002 \u4f46\u7531\u4e8e\u4f4d\u4e8e\u5de6\u4e0a\u89d2\u7684 3x3 \u5bab\u5185\u6709\u4e24\u4e2a 8 \u5b58\u5728, \u56e0\u6b64\u8fd9\u4e2a\u6570\u72ec\u662f\u65e0\u6548\u7684\u3002 \u8bf4\u660e\uff1a \u4e00\u4e2a\u6709\u6548\u7684\u6570\u72ec\uff08\u90e8\u5206\u5df2\u88ab\u586b\u5145\uff09\u4e0d\u4e00\u5b9a\u662f\u53ef\u89e3\u7684\u3002 \u53ea\u9700\u8981\u6839\u636e\u4ee5\u4e0a\u89c4\u5219\uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002 \u7ed9\u5b9a\u6570\u72ec\u5e8f\u5217\u53ea\u5305\u542b\u6570\u5b57 1-9 \u548c\u5b57\u7b26 '.' \u3002 \u7ed9\u5b9a\u6570\u72ec\u6c38\u8fdc\u662f 9x9 \u5f62\u5f0f\u7684\u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u6839\u636e\u5b9a\u4e49\u76f4\u63a5\u5224\u65ad\u8f93\u5165\u7684\u6570\u7ec4\u662f\u5426\u6ee1\u8db3\u6570\u72ec\u76843\u4e2a\u6761\u4ef6\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a bool isValidSudoku ( char ** board , int boardSize , int * boardColSize ){ int i = 0 , j = 0 , positions1 [ boardSize ], positions2 [ boardSize ], k = 0 ; for ( i = 0 ; i < boardSize ; i ++ ) { memset ( positions1 , 0 , sizeof ( int ) * boardSize ); memset ( positions2 , 0 , sizeof ( int ) * boardSize ); for ( j = 0 ; j < boardSize ; j ++ ) { if ( board [ i ][ j ] > '0' && positions1 [ board [ i ][ j ] - '1' ]) return false ; if ( board [ j ][ i ] > '0' && positions2 [ board [ j ][ i ] - '1' ]) return false ; if ( board [ i ][ j ] > '0' ) positions1 [ board [ i ][ j ] - '1' ] = 1 ; if ( board [ j ][ i ] > '0' ) positions2 [ board [ j ][ i ] - '1' ] = 1 ; } } for ( i = 0 ; i < 3 ; i ++ ) { for ( j = 0 ; j < 3 ; j ++ ) { memset ( positions1 , 0 , sizeof ( int ) * boardSize ); for ( k = 0 ; k < boardSize ; k ++ ) { if ( board [ i * 3 + k % 3 ][ j * 3 + k / 3 ] > '0' && positions1 [ board [ i * 3 + k % 3 ][ j * 3 + k / 3 ] - '1' ]) return false ; if ( board [ i * 3 + k % 3 ][ j * 3 + k / 3 ] > '0' ) positions1 [ board [ i * 3 + k % 3 ][ j * 3 + k / 3 ] - '1' ] = 1 ; } } } return true ; }","title":"36. \u6709\u6548\u7684\u6570\u72ec"},{"location":"coding/leetcode/36.html#36","text":"\u96be\u5ea6\uff1a \u4e2d\u7b49","title":"36. \u6709\u6548\u7684\u6570\u72ec"},{"location":"coding/leetcode/36.html#_1","text":"\u5224\u65ad\u4e00\u4e2a 9x9 \u7684\u6570\u72ec\u662f\u5426\u6709\u6548\u3002\u53ea\u9700\u8981\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u884c\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u5217\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u4e2a\u4ee5\u7c97\u5b9e\u7ebf\u5206\u9694\u7684 3x3 \u5bab\u5185\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u4e0a\u56fe\u662f\u4e00\u4e2a\u90e8\u5206\u586b\u5145\u7684\u6709\u6548\u7684\u6570\u72ec\u3002 \u6570\u72ec\u90e8\u5206\u7a7a\u683c\u5185\u5df2\u586b\u5165\u4e86\u6570\u5b57\uff0c\u7a7a\u767d\u683c\u7528 '.' \u8868\u793a\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [ [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"], [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"], [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"], [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"], [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"], [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"], [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"], [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"], [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"] ] \u8f93\u51fa: true \u793a\u4f8b 2\uff1a \u8f93\u5165: [ [\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"], [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"], [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"], [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"], [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"], [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"], [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"], [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"], [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"] ] \u8f93\u51fa: false \u89e3\u91ca: \u9664\u4e86\u7b2c\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\u4ece 5 \u6539\u4e3a 8 \u4ee5\u5916\uff0c\u7a7a\u683c\u5185\u5176\u4ed6\u6570\u5b57\u5747\u4e0e \u793a\u4f8b1 \u76f8\u540c\u3002 \u4f46\u7531\u4e8e\u4f4d\u4e8e\u5de6\u4e0a\u89d2\u7684 3x3 \u5bab\u5185\u6709\u4e24\u4e2a 8 \u5b58\u5728, \u56e0\u6b64\u8fd9\u4e2a\u6570\u72ec\u662f\u65e0\u6548\u7684\u3002 \u8bf4\u660e\uff1a \u4e00\u4e2a\u6709\u6548\u7684\u6570\u72ec\uff08\u90e8\u5206\u5df2\u88ab\u586b\u5145\uff09\u4e0d\u4e00\u5b9a\u662f\u53ef\u89e3\u7684\u3002 \u53ea\u9700\u8981\u6839\u636e\u4ee5\u4e0a\u89c4\u5219\uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002 \u7ed9\u5b9a\u6570\u72ec\u5e8f\u5217\u53ea\u5305\u542b\u6570\u5b57 1-9 \u548c\u5b57\u7b26 '.' \u3002 \u7ed9\u5b9a\u6570\u72ec\u6c38\u8fdc\u662f 9x9 \u5f62\u5f0f\u7684\u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/36.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u6839\u636e\u5b9a\u4e49\u76f4\u63a5\u5224\u65ad\u8f93\u5165\u7684\u6570\u7ec4\u662f\u5426\u6ee1\u8db3\u6570\u72ec\u76843\u4e2a\u6761\u4ef6\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a bool isValidSudoku ( char ** board , int boardSize , int * boardColSize ){ int i = 0 , j = 0 , positions1 [ boardSize ], positions2 [ boardSize ], k = 0 ; for ( i = 0 ; i < boardSize ; i ++ ) { memset ( positions1 , 0 , sizeof ( int ) * boardSize ); memset ( positions2 , 0 , sizeof ( int ) * boardSize ); for ( j = 0 ; j < boardSize ; j ++ ) { if ( board [ i ][ j ] > '0' && positions1 [ board [ i ][ j ] - '1' ]) return false ; if ( board [ j ][ i ] > '0' && positions2 [ board [ j ][ i ] - '1' ]) return false ; if ( board [ i ][ j ] > '0' ) positions1 [ board [ i ][ j ] - '1' ] = 1 ; if ( board [ j ][ i ] > '0' ) positions2 [ board [ j ][ i ] - '1' ] = 1 ; } } for ( i = 0 ; i < 3 ; i ++ ) { for ( j = 0 ; j < 3 ; j ++ ) { memset ( positions1 , 0 , sizeof ( int ) * boardSize ); for ( k = 0 ; k < boardSize ; k ++ ) { if ( board [ i * 3 + k % 3 ][ j * 3 + k / 3 ] > '0' && positions1 [ board [ i * 3 + k % 3 ][ j * 3 + k / 3 ] - '1' ]) return false ; if ( board [ i * 3 + k % 3 ][ j * 3 + k / 3 ] > '0' ) positions1 [ board [ i * 3 + k % 3 ][ j * 3 + k / 3 ] - '1' ] = 1 ; } } } return true ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/38.html","text":"38. \u5916\u89c2\u6570\u5217 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 n n \uff08 1 \\leq n \\leq 30 1 \\leq n \\leq 30 \uff09\uff0c\u8f93\u51fa\u5916\u89c2\u6570\u5217\u7684\u7b2c n n \u9879\u3002 \u6ce8\u610f\uff1a\u6574\u6570\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e00\u9879\u5c06\u8868\u793a\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u300c\u5916\u89c2\u6570\u5217\u300d\u662f\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u4ece\u6570\u5b57 1 \u5f00\u59cb\uff0c\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e00\u9879\u90fd\u662f\u5bf9\u524d\u4e00\u9879\u7684\u63cf\u8ff0\u3002\u524d\u4e94\u9879\u5982\u4e0b\uff1a 1. 1 2. 11 3. 21 4. 1211 5. 111221 \u7b2c\u4e00\u9879\u662f\u6570\u5b57 1 \u63cf\u8ff0\u524d\u4e00\u9879\uff0c\u8fd9\u4e2a\u6570\u662f 1 \u5373 \u201c\u4e00\u4e2a 1 \u201d\uff0c\u8bb0\u4f5c 11 \u63cf\u8ff0\u524d\u4e00\u9879\uff0c\u8fd9\u4e2a\u6570\u662f 11 \u5373 \u201c\u4e24\u4e2a 1 \u201d \uff0c\u8bb0\u4f5c 21 \u63cf\u8ff0\u524d\u4e00\u9879\uff0c\u8fd9\u4e2a\u6570\u662f 21 \u5373 \u201c\u4e00\u4e2a 2 \u4e00\u4e2a 1 \u201d \uff0c\u8bb0\u4f5c 1211 \u63cf\u8ff0\u524d\u4e00\u9879\uff0c\u8fd9\u4e2a\u6570\u662f 1211 \u5373 \u201c\u4e00\u4e2a 1 \u4e00\u4e2a 2 \u4e24\u4e2a 1 \u201d \uff0c\u8bb0\u4f5c 111221 \u793a\u4f8b 1: \u8f93\u5165: 1 \u8f93\u51fa: \"1\" \u89e3\u91ca\uff1a\u8fd9\u662f\u4e00\u4e2a\u57fa\u672c\u6837\u4f8b\u3002 \u793a\u4f8b 2: \u8f93\u5165: 4 \u8f93\u51fa: \"1211\" \u89e3\u91ca\uff1a\u5f53 n = 3 \u65f6\uff0c\u5e8f\u5217\u662f \"21\"\uff0c\u5176\u4e2d\u6211\u4eec\u6709 \"2\" \u548c \"1\" \u4e24\u7ec4\uff0c\"2\" \u53ef\u4ee5\u8bfb\u4f5c \"12\"\uff0c\u4e5f\u5c31\u662f\u51fa\u73b0\u9891\u6b21 = 1 \u800c \u503c = 2\uff1b\u7c7b\u4f3c \"1\" \u53ef\u4ee5\u8bfb\u4f5c \"11\"\u3002\u6240\u4ee5\u7b54\u6848\u662f \"12\" \u548c \"11\" \u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u4e5f\u5c31\u662f \"1211\"\u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u6839\u636e\u5b9a\u4e49\u8fdb\u884c\u8ba1\u7b97\u5373\u53ef\uff0c\u6ce8\u610f\u6b21\u6570\u90e8\u5206\u53ef\u80fd\u8d85\u8fc710\uff0c\u800c\u6570\u5b57\u90e8\u5206\u4e0d\u4f1a\u8d85\u8fc710\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a char * toStr ( int n ) { char * ret = ( char * ) memset ( malloc ( sizeof ( char ) * 10 ), 0 , sizeof ( char ) * 10 ), temp ; int i = 0 , head = 0 , tail ; while ( n ) { ret [ i ] = n % 10 + '0' ; n /= 10 ; i ++ ; } tail = i - 1 ; while ( head < tail ) { temp = ret [ head ]; ret [ head ] = ret [ tail ]; ret [ tail ] = temp ; } return ret ; } char * countAndSay ( int n ){ if ( n == 1 ) { char * ret = ( char * ) malloc ( sizeof ( char ) * 2 ); ret [ 0 ] = '1' ; ret [ 1 ] = 0 ; return ret ; } char * rec = countAndSay ( n - 1 ), * cur = rec , flag = * cur , * temp = NULL , * ret = ( char * ) memset ( malloc ( sizeof ( char ) * ( strlen ( rec ) * 2 + 1 )), 0 , sizeof ( char ) * ( strlen ( rec ) * 2 + 1 )), * retcur = ret ; int counter = 0 ; while ( * cur ) { if ( * cur == flag ) counter ++ ; else { temp = toStr ( counter ); strcpy ( retcur , temp ); while ( * retcur ) retcur ++ ; * retcur = flag ; * retcur ++ ; flag = * cur ; counter = 1 ; free ( temp ); } cur ++ ; } temp = toStr ( counter ); strcpy ( retcur , temp ); while ( * retcur ) retcur ++ ; * retcur = flag ; free ( temp ); free ( rec ); return ret ; }","title":"38. \u5916\u89c2\u6570\u5217"},{"location":"coding/leetcode/38.html#38","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"38. \u5916\u89c2\u6570\u5217"},{"location":"coding/leetcode/38.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 n n \uff08 1 \\leq n \\leq 30 1 \\leq n \\leq 30 \uff09\uff0c\u8f93\u51fa\u5916\u89c2\u6570\u5217\u7684\u7b2c n n \u9879\u3002 \u6ce8\u610f\uff1a\u6574\u6570\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e00\u9879\u5c06\u8868\u793a\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u300c\u5916\u89c2\u6570\u5217\u300d\u662f\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u4ece\u6570\u5b57 1 \u5f00\u59cb\uff0c\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e00\u9879\u90fd\u662f\u5bf9\u524d\u4e00\u9879\u7684\u63cf\u8ff0\u3002\u524d\u4e94\u9879\u5982\u4e0b\uff1a 1. 1 2. 11 3. 21 4. 1211 5. 111221 \u7b2c\u4e00\u9879\u662f\u6570\u5b57 1 \u63cf\u8ff0\u524d\u4e00\u9879\uff0c\u8fd9\u4e2a\u6570\u662f 1 \u5373 \u201c\u4e00\u4e2a 1 \u201d\uff0c\u8bb0\u4f5c 11 \u63cf\u8ff0\u524d\u4e00\u9879\uff0c\u8fd9\u4e2a\u6570\u662f 11 \u5373 \u201c\u4e24\u4e2a 1 \u201d \uff0c\u8bb0\u4f5c 21 \u63cf\u8ff0\u524d\u4e00\u9879\uff0c\u8fd9\u4e2a\u6570\u662f 21 \u5373 \u201c\u4e00\u4e2a 2 \u4e00\u4e2a 1 \u201d \uff0c\u8bb0\u4f5c 1211 \u63cf\u8ff0\u524d\u4e00\u9879\uff0c\u8fd9\u4e2a\u6570\u662f 1211 \u5373 \u201c\u4e00\u4e2a 1 \u4e00\u4e2a 2 \u4e24\u4e2a 1 \u201d \uff0c\u8bb0\u4f5c 111221 \u793a\u4f8b 1: \u8f93\u5165: 1 \u8f93\u51fa: \"1\" \u89e3\u91ca\uff1a\u8fd9\u662f\u4e00\u4e2a\u57fa\u672c\u6837\u4f8b\u3002 \u793a\u4f8b 2: \u8f93\u5165: 4 \u8f93\u51fa: \"1211\" \u89e3\u91ca\uff1a\u5f53 n = 3 \u65f6\uff0c\u5e8f\u5217\u662f \"21\"\uff0c\u5176\u4e2d\u6211\u4eec\u6709 \"2\" \u548c \"1\" \u4e24\u7ec4\uff0c\"2\" \u53ef\u4ee5\u8bfb\u4f5c \"12\"\uff0c\u4e5f\u5c31\u662f\u51fa\u73b0\u9891\u6b21 = 1 \u800c \u503c = 2\uff1b\u7c7b\u4f3c \"1\" \u53ef\u4ee5\u8bfb\u4f5c \"11\"\u3002\u6240\u4ee5\u7b54\u6848\u662f \"12\" \u548c \"11\" \u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u4e5f\u5c31\u662f \"1211\"\u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/38.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u6839\u636e\u5b9a\u4e49\u8fdb\u884c\u8ba1\u7b97\u5373\u53ef\uff0c\u6ce8\u610f\u6b21\u6570\u90e8\u5206\u53ef\u80fd\u8d85\u8fc710\uff0c\u800c\u6570\u5b57\u90e8\u5206\u4e0d\u4f1a\u8d85\u8fc710\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a char * toStr ( int n ) { char * ret = ( char * ) memset ( malloc ( sizeof ( char ) * 10 ), 0 , sizeof ( char ) * 10 ), temp ; int i = 0 , head = 0 , tail ; while ( n ) { ret [ i ] = n % 10 + '0' ; n /= 10 ; i ++ ; } tail = i - 1 ; while ( head < tail ) { temp = ret [ head ]; ret [ head ] = ret [ tail ]; ret [ tail ] = temp ; } return ret ; } char * countAndSay ( int n ){ if ( n == 1 ) { char * ret = ( char * ) malloc ( sizeof ( char ) * 2 ); ret [ 0 ] = '1' ; ret [ 1 ] = 0 ; return ret ; } char * rec = countAndSay ( n - 1 ), * cur = rec , flag = * cur , * temp = NULL , * ret = ( char * ) memset ( malloc ( sizeof ( char ) * ( strlen ( rec ) * 2 + 1 )), 0 , sizeof ( char ) * ( strlen ( rec ) * 2 + 1 )), * retcur = ret ; int counter = 0 ; while ( * cur ) { if ( * cur == flag ) counter ++ ; else { temp = toStr ( counter ); strcpy ( retcur , temp ); while ( * retcur ) retcur ++ ; * retcur = flag ; * retcur ++ ; flag = * cur ; counter = 1 ; free ( temp ); } cur ++ ; } temp = toStr ( counter ); strcpy ( retcur , temp ); while ( * retcur ) retcur ++ ; * retcur = flag ; free ( temp ); free ( rec ); return ret ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/384.html","text":"384. \u6253\u4e71\u6570\u7ec4 \u00b6 \u96be\u5ea6\uff1a \u4e2d\u7b49 \u9898\u76ee \u00b6 \u6253\u4e71\u4e00\u4e2a\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4\u3002 \u793a\u4f8b\uff1a // \u4ee5\u6570\u5b57\u96c6\u5408 1, 2 \u548c 3 \u521d\u59cb\u5316\u6570\u7ec4\u3002 int[] nums = {1,2,3}; Solution solution = new Solution(nums); // \u6253\u4e71\u6570\u7ec4 [1,2,3] \u5e76\u8fd4\u56de\u7ed3\u679c\u3002\u4efb\u4f55 [1,2,3]\u7684\u6392\u5217\u8fd4\u56de\u7684\u6982\u7387\u5e94\u8be5\u76f8\u540c\u3002 solution.shuffle(); // \u91cd\u8bbe\u6570\u7ec4\u5230\u5b83\u7684\u521d\u59cb\u72b6\u6001[1,2,3]\u3002 solution.reset(); // \u968f\u673a\u8fd4\u56de\u6570\u7ec4[1,2,3]\u6253\u4e71\u540e\u7684\u7ed3\u679c\u3002 solution.shuffle(); Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a Fisher-Yates \u6d17\u724c\u7b97\u6cd5\uff0c\u5173\u952e\u5728\u4e8e\u5b9e\u73b0\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u65e0\u653e\u56de\u62bd\u6837\u3002 Fisher-Yates \u6d17\u724c\u7b97\u6cd5\u8ddf\u66b4\u529b\u7b97\u6cd5\u5f88\u50cf\u3002\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d\uff0c\u751f\u6210\u4e00\u4e2a\u8303\u56f4\u5728\u5f53\u524d\u4e0b\u6807\u5230\u6570\u7ec4\u672b\u5c3e\u5143\u7d20\u4e0b\u6807\u4e4b\u95f4\u7684\u968f\u673a\u6574\u6570\u3002\u63a5\u4e0b\u6765\uff0c\u5c06\u5f53\u524d\u5143\u7d20\u548c\u968f\u673a\u9009\u51fa\u7684\u4e0b\u6807\u6240\u6307\u7684\u5143\u7d20\u4e92\u76f8\u4ea4\u6362 - \u8fd9\u4e00\u6b65\u6a21\u62df\u4e86\u6bcf\u6b21\u4ece \u201c\u5e3d\u5b50\u201d \u91cc\u9762\u6478\u4e00\u4e2a\u5143\u7d20\u7684\u8fc7\u7a0b\uff0c\u5176\u4e2d\u9009\u53d6\u4e0b\u6807\u8303\u56f4\u7684\u4f9d\u636e\u5728\u4e8e\u6bcf\u4e2a\u88ab\u6478\u51fa\u7684\u5143\u7d20\u90fd\u4e0d\u53ef\u80fd\u518d\u88ab\u6478\u51fa\u6765\u4e86\u3002\u6b64\u5916\u8fd8\u6709\u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u7ec6\u8282\uff0c\u5f53\u524d\u5143\u7d20\u662f\u53ef\u4ee5\u548c\u5b83\u672c\u8eab\u4e92\u76f8\u4ea4\u6362\u7684 - \u5426\u5219\u751f\u6210\u6700\u540e\u7684\u6392\u5217\u7ec4\u5408\u7684\u6982\u7387\u5c31\u4e0d\u5bf9\u4e86\u3002 Reference \u4ee3\u7801\u5982\u4e0b\uff1a typedef struct { int size ; int * nums ; } Solution ; Solution * solutionCreate ( int * nums , int numsSize ) { Solution * ret = ( Solution * ) malloc ( sizeof ( Solution )); ret -> size = numsSize ; ret -> nums = ( int * ) memcpy ( malloc ( sizeof ( int ) * numsSize ), nums , sizeof ( int ) * numsSize ); return ret ; } /** Resets the array to its original configuration and return it. */ int * solutionReset ( Solution * obj , int * retSize ) { * retSize = obj -> size ; return obj -> nums ; } /** Returns a random shuffling of the array. */ int * solutionShuffle ( Solution * obj , int * retSize ) { * retSize = obj -> size ; int * ret = ( int * ) memcpy ( malloc ( sizeof ( int ) * obj -> size ), obj -> nums , sizeof ( int ) * obj -> size ), i = 0 , temp , x , y ; unsigned int * seed = malloc ( sizeof ( unsigned int )); * seed += ( unsigned int ) seed ; srand ( * seed ); for ( i = 0 ; i < obj -> size ; i ++ ) { x = i ; y = rand () % ( obj -> size - i ) + i ; temp = ret [ x ]; ret [ x ] = ret [ y ]; ret [ y ] = temp ; } free ( seed ); return ret ; } void solutionFree ( Solution * obj ) { free ( obj -> nums ); free ( obj ); } /** * Your Solution struct will be instantiated and called as such: * Solution* obj = solutionCreate(nums, numsSize); * int* param_1 = solutionReset(obj, retSize); * int* param_2 = solutionShuffle(obj, retSize); * solutionFree(obj); */","title":"384. \u6253\u4e71\u6570\u7ec4"},{"location":"coding/leetcode/384.html#384","text":"\u96be\u5ea6\uff1a \u4e2d\u7b49","title":"384. \u6253\u4e71\u6570\u7ec4"},{"location":"coding/leetcode/384.html#_1","text":"\u6253\u4e71\u4e00\u4e2a\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4\u3002 \u793a\u4f8b\uff1a // \u4ee5\u6570\u5b57\u96c6\u5408 1, 2 \u548c 3 \u521d\u59cb\u5316\u6570\u7ec4\u3002 int[] nums = {1,2,3}; Solution solution = new Solution(nums); // \u6253\u4e71\u6570\u7ec4 [1,2,3] \u5e76\u8fd4\u56de\u7ed3\u679c\u3002\u4efb\u4f55 [1,2,3]\u7684\u6392\u5217\u8fd4\u56de\u7684\u6982\u7387\u5e94\u8be5\u76f8\u540c\u3002 solution.shuffle(); // \u91cd\u8bbe\u6570\u7ec4\u5230\u5b83\u7684\u521d\u59cb\u72b6\u6001[1,2,3]\u3002 solution.reset(); // \u968f\u673a\u8fd4\u56de\u6570\u7ec4[1,2,3]\u6253\u4e71\u540e\u7684\u7ed3\u679c\u3002 solution.shuffle(); Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/384.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a Fisher-Yates \u6d17\u724c\u7b97\u6cd5\uff0c\u5173\u952e\u5728\u4e8e\u5b9e\u73b0\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u65e0\u653e\u56de\u62bd\u6837\u3002 Fisher-Yates \u6d17\u724c\u7b97\u6cd5\u8ddf\u66b4\u529b\u7b97\u6cd5\u5f88\u50cf\u3002\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d\uff0c\u751f\u6210\u4e00\u4e2a\u8303\u56f4\u5728\u5f53\u524d\u4e0b\u6807\u5230\u6570\u7ec4\u672b\u5c3e\u5143\u7d20\u4e0b\u6807\u4e4b\u95f4\u7684\u968f\u673a\u6574\u6570\u3002\u63a5\u4e0b\u6765\uff0c\u5c06\u5f53\u524d\u5143\u7d20\u548c\u968f\u673a\u9009\u51fa\u7684\u4e0b\u6807\u6240\u6307\u7684\u5143\u7d20\u4e92\u76f8\u4ea4\u6362 - \u8fd9\u4e00\u6b65\u6a21\u62df\u4e86\u6bcf\u6b21\u4ece \u201c\u5e3d\u5b50\u201d \u91cc\u9762\u6478\u4e00\u4e2a\u5143\u7d20\u7684\u8fc7\u7a0b\uff0c\u5176\u4e2d\u9009\u53d6\u4e0b\u6807\u8303\u56f4\u7684\u4f9d\u636e\u5728\u4e8e\u6bcf\u4e2a\u88ab\u6478\u51fa\u7684\u5143\u7d20\u90fd\u4e0d\u53ef\u80fd\u518d\u88ab\u6478\u51fa\u6765\u4e86\u3002\u6b64\u5916\u8fd8\u6709\u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u7ec6\u8282\uff0c\u5f53\u524d\u5143\u7d20\u662f\u53ef\u4ee5\u548c\u5b83\u672c\u8eab\u4e92\u76f8\u4ea4\u6362\u7684 - \u5426\u5219\u751f\u6210\u6700\u540e\u7684\u6392\u5217\u7ec4\u5408\u7684\u6982\u7387\u5c31\u4e0d\u5bf9\u4e86\u3002 Reference \u4ee3\u7801\u5982\u4e0b\uff1a typedef struct { int size ; int * nums ; } Solution ; Solution * solutionCreate ( int * nums , int numsSize ) { Solution * ret = ( Solution * ) malloc ( sizeof ( Solution )); ret -> size = numsSize ; ret -> nums = ( int * ) memcpy ( malloc ( sizeof ( int ) * numsSize ), nums , sizeof ( int ) * numsSize ); return ret ; } /** Resets the array to its original configuration and return it. */ int * solutionReset ( Solution * obj , int * retSize ) { * retSize = obj -> size ; return obj -> nums ; } /** Returns a random shuffling of the array. */ int * solutionShuffle ( Solution * obj , int * retSize ) { * retSize = obj -> size ; int * ret = ( int * ) memcpy ( malloc ( sizeof ( int ) * obj -> size ), obj -> nums , sizeof ( int ) * obj -> size ), i = 0 , temp , x , y ; unsigned int * seed = malloc ( sizeof ( unsigned int )); * seed += ( unsigned int ) seed ; srand ( * seed ); for ( i = 0 ; i < obj -> size ; i ++ ) { x = i ; y = rand () % ( obj -> size - i ) + i ; temp = ret [ x ]; ret [ x ] = ret [ y ]; ret [ y ] = temp ; } free ( seed ); return ret ; } void solutionFree ( Solution * obj ) { free ( obj -> nums ); free ( obj ); } /** * Your Solution struct will be instantiated and called as such: * Solution* obj = solutionCreate(nums, numsSize); * int* param_1 = solutionReset(obj, retSize); * int* param_2 = solutionShuffle(obj, retSize); * solutionFree(obj); */","title":"\u9898\u89e3"},{"location":"coding/leetcode/387.html","text":"387. \u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u552f\u4e00\u5b57\u7b26 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u5b83\u7684\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\uff0c\u5e76\u8fd4\u56de\u5b83\u7684\u7d22\u5f15\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de -1 \u3002 \u793a\u4f8b\uff1a s = \"leetcode\" \u8fd4\u56de 0 s = \"loveleetcode\" \u8fd4\u56de 2 \u63d0\u793a\uff1a \u4f60\u53ef\u4ee5\u5047\u5b9a\u8be5\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u5b58\u50a8\u5b57\u7b26\u4e32\u4e2d\u5404\u5b57\u7b26\u7684\u51fa\u73b0\u6b21\u6570\u3002\u904d\u5386\u5b57\u7b26\u4e32\u8fdb\u884c\u7edf\u8ba1\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int firstUniqChar ( char * s ){ int hashMap [ 26 ] = { 0 }; char * cur = s ; while ( * cur ) { hashMap [ * cur - 'a' ] ++ ; cur ++ ; } cur = s ; while ( * cur ) { if ( hashMap [ * cur - 'a' ] == 1 ) return ( int )( cur - s ); cur ++ ; } return -1 ; }","title":"387. \u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u552f\u4e00\u5b57\u7b26"},{"location":"coding/leetcode/387.html#387","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"387. \u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u552f\u4e00\u5b57\u7b26"},{"location":"coding/leetcode/387.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u5b83\u7684\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\uff0c\u5e76\u8fd4\u56de\u5b83\u7684\u7d22\u5f15\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de -1 \u3002 \u793a\u4f8b\uff1a s = \"leetcode\" \u8fd4\u56de 0 s = \"loveleetcode\" \u8fd4\u56de 2 \u63d0\u793a\uff1a \u4f60\u53ef\u4ee5\u5047\u5b9a\u8be5\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/387.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u5b58\u50a8\u5b57\u7b26\u4e32\u4e2d\u5404\u5b57\u7b26\u7684\u51fa\u73b0\u6b21\u6570\u3002\u904d\u5386\u5b57\u7b26\u4e32\u8fdb\u884c\u7edf\u8ba1\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int firstUniqChar ( char * s ){ int hashMap [ 26 ] = { 0 }; char * cur = s ; while ( * cur ) { hashMap [ * cur - 'a' ] ++ ; cur ++ ; } cur = s ; while ( * cur ) { if ( hashMap [ * cur - 'a' ] == 1 ) return ( int )( cur - s ); cur ++ ; } return -1 ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/48.html","text":"48. \u65cb\u8f6c\u56fe\u50cf \u00b6 \u96be\u5ea6\uff1a \u4e2d\u7b49 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a n \u00d7 n \u7684\u4e8c\u7ef4\u77e9\u9635\u8868\u793a\u4e00\u4e2a\u56fe\u50cf\u3002 \u5c06\u56fe\u50cf\u987a\u65f6\u9488\u65cb\u8f6c 90 \u5ea6\u3002 \u8bf4\u660e\uff1a \u4f60\u5fc5\u987b\u5728\u539f\u5730\u65cb\u8f6c\u56fe\u50cf\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u9700\u8981\u76f4\u63a5\u4fee\u6539\u8f93\u5165\u7684\u4e8c\u7ef4\u77e9\u9635\u3002\u8bf7\u4e0d\u8981\u4f7f\u7528\u53e6\u4e00\u4e2a\u77e9\u9635\u6765\u65cb\u8f6c\u56fe\u50cf\u3002 \u793a\u4f8b 1\uff1a \u7ed9\u5b9a matrix = [ [1,2,3], [4,5,6], [7,8,9] ], \u539f\u5730\u65cb\u8f6c\u8f93\u5165\u77e9\u9635\uff0c\u4f7f\u5176\u53d8\u4e3a: [ [7,4,1], [8,5,2], [9,6,3] ] \u793a\u4f8b 2\uff1a \u7ed9\u5b9a matrix = [ [ 5, 1, 9,11], [ 2, 4, 8,10], [13, 3, 6, 7], [15,14,12,16] ], \u539f\u5730\u65cb\u8f6c\u8f93\u5165\u77e9\u9635\uff0c\u4f7f\u5176\u53d8\u4e3a: [ [15,13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7,10,11] ] Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5c06\u77e9\u9635\u8f6c\u7f6e\u540e\u53cd\u8f6c\u5404\u5217\u7684\u987a\u5e8f\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a void rotate ( int ** matrix , int matrixSize , int * matrixColSize ){ int i = 0 , j = 0 , temp ; for ( i = 0 ; i < matrixSize ; i ++ ) { for ( j = i ; j < matrixSize ; j ++ ) { temp = matrix [ i ][ j ]; matrix [ i ][ j ] = matrix [ j ][ i ]; matrix [ j ][ i ] = temp ; } } for ( i = 0 ; i < matrixSize ; i ++ ) { for ( j = 0 ; j < matrixSize / 2 ; j ++ ) { temp = matrix [ i ][ j ]; matrix [ i ][ j ] = matrix [ i ][ matrixSize - j - 1 ]; matrix [ i ][ matrixSize - j - 1 ] = temp ; } } }","title":"48. \u65cb\u8f6c\u56fe\u50cf"},{"location":"coding/leetcode/48.html#48","text":"\u96be\u5ea6\uff1a \u4e2d\u7b49","title":"48. \u65cb\u8f6c\u56fe\u50cf"},{"location":"coding/leetcode/48.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a n \u00d7 n \u7684\u4e8c\u7ef4\u77e9\u9635\u8868\u793a\u4e00\u4e2a\u56fe\u50cf\u3002 \u5c06\u56fe\u50cf\u987a\u65f6\u9488\u65cb\u8f6c 90 \u5ea6\u3002 \u8bf4\u660e\uff1a \u4f60\u5fc5\u987b\u5728\u539f\u5730\u65cb\u8f6c\u56fe\u50cf\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u9700\u8981\u76f4\u63a5\u4fee\u6539\u8f93\u5165\u7684\u4e8c\u7ef4\u77e9\u9635\u3002\u8bf7\u4e0d\u8981\u4f7f\u7528\u53e6\u4e00\u4e2a\u77e9\u9635\u6765\u65cb\u8f6c\u56fe\u50cf\u3002 \u793a\u4f8b 1\uff1a \u7ed9\u5b9a matrix = [ [1,2,3], [4,5,6], [7,8,9] ], \u539f\u5730\u65cb\u8f6c\u8f93\u5165\u77e9\u9635\uff0c\u4f7f\u5176\u53d8\u4e3a: [ [7,4,1], [8,5,2], [9,6,3] ] \u793a\u4f8b 2\uff1a \u7ed9\u5b9a matrix = [ [ 5, 1, 9,11], [ 2, 4, 8,10], [13, 3, 6, 7], [15,14,12,16] ], \u539f\u5730\u65cb\u8f6c\u8f93\u5165\u77e9\u9635\uff0c\u4f7f\u5176\u53d8\u4e3a: [ [15,13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7,10,11] ] Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/48.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5c06\u77e9\u9635\u8f6c\u7f6e\u540e\u53cd\u8f6c\u5404\u5217\u7684\u987a\u5e8f\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a void rotate ( int ** matrix , int matrixSize , int * matrixColSize ){ int i = 0 , j = 0 , temp ; for ( i = 0 ; i < matrixSize ; i ++ ) { for ( j = i ; j < matrixSize ; j ++ ) { temp = matrix [ i ][ j ]; matrix [ i ][ j ] = matrix [ j ][ i ]; matrix [ j ][ i ] = temp ; } } for ( i = 0 ; i < matrixSize ; i ++ ) { for ( j = 0 ; j < matrixSize / 2 ; j ++ ) { temp = matrix [ i ][ j ]; matrix [ i ][ j ] = matrix [ i ][ matrixSize - j - 1 ]; matrix [ i ][ matrixSize - j - 1 ] = temp ; } } }","title":"\u9898\u89e3"},{"location":"coding/leetcode/50.html","text":"50. Pow(x, n) \u00b6 \u96be\u5ea6\uff1a \u4e2d\u7b49 \u9898\u76ee \u00b6 \u5b9e\u73b0 pow(x, n) \uff0c\u5373\u8ba1\u7b97 x \u7684 n \u6b21\u5e42\u51fd\u6570\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 2.00000, 10 \u8f93\u51fa: 1024.00000 \u793a\u4f8b 2\uff1a \u8f93\u5165: 2.10000, 3 \u8f93\u51fa: 9.26100 \u793a\u4f8b 3\uff1a \u8f93\u5165: 2.00000, -2 \u8f93\u51fa: 0.25000 \u89e3\u91ca: 2^(-2) = (1/2)^2 = 1/4 = 0.25 \u8bf4\u660e\uff1a -100.0 < x < 100.0 n \u662f 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [\u22122^{31}, 2^{31} \u2212 1] [\u22122^{31}, 2^{31} \u2212 1] \u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5229\u7528\u5feb\u901f\u5e42\u7684\u601d\u8def\uff0c\u5b58\u50a8\u6b21\u6570\u4e3a2\u7684\u6574\u6570\u5e42\u7684\u8ba1\u7b97\u7ed3\u679c\uff0c\u7136\u540e\u7528\u8fd9\u4e9b\u7ed3\u679c\u76f8\u4e58\u5f97\u5230\u8f93\u51fa\u7ed3\u679c\u3002\u6ce8\u610f\u6307\u6570\u4e3a\u8d1f\u6570\u7684\u60c5\u51b5\u3002\u5f53\u6307\u6570\u4e3a -2147483648 \u65f6\u4e0d\u80fd\u53d6\u8d1f\uff0c\u6b64\u65f6\u53ef\u4ee5\u5148\u52a0\u4e00\u518d\u53d6\u8d1f\uff0c\u6700\u540e\u9664\u4ee5\u5e95\u6570\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a double myPow ( double x , int n ) { if ( n < 0 ) return 1 / myPow ( x , - ( n + 1 )) / x ; double cache [ 32 ] = { 0 }, ret = 1 ; int i = 0 ; cache [ 0 ] = x ; while ( n ) { if ( n & 1 ) ret *= cache [ i ]; n >>= 1 ; i ++ ; cache [ i ] = cache [ i - 1 ] * cache [ i - 1 ]; } return ret ; }","title":"50. Pow(x, n)"},{"location":"coding/leetcode/50.html#50-powx-n","text":"\u96be\u5ea6\uff1a \u4e2d\u7b49","title":"50. Pow(x, n)"},{"location":"coding/leetcode/50.html#_1","text":"\u5b9e\u73b0 pow(x, n) \uff0c\u5373\u8ba1\u7b97 x \u7684 n \u6b21\u5e42\u51fd\u6570\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 2.00000, 10 \u8f93\u51fa: 1024.00000 \u793a\u4f8b 2\uff1a \u8f93\u5165: 2.10000, 3 \u8f93\u51fa: 9.26100 \u793a\u4f8b 3\uff1a \u8f93\u5165: 2.00000, -2 \u8f93\u51fa: 0.25000 \u89e3\u91ca: 2^(-2) = (1/2)^2 = 1/4 = 0.25 \u8bf4\u660e\uff1a -100.0 < x < 100.0 n \u662f 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [\u22122^{31}, 2^{31} \u2212 1] [\u22122^{31}, 2^{31} \u2212 1] \u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/50.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5229\u7528\u5feb\u901f\u5e42\u7684\u601d\u8def\uff0c\u5b58\u50a8\u6b21\u6570\u4e3a2\u7684\u6574\u6570\u5e42\u7684\u8ba1\u7b97\u7ed3\u679c\uff0c\u7136\u540e\u7528\u8fd9\u4e9b\u7ed3\u679c\u76f8\u4e58\u5f97\u5230\u8f93\u51fa\u7ed3\u679c\u3002\u6ce8\u610f\u6307\u6570\u4e3a\u8d1f\u6570\u7684\u60c5\u51b5\u3002\u5f53\u6307\u6570\u4e3a -2147483648 \u65f6\u4e0d\u80fd\u53d6\u8d1f\uff0c\u6b64\u65f6\u53ef\u4ee5\u5148\u52a0\u4e00\u518d\u53d6\u8d1f\uff0c\u6700\u540e\u9664\u4ee5\u5e95\u6570\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a double myPow ( double x , int n ) { if ( n < 0 ) return 1 / myPow ( x , - ( n + 1 )) / x ; double cache [ 32 ] = { 0 }, ret = 1 ; int i = 0 ; cache [ 0 ] = x ; while ( n ) { if ( n & 1 ) ret *= cache [ i ]; n >>= 1 ; i ++ ; cache [ i ] = cache [ i - 1 ] * cache [ i - 1 ]; } return ret ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/509.html","text":"509. \u6590\u6ce2\u90a3\u5951\u6570 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u6590\u6ce2\u90a3\u5951\u6570\uff0c\u901a\u5e38\u7528 F(n) \u8868\u793a\uff0c\u5f62\u6210\u7684\u5e8f\u5217\u79f0\u4e3a\u6590\u6ce2\u90a3\u5951\u6570\u5217\u3002\u8be5\u6570\u5217\u7531 0 \u548c 1 \u5f00\u59cb\uff0c\u540e\u9762\u7684\u6bcf\u4e00\u9879\u6570\u5b57\u90fd\u662f\u524d\u9762\u4e24\u9879\u6570\u5b57\u7684\u548c\u3002\u4e5f\u5c31\u662f\uff1a F(0) = 0, F(1) = 1 F(N) = F(N - 1) + F(N - 2), \u5176\u4e2d N > 1. \u7ed9\u5b9a N \uff0c\u8ba1\u7b97 F(N) \u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a2 \u8f93\u51fa\uff1a1 \u89e3\u91ca\uff1aF(2) = F(1) + F(0) = 1 + 0 = 1. \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a3 \u8f93\u51fa\uff1a2 \u89e3\u91ca\uff1aF(3) = F(2) + F(1) = 1 + 1 = 2. \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1a4 \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1aF(4) = F(3) + F(2) = 2 + 1 = 3. \u63d0\u793a\uff1a 0\\leq N\\leq30 0\\leq N\\leq30 Reference \u9898\u89e3 \u00b6 \u9012\u5f52 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u5b58\u653e\u5386\u53f2\u7ed3\u679c\uff0c\u52a0\u901f\u9012\u5f52\u8ba1\u7b97 \u4ee3\u7801\u5982\u4e0b\uff1a int fib_cache ( int N , int ** cache , int * lenCache , int * fullCache ){ if ( ! N ) return 0 ; if ( ! ( * cache )) { * lenCache = 2 ; * fullCache = N + 1 ; * cache = ( int * ) memset ( malloc ( sizeof ( int ) * * fullCache ), 0 , sizeof ( int ) * * fullCache ); ( * cache )[ 0 ] = 1 ; ( * cache )[ 1 ] = 1 ; } if ( N > * lenCache && N <= * fullCache ) ( * cache )[ N -1 ] = fib_cache ( N - 1 , cache , lenCache , fullCache ) + fib_cache ( N - 2 , cache , lenCache , fullCache ); * lenCache = N ; return ( * cache )[ N - 1 ]; } int fib ( int N ){ int * cache = NULL , lenCache = 0 , fullCache = 0 ; return fib_cache ( N , & cache , & lenCache , & fullCache ); } \u8fed\u4ee3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u6839\u636e\u5b9a\u4e49\u63a8\u7b97\u6590\u6ce2\u90a3\u5951\u6570 \u4ee3\u7801\u5982\u4e0b\uff1a int fib ( int N ){ int ret = 0 , next = 1 , tmp ; while ( N ) { tmp = ret ; ret = next ; next = ret + tmp ; N -- ; } return ret ; }","title":"509. \u6590\u6ce2\u90a3\u5951\u6570"},{"location":"coding/leetcode/509.html#509","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"509. \u6590\u6ce2\u90a3\u5951\u6570"},{"location":"coding/leetcode/509.html#_1","text":"\u6590\u6ce2\u90a3\u5951\u6570\uff0c\u901a\u5e38\u7528 F(n) \u8868\u793a\uff0c\u5f62\u6210\u7684\u5e8f\u5217\u79f0\u4e3a\u6590\u6ce2\u90a3\u5951\u6570\u5217\u3002\u8be5\u6570\u5217\u7531 0 \u548c 1 \u5f00\u59cb\uff0c\u540e\u9762\u7684\u6bcf\u4e00\u9879\u6570\u5b57\u90fd\u662f\u524d\u9762\u4e24\u9879\u6570\u5b57\u7684\u548c\u3002\u4e5f\u5c31\u662f\uff1a F(0) = 0, F(1) = 1 F(N) = F(N - 1) + F(N - 2), \u5176\u4e2d N > 1. \u7ed9\u5b9a N \uff0c\u8ba1\u7b97 F(N) \u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a2 \u8f93\u51fa\uff1a1 \u89e3\u91ca\uff1aF(2) = F(1) + F(0) = 1 + 0 = 1. \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a3 \u8f93\u51fa\uff1a2 \u89e3\u91ca\uff1aF(3) = F(2) + F(1) = 1 + 1 = 2. \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1a4 \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1aF(4) = F(3) + F(2) = 2 + 1 = 3. \u63d0\u793a\uff1a 0\\leq N\\leq30 0\\leq N\\leq30 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/509.html#_2","text":"","title":"\u9898\u89e3"},{"location":"coding/leetcode/509.html#_3","text":"\u57fa\u672c\u601d\u8def\uff1a \u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u5b58\u653e\u5386\u53f2\u7ed3\u679c\uff0c\u52a0\u901f\u9012\u5f52\u8ba1\u7b97 \u4ee3\u7801\u5982\u4e0b\uff1a int fib_cache ( int N , int ** cache , int * lenCache , int * fullCache ){ if ( ! N ) return 0 ; if ( ! ( * cache )) { * lenCache = 2 ; * fullCache = N + 1 ; * cache = ( int * ) memset ( malloc ( sizeof ( int ) * * fullCache ), 0 , sizeof ( int ) * * fullCache ); ( * cache )[ 0 ] = 1 ; ( * cache )[ 1 ] = 1 ; } if ( N > * lenCache && N <= * fullCache ) ( * cache )[ N -1 ] = fib_cache ( N - 1 , cache , lenCache , fullCache ) + fib_cache ( N - 2 , cache , lenCache , fullCache ); * lenCache = N ; return ( * cache )[ N - 1 ]; } int fib ( int N ){ int * cache = NULL , lenCache = 0 , fullCache = 0 ; return fib_cache ( N , & cache , & lenCache , & fullCache ); }","title":"\u9012\u5f52"},{"location":"coding/leetcode/509.html#_4","text":"\u57fa\u672c\u601d\u8def\uff1a \u6839\u636e\u5b9a\u4e49\u63a8\u7b97\u6590\u6ce2\u90a3\u5951\u6570 \u4ee3\u7801\u5982\u4e0b\uff1a int fib ( int N ){ int ret = 0 , next = 1 , tmp ; while ( N ) { tmp = ret ; ret = next ; next = ret + tmp ; N -- ; } return ret ; }","title":"\u8fed\u4ee3"},{"location":"coding/leetcode/66.html","text":"66. \u52a0\u4e00 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u7531\u6574\u6570\u7ec4\u6210\u7684\u975e\u7a7a\u6570\u7ec4\u6240\u8868\u793a\u7684\u975e\u8d1f\u6574\u6570\uff0c\u5728\u8be5\u6570\u7684\u57fa\u7840\u4e0a\u52a0\u4e00\u3002 \u6700\u9ad8\u4f4d\u6570\u5b57\u5b58\u653e\u5728\u6570\u7ec4\u7684\u9996\u4f4d\uff0c \u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u53ea\u5b58\u50a8\u5355\u4e2a\u6570\u5b57\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6574\u6570 0 \u4e4b\u5916\uff0c\u8fd9\u4e2a\u6574\u6570\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [1,2,3] \u8f93\u51fa: [1,2,4] \u89e3\u91ca: \u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 123\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165: [4,3,2,1] \u8f93\u51fa: [4,3,2,2] \u89e3\u91ca: \u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 4321\u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u4ece\u6700\u540e\u4e00\u4f4d\u5f00\u59cb\u52a0\uff0c\u5411\u524d\u5904\u7406\u8fdb\u4f4d\u3002\u6ce8\u610f9999+1\u7684\u7279\u6b8a\u60c5\u51b5\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Note: The returned array must be malloced, assume caller calls free(). */ int * plusOne ( int * digits , int digitsSize , int * returnSize ){ int * ret = ( int * ) malloc ( sizeof ( int ) * ( digitsSize + 1 )), i = digitsSize , add = 1 ; * ret = 0 ; memcpy ( ret + 1 , digits , sizeof ( int ) * digitsSize ); for ( i = digitsSize ; i >= 0 && add ; i -- ) { if ( add = ret [ i ] == 9 ) ret [ i ] = 0 ; else ret [ i ] ++ ; } * returnSize = ( i + 1 ) ? digitsSize : digitsSize + 1 ; return ret + (( i + 1 ) ? 1 : 0 ); }","title":"66. \u52a0\u4e00"},{"location":"coding/leetcode/66.html#66","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"66. \u52a0\u4e00"},{"location":"coding/leetcode/66.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u7531\u6574\u6570\u7ec4\u6210\u7684\u975e\u7a7a\u6570\u7ec4\u6240\u8868\u793a\u7684\u975e\u8d1f\u6574\u6570\uff0c\u5728\u8be5\u6570\u7684\u57fa\u7840\u4e0a\u52a0\u4e00\u3002 \u6700\u9ad8\u4f4d\u6570\u5b57\u5b58\u653e\u5728\u6570\u7ec4\u7684\u9996\u4f4d\uff0c \u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u53ea\u5b58\u50a8\u5355\u4e2a\u6570\u5b57\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6574\u6570 0 \u4e4b\u5916\uff0c\u8fd9\u4e2a\u6574\u6570\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [1,2,3] \u8f93\u51fa: [1,2,4] \u89e3\u91ca: \u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 123\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165: [4,3,2,1] \u8f93\u51fa: [4,3,2,2] \u89e3\u91ca: \u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 4321\u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/66.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u4ece\u6700\u540e\u4e00\u4f4d\u5f00\u59cb\u52a0\uff0c\u5411\u524d\u5904\u7406\u8fdb\u4f4d\u3002\u6ce8\u610f9999+1\u7684\u7279\u6b8a\u60c5\u51b5\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Note: The returned array must be malloced, assume caller calls free(). */ int * plusOne ( int * digits , int digitsSize , int * returnSize ){ int * ret = ( int * ) malloc ( sizeof ( int ) * ( digitsSize + 1 )), i = digitsSize , add = 1 ; * ret = 0 ; memcpy ( ret + 1 , digits , sizeof ( int ) * digitsSize ); for ( i = digitsSize ; i >= 0 && add ; i -- ) { if ( add = ret [ i ] == 9 ) ret [ i ] = 0 ; else ret [ i ] ++ ; } * returnSize = ( i + 1 ) ? digitsSize : digitsSize + 1 ; return ret + (( i + 1 ) ? 1 : 0 ); }","title":"\u9898\u89e3"},{"location":"coding/leetcode/7.html","text":"7. \u6574\u6570\u53cd\u8f6c \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u51fa\u4e00\u4e2a 32 \u4f4d\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u4f60\u9700\u8981\u5c06\u8fd9\u4e2a\u6574\u6570\u4e2d\u6bcf\u4f4d\u4e0a\u7684\u6570\u5b57\u8fdb\u884c\u53cd\u8f6c\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 123 \u8f93\u51fa: 321 \u793a\u4f8b 2\uff1a \u8f93\u5165: -123 \u8f93\u51fa: -321 \u793a\u4f8b 3\uff1a \u8f93\u5165: 120 \u8f93\u51fa: 21 \u6ce8\u610f\uff1a \u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8\u5f97\u4e0b 32 \u4f4d\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5219\u5176\u6570\u503c\u8303\u56f4\u4e3a [\u22122^{31}, 2^{31} \u2212 1] [\u22122^{31}, 2^{31} \u2212 1] \u3002\u8bf7\u6839\u636e\u8fd9\u4e2a\u5047\u8bbe\uff0c\u5982\u679c\u53cd\u8f6c\u540e\u6574\u6570\u6ea2\u51fa\u90a3\u4e48\u5c31\u8fd4\u56de 0\u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u6bcf\u4e00\u6b21\u4ece\u53f3\u4fa7\u63d0\u53d6\u51fa\u6700\u540e\u4e00\u4f4d\u52a0\u5230\u7ed3\u679c\u7684\u53f3\u4fa7\u3002\u6ce8\u610f\u8d1f\u6570 -2147483648 \u5728 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u73af\u5883\u4e0b\u4e0d\u80fd\u53d6\u8d1f\uff0c\u5c06\u4e2d\u95f4\u53d8\u91cf\u58f0\u660e\u4e3a long \u5373\u53ef\u89e3\u51b3\u3002 int reverse ( int x ){ long ret = 0 , testcase = x ; testcase = testcase > 0 ? testcase : - testcase ; while ( testcase ) { ret *= 10 ; ret += testcase % 10 ; testcase /= 10 ; } return (( ret >> 31 ) ? 0 : ret ) * ( x > 0 ? 1 : -1 ); }","title":"7. \u6574\u6570\u53cd\u8f6c"},{"location":"coding/leetcode/7.html#7","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"7. \u6574\u6570\u53cd\u8f6c"},{"location":"coding/leetcode/7.html#_1","text":"\u7ed9\u51fa\u4e00\u4e2a 32 \u4f4d\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u4f60\u9700\u8981\u5c06\u8fd9\u4e2a\u6574\u6570\u4e2d\u6bcf\u4f4d\u4e0a\u7684\u6570\u5b57\u8fdb\u884c\u53cd\u8f6c\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 123 \u8f93\u51fa: 321 \u793a\u4f8b 2\uff1a \u8f93\u5165: -123 \u8f93\u51fa: -321 \u793a\u4f8b 3\uff1a \u8f93\u5165: 120 \u8f93\u51fa: 21 \u6ce8\u610f\uff1a \u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8\u5f97\u4e0b 32 \u4f4d\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5219\u5176\u6570\u503c\u8303\u56f4\u4e3a [\u22122^{31}, 2^{31} \u2212 1] [\u22122^{31}, 2^{31} \u2212 1] \u3002\u8bf7\u6839\u636e\u8fd9\u4e2a\u5047\u8bbe\uff0c\u5982\u679c\u53cd\u8f6c\u540e\u6574\u6570\u6ea2\u51fa\u90a3\u4e48\u5c31\u8fd4\u56de 0\u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/7.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u6bcf\u4e00\u6b21\u4ece\u53f3\u4fa7\u63d0\u53d6\u51fa\u6700\u540e\u4e00\u4f4d\u52a0\u5230\u7ed3\u679c\u7684\u53f3\u4fa7\u3002\u6ce8\u610f\u8d1f\u6570 -2147483648 \u5728 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u73af\u5883\u4e0b\u4e0d\u80fd\u53d6\u8d1f\uff0c\u5c06\u4e2d\u95f4\u53d8\u91cf\u58f0\u660e\u4e3a long \u5373\u53ef\u89e3\u51b3\u3002 int reverse ( int x ){ long ret = 0 , testcase = x ; testcase = testcase > 0 ? testcase : - testcase ; while ( testcase ) { ret *= 10 ; ret += testcase % 10 ; testcase /= 10 ; } return (( ret >> 31 ) ? 0 : ret ) * ( x > 0 ? 1 : -1 ); }","title":"\u9898\u89e3"},{"location":"coding/leetcode/70.html","text":"70. \u722c\u697c\u68af \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u5047\u8bbe\u4f60\u6b63\u5728\u722c\u697c\u68af\u3002\u9700\u8981 n \u9636\u4f60\u624d\u80fd\u5230\u8fbe\u697c\u9876\u3002 \u6bcf\u6b21\u4f60\u53ef\u4ee5\u722c 1 \u6216 2 \u4e2a\u53f0\u9636\u3002\u4f60\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u5462\uff1f \u6ce8\u610f\uff1a\u7ed9\u5b9a n \u662f\u4e00\u4e2a\u6b63\u6574\u6570\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a 2 \u8f93\u51fa\uff1a 2 \u89e3\u91ca\uff1a \u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u3002 1. 1 \u9636 + 1 \u9636 2. 2 \u9636 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a 3 \u8f93\u51fa\uff1a 3 \u89e3\u91ca\uff1a \u6709\u4e09\u79cd\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u3002 1. 1 \u9636 + 1 \u9636 + 1 \u9636 2. 1 \u9636 + 2 \u9636 3. 2 \u9636 + 1 \u9636 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u5b58\u50a8\u4e34\u65f6\u7ed3\u679c\uff0c\u9012\u5f52\u8ba1\u7b97\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int climbStairs_cache ( int n , int ** cache ) { if ( n <= 2 ) return n ; if ( * cache == NULL ) * cache = memset ( malloc ( sizeof ( int ) * n ), 0 , sizeof ( int ) * n ); if ( ! ( * cache )[ n - 1 ]) ( * cache )[ n - 1 ] = climbStairs_cache ( n - 1 , cache ) + climbStairs_cache ( n - 2 , cache ); return ( * cache )[ n - 1 ]; } int climbStairs ( int n ){ int * cache = NULL ; return climbStairs_cache ( n , & cache ); }","title":"70. \u722c\u697c\u68af"},{"location":"coding/leetcode/70.html#70","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"70. \u722c\u697c\u68af"},{"location":"coding/leetcode/70.html#_1","text":"\u5047\u8bbe\u4f60\u6b63\u5728\u722c\u697c\u68af\u3002\u9700\u8981 n \u9636\u4f60\u624d\u80fd\u5230\u8fbe\u697c\u9876\u3002 \u6bcf\u6b21\u4f60\u53ef\u4ee5\u722c 1 \u6216 2 \u4e2a\u53f0\u9636\u3002\u4f60\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u5462\uff1f \u6ce8\u610f\uff1a\u7ed9\u5b9a n \u662f\u4e00\u4e2a\u6b63\u6574\u6570\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a 2 \u8f93\u51fa\uff1a 2 \u89e3\u91ca\uff1a \u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u3002 1. 1 \u9636 + 1 \u9636 2. 2 \u9636 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a 3 \u8f93\u51fa\uff1a 3 \u89e3\u91ca\uff1a \u6709\u4e09\u79cd\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u3002 1. 1 \u9636 + 1 \u9636 + 1 \u9636 2. 1 \u9636 + 2 \u9636 3. 2 \u9636 + 1 \u9636 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/70.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u5b58\u50a8\u4e34\u65f6\u7ed3\u679c\uff0c\u9012\u5f52\u8ba1\u7b97\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int climbStairs_cache ( int n , int ** cache ) { if ( n <= 2 ) return n ; if ( * cache == NULL ) * cache = memset ( malloc ( sizeof ( int ) * n ), 0 , sizeof ( int ) * n ); if ( ! ( * cache )[ n - 1 ]) ( * cache )[ n - 1 ] = climbStairs_cache ( n - 1 , cache ) + climbStairs_cache ( n - 2 , cache ); return ( * cache )[ n - 1 ]; } int climbStairs ( int n ){ int * cache = NULL ; return climbStairs_cache ( n , & cache ); }","title":"\u9898\u89e3"},{"location":"coding/leetcode/779.html","text":"779. \u7b2cK\u4e2a\u8bed\u6cd5\u7b26\u53f7 \u00b6 \u96be\u5ea6\uff1a \u4e2d\u7b49 \u9898\u76ee \u00b6 \u5728\u7b2c\u4e00\u884c\u6211\u4eec\u5199\u4e0a\u4e00\u4e2a 0 \u3002\u63a5\u4e0b\u6765\u7684\u6bcf\u4e00\u884c\uff0c\u5c06\u524d\u4e00\u884c\u4e2d\u7684 0 \u66ff\u6362\u4e3a 01 \uff0c 1 \u66ff\u6362\u4e3a 10 \u3002 \u7ed9\u5b9a\u884c\u6570 N \u548c\u5e8f\u6570 K \uff0c\u8fd4\u56de\u7b2c N \u884c\u4e2d\u7b2c K \u4e2a\u5b57\u7b26\u3002\uff08 K \u4ece 1 \u5f00\u59cb\uff09 \u4f8b\u5b50: \u8f93\u5165: N = 1, K = 1 \u8f93\u51fa: 0 \u8f93\u5165: N = 2, K = 1 \u8f93\u51fa: 0 \u8f93\u5165: N = 2, K = 2 \u8f93\u51fa: 1 \u8f93\u5165: N = 4, K = 5 \u8f93\u51fa: 1 \u89e3\u91ca: \u7b2c\u4e00\u884c: 0 \u7b2c\u4e8c\u884c: 01 \u7b2c\u4e09\u884c: 0110 \u7b2c\u56db\u884c: 01101001 \u6ce8\u610f\uff1a N \u7684\u8303\u56f4 [1, 30] . K \u7684\u8303\u56f4 [1, 2^(N-1)] . Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u6ce8\u610f\u5230\u6bcf\u4e2a\u7ed3\u679c\u5b57\u7b26\u4e32\u53ef\u4ee5\u5206\u4e3a4\u4e2a\u7b49\u957f\u7684\u90e8\u5206\uff0c\u5176\u4e2d\u7b2c1\u30014\u90e8\u5206\u76f8\u540c\uff0c2\u30013\u90e8\u5206\u76f8\u540c\uff0c\u4e24\u7ec4\u7684\u4e8c\u8fdb\u5236\u4e92\u8865\u3002\u540c\u65f6\uff0c\u4efb\u610f\u4e00\u884c\u4ee5\u4e2d\u70b9\u4e3a\u754c\uff0c\u5de6\u53f3\u4e24\u4fa7\u4e92\u8865\u3002\u56e0\u6b64\u53ea\u9700\u8981\u5728\u5de6\u4fa7\u8fdb\u884c\u67e5\u627e\uff0c\u53f3\u4fa7\u90e8\u5206\u53d6\u53cd\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int kthGrammar ( int N , int K ) { if ( N == 1 ) return 0 ; int unit = 1 << ( N - 2 ); return ! ( K <= unit ) ^ kthGrammar ( N - 1 , (( K - 1 ) & ( unit - 1 )) + 1 ); }","title":"779. \u7b2cK\u4e2a\u8bed\u6cd5\u7b26\u53f7"},{"location":"coding/leetcode/779.html#779-k","text":"\u96be\u5ea6\uff1a \u4e2d\u7b49","title":"779. \u7b2cK\u4e2a\u8bed\u6cd5\u7b26\u53f7"},{"location":"coding/leetcode/779.html#_1","text":"\u5728\u7b2c\u4e00\u884c\u6211\u4eec\u5199\u4e0a\u4e00\u4e2a 0 \u3002\u63a5\u4e0b\u6765\u7684\u6bcf\u4e00\u884c\uff0c\u5c06\u524d\u4e00\u884c\u4e2d\u7684 0 \u66ff\u6362\u4e3a 01 \uff0c 1 \u66ff\u6362\u4e3a 10 \u3002 \u7ed9\u5b9a\u884c\u6570 N \u548c\u5e8f\u6570 K \uff0c\u8fd4\u56de\u7b2c N \u884c\u4e2d\u7b2c K \u4e2a\u5b57\u7b26\u3002\uff08 K \u4ece 1 \u5f00\u59cb\uff09 \u4f8b\u5b50: \u8f93\u5165: N = 1, K = 1 \u8f93\u51fa: 0 \u8f93\u5165: N = 2, K = 1 \u8f93\u51fa: 0 \u8f93\u5165: N = 2, K = 2 \u8f93\u51fa: 1 \u8f93\u5165: N = 4, K = 5 \u8f93\u51fa: 1 \u89e3\u91ca: \u7b2c\u4e00\u884c: 0 \u7b2c\u4e8c\u884c: 01 \u7b2c\u4e09\u884c: 0110 \u7b2c\u56db\u884c: 01101001 \u6ce8\u610f\uff1a N \u7684\u8303\u56f4 [1, 30] . K \u7684\u8303\u56f4 [1, 2^(N-1)] . Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/779.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u6ce8\u610f\u5230\u6bcf\u4e2a\u7ed3\u679c\u5b57\u7b26\u4e32\u53ef\u4ee5\u5206\u4e3a4\u4e2a\u7b49\u957f\u7684\u90e8\u5206\uff0c\u5176\u4e2d\u7b2c1\u30014\u90e8\u5206\u76f8\u540c\uff0c2\u30013\u90e8\u5206\u76f8\u540c\uff0c\u4e24\u7ec4\u7684\u4e8c\u8fdb\u5236\u4e92\u8865\u3002\u540c\u65f6\uff0c\u4efb\u610f\u4e00\u884c\u4ee5\u4e2d\u70b9\u4e3a\u754c\uff0c\u5de6\u53f3\u4e24\u4fa7\u4e92\u8865\u3002\u56e0\u6b64\u53ea\u9700\u8981\u5728\u5de6\u4fa7\u8fdb\u884c\u67e5\u627e\uff0c\u53f3\u4fa7\u90e8\u5206\u53d6\u53cd\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int kthGrammar ( int N , int K ) { if ( N == 1 ) return 0 ; int unit = 1 << ( N - 2 ); return ! ( K <= unit ) ^ kthGrammar ( N - 1 , (( K - 1 ) & ( unit - 1 )) + 1 ); }","title":"\u9898\u89e3"},{"location":"coding/leetcode/8.html","text":"8. \u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 (atoi) \u00b6 \u96be\u5ea6\uff1a \u4e2d\u7b49 \u9898\u76ee \u00b6 \u8bf7\u4f60\u6765\u5b9e\u73b0\u4e00\u4e2a atoi \u51fd\u6570\uff0c\u4f7f\u5176\u80fd\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570\u3002 \u9996\u5148\uff0c\u8be5\u51fd\u6570\u4f1a\u6839\u636e\u9700\u8981\u4e22\u5f03\u65e0\u7528\u7684\u5f00\u5934\u7a7a\u683c\u5b57\u7b26\uff0c\u76f4\u5230\u5bfb\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u7684\u5b57\u7b26\u4e3a\u6b62\u3002\u63a5\u4e0b\u6765\u7684\u8f6c\u5316\u89c4\u5219\u5982\u4e0b\uff1a \u5982\u679c\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e3a\u6b63\u6216\u8005\u8d1f\u53f7\u65f6\uff0c\u5219\u5c06\u8be5\u7b26\u53f7\u4e0e\u4e4b\u540e\u9762\u5c3d\u53ef\u80fd\u591a\u7684\u8fde\u7eed\u6570\u5b57\u5b57\u7b26\u7ec4\u5408\u8d77\u6765\uff0c\u5f62\u6210\u4e00\u4e2a\u6709\u7b26\u53f7\u6574\u6570\u3002 \u5047\u5982\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u5219\u76f4\u63a5\u5c06\u5176\u4e0e\u4e4b\u540e\u8fde\u7eed\u7684\u6570\u5b57\u5b57\u7b26\u7ec4\u5408\u8d77\u6765\uff0c\u5f62\u6210\u4e00\u4e2a\u6574\u6570\u3002 \u8be5\u5b57\u7b26\u4e32\u5728\u6709\u6548\u7684\u6574\u6570\u90e8\u5206\u4e4b\u540e\u4e5f\u53ef\u80fd\u4f1a\u5b58\u5728\u591a\u4f59\u7684\u5b57\u7b26\uff0c\u90a3\u4e48\u8fd9\u4e9b\u5b57\u7b26\u53ef\u4ee5\u88ab\u5ffd\u7565\uff0c\u5b83\u4eec\u5bf9\u51fd\u6570\u4e0d\u5e94\u8be5\u9020\u6210\u5f71\u54cd\u3002 \u6ce8\u610f\uff1a\u5047\u5982\u8be5\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u5b57\u7b26\u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u6574\u6570\u5b57\u7b26\u3001\u5b57\u7b26\u4e32\u4e3a\u7a7a\u6216\u5b57\u7b26\u4e32\u4ec5\u5305\u542b\u7a7a\u767d\u5b57\u7b26\u65f6\uff0c\u5219\u4f60\u7684\u51fd\u6570\u4e0d\u9700\u8981\u8fdb\u884c\u8f6c\u6362\uff0c\u5373\u65e0\u6cd5\u8fdb\u884c\u6709\u6548\u8f6c\u6362\u3002 \u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u82e5\u51fd\u6570\u4e0d\u80fd\u8fdb\u884c\u6709\u6548\u7684\u8f6c\u6362\u65f6\uff0c\u8bf7\u8fd4\u56de 0 \u3002 \u63d0\u793a\uff1a \u672c\u9898\u4e2d\u7684\u7a7a\u767d\u5b57\u7b26\u53ea\u5305\u62ec\u7a7a\u683c\u5b57\u7b26 ' ' \u3002 \u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u5927\u5c0f\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u90a3\u4e48\u5176\u6570\u503c\u8303\u56f4\u4e3a [\u22122^{31}, 2^{31} \u2212 1] [\u22122^{31}, 2^{31} \u2212 1] \u3002\u5982\u679c\u6570\u503c\u8d85\u8fc7\u8fd9\u4e2a\u8303\u56f4\uff0c\u8bf7\u8fd4\u56de INT_MAX ( 2^{31} \u2212 1 2^{31} \u2212 1 )\u6216 INT_MIN ( \u22122^{31} \u22122^{31} ) \u3002 \u793a\u4f8b 1: \u8f93\u5165: \"42\" \u8f93\u51fa: 42 \u793a\u4f8b 2: \u8f93\u5165: \" -42\" \u8f93\u51fa: -42 \u89e3\u91ca: \u7b2c\u4e00\u4e2a\u975e\u7a7a\u767d\u5b57\u7b26\u4e3a '-', \u5b83\u662f\u4e00\u4e2a\u8d1f\u53f7\u3002 \u6211\u4eec\u5c3d\u53ef\u80fd\u5c06\u8d1f\u53f7\u4e0e\u540e\u9762\u6240\u6709\u8fde\u7eed\u51fa\u73b0\u7684\u6570\u5b57\u7ec4\u5408\u8d77\u6765\uff0c\u6700\u540e\u5f97\u5230 -42 \u3002 \u793a\u4f8b 3: \u8f93\u5165: \"4193 with words\" \u8f93\u51fa: 4193 \u89e3\u91ca: \u8f6c\u6362\u622a\u6b62\u4e8e\u6570\u5b57 '3' \uff0c\u56e0\u4e3a\u5b83\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e0d\u4e3a\u6570\u5b57\u3002 \u793a\u4f8b 4: \u8f93\u5165: \"words and 987\" \u8f93\u51fa: 0 \u89e3\u91ca: \u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f 'w', \u4f46\u5b83\u4e0d\u662f\u6570\u5b57\u6216\u6b63\u3001\u8d1f\u53f7\u3002 \u56e0\u6b64\u65e0\u6cd5\u6267\u884c\u6709\u6548\u7684\u8f6c\u6362\u3002 \u793a\u4f8b 5: \u8f93\u5165: \"-91283472332\" \u8f93\u51fa: -2147483648 \u89e3\u91ca: \u6570\u5b57 \"-91283472332\" \u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u3002 \u56e0\u6b64\u8fd4\u56de INT_MIN (\u2212231) \u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u6ce8\u610f\u4e00\u4e2a\u6709\u6548\u7684\u6570\u5b57\u5b57\u7b26\u4e32\u53ef\u4ee5\u4ee5 0-9 \u3001 '-' \u3001 '+' \u548c\u7a7a\u683c ' ' \u5f00\u5934\u3002 \u4e3a\u4e86\u907f\u514d\u6ea2\u51fa\uff0c\u5e94\u5f53\u4f7f\u7528 long \u7c7b\u578b\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int myAtoi ( char * str ){ int flag = 0 ; char * cur = str ; while ( * cur && * cur == ' ' ) cur ++ ; if ( * cur == '-' || * cur == '+' ) flag = * ( cur ++ ) - '+' ; if ( * cur < '0' || * cur > '9' ) return 0 ; long ret = 0 ; while ( * cur >= '0' && * cur <= '9' ) { ret *= 10 ; ret += * cur - '0' ; cur ++ ; if ( ret >= - ( long ) INT_MIN || ( ret == ( long ) INT_MAX && ! flag )) return flag ? INT_MIN : INT_MAX ; } return flag ? - ret : ret ; }","title":"8. \u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 (atoi)"},{"location":"coding/leetcode/8.html#8-atoi","text":"\u96be\u5ea6\uff1a \u4e2d\u7b49","title":"8. \u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 (atoi)"},{"location":"coding/leetcode/8.html#_1","text":"\u8bf7\u4f60\u6765\u5b9e\u73b0\u4e00\u4e2a atoi \u51fd\u6570\uff0c\u4f7f\u5176\u80fd\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570\u3002 \u9996\u5148\uff0c\u8be5\u51fd\u6570\u4f1a\u6839\u636e\u9700\u8981\u4e22\u5f03\u65e0\u7528\u7684\u5f00\u5934\u7a7a\u683c\u5b57\u7b26\uff0c\u76f4\u5230\u5bfb\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u7684\u5b57\u7b26\u4e3a\u6b62\u3002\u63a5\u4e0b\u6765\u7684\u8f6c\u5316\u89c4\u5219\u5982\u4e0b\uff1a \u5982\u679c\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e3a\u6b63\u6216\u8005\u8d1f\u53f7\u65f6\uff0c\u5219\u5c06\u8be5\u7b26\u53f7\u4e0e\u4e4b\u540e\u9762\u5c3d\u53ef\u80fd\u591a\u7684\u8fde\u7eed\u6570\u5b57\u5b57\u7b26\u7ec4\u5408\u8d77\u6765\uff0c\u5f62\u6210\u4e00\u4e2a\u6709\u7b26\u53f7\u6574\u6570\u3002 \u5047\u5982\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u5219\u76f4\u63a5\u5c06\u5176\u4e0e\u4e4b\u540e\u8fde\u7eed\u7684\u6570\u5b57\u5b57\u7b26\u7ec4\u5408\u8d77\u6765\uff0c\u5f62\u6210\u4e00\u4e2a\u6574\u6570\u3002 \u8be5\u5b57\u7b26\u4e32\u5728\u6709\u6548\u7684\u6574\u6570\u90e8\u5206\u4e4b\u540e\u4e5f\u53ef\u80fd\u4f1a\u5b58\u5728\u591a\u4f59\u7684\u5b57\u7b26\uff0c\u90a3\u4e48\u8fd9\u4e9b\u5b57\u7b26\u53ef\u4ee5\u88ab\u5ffd\u7565\uff0c\u5b83\u4eec\u5bf9\u51fd\u6570\u4e0d\u5e94\u8be5\u9020\u6210\u5f71\u54cd\u3002 \u6ce8\u610f\uff1a\u5047\u5982\u8be5\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u5b57\u7b26\u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u6574\u6570\u5b57\u7b26\u3001\u5b57\u7b26\u4e32\u4e3a\u7a7a\u6216\u5b57\u7b26\u4e32\u4ec5\u5305\u542b\u7a7a\u767d\u5b57\u7b26\u65f6\uff0c\u5219\u4f60\u7684\u51fd\u6570\u4e0d\u9700\u8981\u8fdb\u884c\u8f6c\u6362\uff0c\u5373\u65e0\u6cd5\u8fdb\u884c\u6709\u6548\u8f6c\u6362\u3002 \u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u82e5\u51fd\u6570\u4e0d\u80fd\u8fdb\u884c\u6709\u6548\u7684\u8f6c\u6362\u65f6\uff0c\u8bf7\u8fd4\u56de 0 \u3002 \u63d0\u793a\uff1a \u672c\u9898\u4e2d\u7684\u7a7a\u767d\u5b57\u7b26\u53ea\u5305\u62ec\u7a7a\u683c\u5b57\u7b26 ' ' \u3002 \u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u5927\u5c0f\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u90a3\u4e48\u5176\u6570\u503c\u8303\u56f4\u4e3a [\u22122^{31}, 2^{31} \u2212 1] [\u22122^{31}, 2^{31} \u2212 1] \u3002\u5982\u679c\u6570\u503c\u8d85\u8fc7\u8fd9\u4e2a\u8303\u56f4\uff0c\u8bf7\u8fd4\u56de INT_MAX ( 2^{31} \u2212 1 2^{31} \u2212 1 )\u6216 INT_MIN ( \u22122^{31} \u22122^{31} ) \u3002 \u793a\u4f8b 1: \u8f93\u5165: \"42\" \u8f93\u51fa: 42 \u793a\u4f8b 2: \u8f93\u5165: \" -42\" \u8f93\u51fa: -42 \u89e3\u91ca: \u7b2c\u4e00\u4e2a\u975e\u7a7a\u767d\u5b57\u7b26\u4e3a '-', \u5b83\u662f\u4e00\u4e2a\u8d1f\u53f7\u3002 \u6211\u4eec\u5c3d\u53ef\u80fd\u5c06\u8d1f\u53f7\u4e0e\u540e\u9762\u6240\u6709\u8fde\u7eed\u51fa\u73b0\u7684\u6570\u5b57\u7ec4\u5408\u8d77\u6765\uff0c\u6700\u540e\u5f97\u5230 -42 \u3002 \u793a\u4f8b 3: \u8f93\u5165: \"4193 with words\" \u8f93\u51fa: 4193 \u89e3\u91ca: \u8f6c\u6362\u622a\u6b62\u4e8e\u6570\u5b57 '3' \uff0c\u56e0\u4e3a\u5b83\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e0d\u4e3a\u6570\u5b57\u3002 \u793a\u4f8b 4: \u8f93\u5165: \"words and 987\" \u8f93\u51fa: 0 \u89e3\u91ca: \u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f 'w', \u4f46\u5b83\u4e0d\u662f\u6570\u5b57\u6216\u6b63\u3001\u8d1f\u53f7\u3002 \u56e0\u6b64\u65e0\u6cd5\u6267\u884c\u6709\u6548\u7684\u8f6c\u6362\u3002 \u793a\u4f8b 5: \u8f93\u5165: \"-91283472332\" \u8f93\u51fa: -2147483648 \u89e3\u91ca: \u6570\u5b57 \"-91283472332\" \u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u3002 \u56e0\u6b64\u8fd4\u56de INT_MIN (\u2212231) \u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/8.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u6ce8\u610f\u4e00\u4e2a\u6709\u6548\u7684\u6570\u5b57\u5b57\u7b26\u4e32\u53ef\u4ee5\u4ee5 0-9 \u3001 '-' \u3001 '+' \u548c\u7a7a\u683c ' ' \u5f00\u5934\u3002 \u4e3a\u4e86\u907f\u514d\u6ea2\u51fa\uff0c\u5e94\u5f53\u4f7f\u7528 long \u7c7b\u578b\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int myAtoi ( char * str ){ int flag = 0 ; char * cur = str ; while ( * cur && * cur == ' ' ) cur ++ ; if ( * cur == '-' || * cur == '+' ) flag = * ( cur ++ ) - '+' ; if ( * cur < '0' || * cur > '9' ) return 0 ; long ret = 0 ; while ( * cur >= '0' && * cur <= '9' ) { ret *= 10 ; ret += * cur - '0' ; cur ++ ; if ( ret >= - ( long ) INT_MIN || ( ret == ( long ) INT_MAX && ! flag )) return flag ? INT_MIN : INT_MAX ; } return flag ? - ret : ret ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/88.html","text":"88. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u4f60\u4e24\u4e2a\u6709\u5e8f\u6574\u6570\u6570\u7ec4 nums1 \u548c nums2 \uff0c\u8bf7\u4f60\u5c06 nums2 \u5408\u5e76\u5230 nums1 \u4e2d\uff0c\u4f7f nums1 \u6210\u4e3a\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002 \u8bf4\u660e: \u521d\u59cb\u5316 nums1 \u548c nums2 \u7684\u5143\u7d20\u6570\u91cf\u5206\u522b\u4e3a m \u548c n \u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe nums1 \u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff08\u7a7a\u95f4\u5927\u5c0f\u5927\u4e8e\u6216\u7b49\u4e8e m + n \uff09\u6765\u4fdd\u5b58 nums2 \u4e2d\u7684\u5143\u7d20\u3002 \u793a\u4f8b\uff1a \u8f93\u5165: nums1 = [1,2,3,0,0,0], m = 3 nums2 = [2,5,6], n = 3 \u8f93\u51fa: [1,2,2,3,5,6] Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u76f4\u63a5\u5728 nums1 \u7684\u5185\u5b58\u7a7a\u95f4\u4e0a\u4ece\u540e\u5411\u524d\u539f\u4f4d\u5408\u5e76\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a #define MAX(x, y) (x > y ? x : y) void merge ( int * nums1 , int nums1Size , int m , int * nums2 , int nums2Size , int n ){ int x = m - 1 , y = n - 1 ; while ( y >= 0 && x >= 0 ) { nums1 [ x + y + 1 ] = MAX ( nums1 [ x ], nums2 [ y ]); if ( nums1 [ x ] > nums2 [ y ]) x -- ; else y -- ; } if ( y >= 0 ) memcpy ( nums1 , nums2 , sizeof ( int ) * ( y + 1 )); }","title":"88. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4"},{"location":"coding/leetcode/88.html#88","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"88. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4"},{"location":"coding/leetcode/88.html#_1","text":"\u7ed9\u4f60\u4e24\u4e2a\u6709\u5e8f\u6574\u6570\u6570\u7ec4 nums1 \u548c nums2 \uff0c\u8bf7\u4f60\u5c06 nums2 \u5408\u5e76\u5230 nums1 \u4e2d\uff0c\u4f7f nums1 \u6210\u4e3a\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002 \u8bf4\u660e: \u521d\u59cb\u5316 nums1 \u548c nums2 \u7684\u5143\u7d20\u6570\u91cf\u5206\u522b\u4e3a m \u548c n \u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe nums1 \u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff08\u7a7a\u95f4\u5927\u5c0f\u5927\u4e8e\u6216\u7b49\u4e8e m + n \uff09\u6765\u4fdd\u5b58 nums2 \u4e2d\u7684\u5143\u7d20\u3002 \u793a\u4f8b\uff1a \u8f93\u5165: nums1 = [1,2,3,0,0,0], m = 3 nums2 = [2,5,6], n = 3 \u8f93\u51fa: [1,2,2,3,5,6] Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/88.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u76f4\u63a5\u5728 nums1 \u7684\u5185\u5b58\u7a7a\u95f4\u4e0a\u4ece\u540e\u5411\u524d\u539f\u4f4d\u5408\u5e76\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a #define MAX(x, y) (x > y ? x : y) void merge ( int * nums1 , int nums1Size , int m , int * nums2 , int nums2Size , int n ){ int x = m - 1 , y = n - 1 ; while ( y >= 0 && x >= 0 ) { nums1 [ x + y + 1 ] = MAX ( nums1 [ x ], nums2 [ y ]); if ( nums1 [ x ] > nums2 [ y ]) x -- ; else y -- ; } if ( y >= 0 ) memcpy ( nums1 , nums2 , sizeof ( int ) * ( y + 1 )); }","title":"\u9898\u89e3"},{"location":"coding/leetcode/9.html","text":"9. \u56de\u6587\u6570 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u5224\u65ad\u4e00\u4e2a\u6574\u6570\u662f\u5426\u662f\u56de\u6587\u6570\u3002\u56de\u6587\u6570\u662f\u6307\u6b63\u5e8f\uff08\u4ece\u5de6\u5411\u53f3\uff09\u548c\u5012\u5e8f\uff08\u4ece\u53f3\u5411\u5de6\uff09\u8bfb\u90fd\u662f\u4e00\u6837\u7684\u6574\u6570\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 121 \u8f93\u51fa: true \u793a\u4f8b 2\uff1a \u8f93\u5165: -121 \u8f93\u51fa: false \u89e3\u91ca: \u4ece\u5de6\u5411\u53f3\u8bfb, \u4e3a -121 \u3002 \u4ece\u53f3\u5411\u5de6\u8bfb, \u4e3a 121- \u3002\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002 \u793a\u4f8b 3\uff1a \u8f93\u5165: 10 \u8f93\u51fa: false \u89e3\u91ca: \u4ece\u53f3\u5411\u5de6\u8bfb, \u4e3a 01 \u3002\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002 \u8fdb\u9636\uff1a \u4f60\u80fd\u4e0d\u5c06\u6574\u6570\u8f6c\u4e3a\u5b57\u7b26\u4e32\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5c0f\u4e8e0\u7684\u6570\u5fc5\u7136\u4e0d\u662f\u56de\u6587\u6570\uff1b \u5bf9\u4e8e\u975e\u8d1f\u6574\u6570\uff0c\u53ea\u9700\u8981\u5224\u65ad\u6309\u4f4d\u53cd\u8f6c\u540e\u7684\u6570\u503c\u4e0e\u539f\u6570\u503c\u662f\u5426\u76f8\u7b49\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a bool isPalindrome ( int x ){ if ( x < 0 ) return false ; long transformed = 0 , original = x ; while ( x ) { transformed *= 10 ; transformed += x % 10 ; x /= 10 ; } return transformed == original ; }","title":"9. \u56de\u6587\u6570"},{"location":"coding/leetcode/9.html#9","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"9. \u56de\u6587\u6570"},{"location":"coding/leetcode/9.html#_1","text":"\u5224\u65ad\u4e00\u4e2a\u6574\u6570\u662f\u5426\u662f\u56de\u6587\u6570\u3002\u56de\u6587\u6570\u662f\u6307\u6b63\u5e8f\uff08\u4ece\u5de6\u5411\u53f3\uff09\u548c\u5012\u5e8f\uff08\u4ece\u53f3\u5411\u5de6\uff09\u8bfb\u90fd\u662f\u4e00\u6837\u7684\u6574\u6570\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 121 \u8f93\u51fa: true \u793a\u4f8b 2\uff1a \u8f93\u5165: -121 \u8f93\u51fa: false \u89e3\u91ca: \u4ece\u5de6\u5411\u53f3\u8bfb, \u4e3a -121 \u3002 \u4ece\u53f3\u5411\u5de6\u8bfb, \u4e3a 121- \u3002\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002 \u793a\u4f8b 3\uff1a \u8f93\u5165: 10 \u8f93\u51fa: false \u89e3\u91ca: \u4ece\u53f3\u5411\u5de6\u8bfb, \u4e3a 01 \u3002\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002 \u8fdb\u9636\uff1a \u4f60\u80fd\u4e0d\u5c06\u6574\u6570\u8f6c\u4e3a\u5b57\u7b26\u4e32\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/9.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5c0f\u4e8e0\u7684\u6570\u5fc5\u7136\u4e0d\u662f\u56de\u6587\u6570\uff1b \u5bf9\u4e8e\u975e\u8d1f\u6574\u6570\uff0c\u53ea\u9700\u8981\u5224\u65ad\u6309\u4f4d\u53cd\u8f6c\u540e\u7684\u6570\u503c\u4e0e\u539f\u6570\u503c\u662f\u5426\u76f8\u7b49\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a bool isPalindrome ( int x ){ if ( x < 0 ) return false ; long transformed = 0 , original = x ; while ( x ) { transformed *= 10 ; transformed += x % 10 ; x /= 10 ; } return transformed == original ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/98.html","text":"98. \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811 \u00b6 \u96be\u5ea6\uff1a \u4e2d\u7b49 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5176\u662f\u5426\u662f\u4e00\u4e2a\u6709\u6548\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u5047\u8bbe\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u5177\u6709\u5982\u4e0b\u7279\u5f81\uff1a \u8282\u70b9\u7684\u5de6\u5b50\u6811\u53ea\u5305\u542b\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u6570\u3002 \u8282\u70b9\u7684\u53f3\u5b50\u6811\u53ea\u5305\u542b\u5927\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u6570\u3002 \u6240\u6709\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u81ea\u8eab\u5fc5\u987b\u4e5f\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 2 / \\ 1 3 \u8f93\u51fa: true \u793a\u4f8b 2\uff1a \u8f93\u5165: 5 / \\ 1 4 / \\ 3 6 \u8f93\u51fa: false \u89e3\u91ca: \u8f93\u5165\u4e3a: [5,1,4,null,null,3,6]\u3002 \u6839\u8282\u70b9\u7684\u503c\u4e3a 5 \uff0c\u4f46\u662f\u5176\u53f3\u5b50\u8282\u70b9\u503c\u4e3a 4 \u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5c06\u4e8c\u53c9\u67e5\u627e\u6811\u4e2d\u5e8f\u5c55\u5f00\u4e3a\u94fe\u8868\uff0c\u5224\u65ad\u94fe\u8868\u662f\u5426\u662f\u6709\u5e8f\u7684\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for a binary tree node. * struct TreeNode { * int val; * struct TreeNode *left; * struct TreeNode *right; * }; */ struct ListNode * insert ( struct ListNode * List , int val ) { struct ListNode * ret = malloc ( sizeof ( struct ListNode )); ret -> val = val ; ret -> next = List ; return ret ; } struct ListNode * toList ( struct TreeNode * root , struct ListNode * List ) { if ( root == NULL ) return List ; List = toList ( root -> right , List ); List = insert ( List , root -> val ); List = toList ( root -> left , List ); return List ; } bool isValidBST ( struct TreeNode * root ){ if ( root == NULL ) return true ; struct ListNode * rec = toList ( root , NULL ), * cur = rec ; do { if ( cur -> next == NULL ) break ; if ( cur -> val >= cur -> next -> val ) return false ; cur = cur -> next ; } while ( true ); return true ; }","title":"98. \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811"},{"location":"coding/leetcode/98.html#98","text":"\u96be\u5ea6\uff1a \u4e2d\u7b49","title":"98. \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811"},{"location":"coding/leetcode/98.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5176\u662f\u5426\u662f\u4e00\u4e2a\u6709\u6548\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u5047\u8bbe\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u5177\u6709\u5982\u4e0b\u7279\u5f81\uff1a \u8282\u70b9\u7684\u5de6\u5b50\u6811\u53ea\u5305\u542b\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u6570\u3002 \u8282\u70b9\u7684\u53f3\u5b50\u6811\u53ea\u5305\u542b\u5927\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u6570\u3002 \u6240\u6709\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u81ea\u8eab\u5fc5\u987b\u4e5f\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 2 / \\ 1 3 \u8f93\u51fa: true \u793a\u4f8b 2\uff1a \u8f93\u5165: 5 / \\ 1 4 / \\ 3 6 \u8f93\u51fa: false \u89e3\u91ca: \u8f93\u5165\u4e3a: [5,1,4,null,null,3,6]\u3002 \u6839\u8282\u70b9\u7684\u503c\u4e3a 5 \uff0c\u4f46\u662f\u5176\u53f3\u5b50\u8282\u70b9\u503c\u4e3a 4 \u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/98.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5c06\u4e8c\u53c9\u67e5\u627e\u6811\u4e2d\u5e8f\u5c55\u5f00\u4e3a\u94fe\u8868\uff0c\u5224\u65ad\u94fe\u8868\u662f\u5426\u662f\u6709\u5e8f\u7684\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for a binary tree node. * struct TreeNode { * int val; * struct TreeNode *left; * struct TreeNode *right; * }; */ struct ListNode * insert ( struct ListNode * List , int val ) { struct ListNode * ret = malloc ( sizeof ( struct ListNode )); ret -> val = val ; ret -> next = List ; return ret ; } struct ListNode * toList ( struct TreeNode * root , struct ListNode * List ) { if ( root == NULL ) return List ; List = toList ( root -> right , List ); List = insert ( List , root -> val ); List = toList ( root -> left , List ); return List ; } bool isValidBST ( struct TreeNode * root ){ if ( root == NULL ) return true ; struct ListNode * rec = toList ( root , NULL ), * cur = rec ; do { if ( cur -> next == NULL ) break ; if ( cur -> val >= cur -> next -> val ) return false ; cur = cur -> next ; } while ( true ); return true ; }","title":"\u9898\u89e3"},{"location":"coding/python/killable-thread.html","text":"Python\u5173\u95ed\u7ebf\u7a0b \u00b6 \u4f7f\u7528 PyThreadState_SetAsyncExc \u51fd\u6570\u5728\u5b50\u7ebf\u7a0b\u4e2d\u5f15\u53d1\u5f02\u5e38\uff0c\u4ece\u800c\u4f7f\u7ebf\u7a0b\u63d0\u524d\u7ed3\u675f\u3002 \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a import threading import ctypes import time class thread_with_exception ( threading . Thread ): def __init__ ( self , name ): threading . Thread . __init__ ( self ) self . name = name def run ( self ): # target function of the thread class try : while True : print ( 'running ' + self . name ) finally : print ( 'ended' ) def get_id ( self ): # returns id of the respective thread if hasattr ( self , '_thread_id' ): return self . _thread_id for id , thread in threading . _active . items (): if thread is self : return id def raise_exception ( self ): thread_id = self . get_id () res = ctypes . pythonapi . PyThreadState_SetAsyncExc ( thread_id , ctypes . py_object ( SystemExit )) if res > 1 : ctypes . pythonapi . PyThreadState_SetAsyncExc ( thread_id , 0 ) print ( 'Exception raise failure' ) t1 = thread_with_exception ( 'Thread 1' ) t1 . start () time . sleep ( 2 ) t1 . raise_exception () t1 . join () \u628a run() \u4e2d\u6267\u884c\u7684\u64cd\u4f5c\u4ee5\u53c2\u6570\u7684\u5f62\u5f0f\u4f20\u9012\uff1a class KillableThread ( threading . Thread ): \"\"\" A thread class extending threading.Thread, provides a kill() method to stop the thread and a getResult() method to get the return value of the thread. \"\"\" def __init__ ( self , func : Callable , * args , ** kwargs ): super () . __init__ () self . func : Callable = func self . funcArg : dict = kwargs self . funcTup : Tuple = args self . result : Any = None self . exception : Any = None def run ( self ): \"\"\" Executes the function here \"\"\" try : self . result = self . func ( * self . funcTup , ** self . funcArg ) except BaseException as e : self . exception = e def get_id ( self ): \"\"\" Get the id of the thread \"\"\" if hasattr ( self , '_thread_id' ): return self . _thread_id for id , thread in threading . _active . items (): if thread is self : return id def kill ( self ): \"\"\" Stops the thread \"\"\" thread_id = self . get_id () res = ctypes . pythonapi . PyThreadState_SetAsyncExc ( thread_id , ctypes . py_object ( SystemExit )) if res > 1 : ctypes . pythonapi . PyThreadState_SetAsyncExc ( thread_id , 0 ) print ( 'Exception raise failure' ) def getResult ( self ): if self . exception is None : return self . result else : raise self . exception \u6765\u6e90\uff1a https://www.geeksforgeeks.org/python-different-ways-to-kill-a-thread","title":"\u5173\u95ed\u8fd0\u884c\u7684\u7ebf\u7a0b"},{"location":"coding/python/killable-thread.html#python","text":"\u4f7f\u7528 PyThreadState_SetAsyncExc \u51fd\u6570\u5728\u5b50\u7ebf\u7a0b\u4e2d\u5f15\u53d1\u5f02\u5e38\uff0c\u4ece\u800c\u4f7f\u7ebf\u7a0b\u63d0\u524d\u7ed3\u675f\u3002 \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a import threading import ctypes import time class thread_with_exception ( threading . Thread ): def __init__ ( self , name ): threading . Thread . __init__ ( self ) self . name = name def run ( self ): # target function of the thread class try : while True : print ( 'running ' + self . name ) finally : print ( 'ended' ) def get_id ( self ): # returns id of the respective thread if hasattr ( self , '_thread_id' ): return self . _thread_id for id , thread in threading . _active . items (): if thread is self : return id def raise_exception ( self ): thread_id = self . get_id () res = ctypes . pythonapi . PyThreadState_SetAsyncExc ( thread_id , ctypes . py_object ( SystemExit )) if res > 1 : ctypes . pythonapi . PyThreadState_SetAsyncExc ( thread_id , 0 ) print ( 'Exception raise failure' ) t1 = thread_with_exception ( 'Thread 1' ) t1 . start () time . sleep ( 2 ) t1 . raise_exception () t1 . join () \u628a run() \u4e2d\u6267\u884c\u7684\u64cd\u4f5c\u4ee5\u53c2\u6570\u7684\u5f62\u5f0f\u4f20\u9012\uff1a class KillableThread ( threading . Thread ): \"\"\" A thread class extending threading.Thread, provides a kill() method to stop the thread and a getResult() method to get the return value of the thread. \"\"\" def __init__ ( self , func : Callable , * args , ** kwargs ): super () . __init__ () self . func : Callable = func self . funcArg : dict = kwargs self . funcTup : Tuple = args self . result : Any = None self . exception : Any = None def run ( self ): \"\"\" Executes the function here \"\"\" try : self . result = self . func ( * self . funcTup , ** self . funcArg ) except BaseException as e : self . exception = e def get_id ( self ): \"\"\" Get the id of the thread \"\"\" if hasattr ( self , '_thread_id' ): return self . _thread_id for id , thread in threading . _active . items (): if thread is self : return id def kill ( self ): \"\"\" Stops the thread \"\"\" thread_id = self . get_id () res = ctypes . pythonapi . PyThreadState_SetAsyncExc ( thread_id , ctypes . py_object ( SystemExit )) if res > 1 : ctypes . pythonapi . PyThreadState_SetAsyncExc ( thread_id , 0 ) print ( 'Exception raise failure' ) def getResult ( self ): if self . exception is None : return self . result else : raise self . exception \u6765\u6e90\uff1a https://www.geeksforgeeks.org/python-different-ways-to-kill-a-thread","title":"Python\u5173\u95ed\u7ebf\u7a0b"},{"location":"math/index.html","text":"\u6570\u5b66 \u00b6 \u4ee5\u4e0b\u6574\u7406\u4e86\u6570\u5b66\u8bfe\u4e0a\u7684\u5185\u5bb9 \u5fae\u79ef\u5206 \u7ebf\u6027\u4ee3\u6570 \u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1 \u8fd0\u7b79\u5b66 \u5bf9\u7b56\u3001\u51b3\u7b56\u4e0e\u6392\u961f\u8bba \u52a8\u6001\u7cfb\u7edf\u5206\u6790\u4e0e\u63a7\u5236","title":"\u76ee\u5f55"},{"location":"math/index.html#_1","text":"\u4ee5\u4e0b\u6574\u7406\u4e86\u6570\u5b66\u8bfe\u4e0a\u7684\u5185\u5bb9 \u5fae\u79ef\u5206 \u7ebf\u6027\u4ee3\u6570 \u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1 \u8fd0\u7b79\u5b66 \u5bf9\u7b56\u3001\u51b3\u7b56\u4e0e\u6392\u961f\u8bba \u52a8\u6001\u7cfb\u7edf\u5206\u6790\u4e0e\u63a7\u5236","title":"\u6570\u5b66"},{"location":"math/queue-theory/index.html","text":"\u5bf9\u7b56\u3001\u51b3\u7b56\u4e0e\u6392\u961f\u8bba \u00b6 \u8bfe\u7a0b\u76ee\u5f55\uff1a Chapter 1\uff0c Chapter 2\uff0c Chapter 3\uff0c Chapter 4\uff0c Chapter 5\uff0c Chapter 6\uff0c Chapter 7\uff0c Chapter 8\uff0c Chapter 9\uff0c Chapter 10\uff0c Chapter 11\uff0c Chapter 12 \uff0c\u5e38\u89c1\u7684\u6392\u961f\u6a21\u578b","title":"\u76ee\u5f55"},{"location":"math/queue-theory/index.html#_1","text":"\u8bfe\u7a0b\u76ee\u5f55\uff1a Chapter 1\uff0c Chapter 2\uff0c Chapter 3\uff0c Chapter 4\uff0c Chapter 5\uff0c Chapter 6\uff0c Chapter 7\uff0c Chapter 8\uff0c Chapter 9\uff0c Chapter 10\uff0c Chapter 11\uff0c Chapter 12 \uff0c\u5e38\u89c1\u7684\u6392\u961f\u6a21\u578b","title":"\u5bf9\u7b56\u3001\u51b3\u7b56\u4e0e\u6392\u961f\u8bba"},{"location":"math/queue-theory/chapter-12.html","text":"\u5e38\u89c1\u6392\u961f\u6a21\u578b \u00b6 \u4e00\u4e2a\u6392\u961f\u6a21\u578b\u4e3b\u8981\u7531\u4ee5\u4e0b\u90e8\u5206\u7ec4\u6210 \u987e\u5ba2\uff08\u5b9e\u4f53\uff09\u5904\u7406 \u5b9e\u4f53\u6392\u961f\u7b49\u5f85\u5904\u7406\uff08\u7cfb\u7edf\u7684\u6392\u961f\u7b56\u7565\u53ef\u80fd\u4e0d\u540c\uff0c\u635f\u5931\u5236\u4e0d\u5141\u8bb8\u6392\u961f\u3001\u6df7\u5408\u5236\u5141\u8bb8\u6392\u6709\u9650\u957f\u5ea6\u7684\u961f\u5217\uff09 \u5b9e\u4f53\u5904\u7406\u5b8c\u6bd5\uff0c\u79bb\u5f00\u7cfb\u7edf \u6392\u961f\u6a21\u578b\u7684\u63cf\u8ff0 \u00b6 \u8fdb\u5165\u7cfb\u7edf \u00b6 \u5047\u8bbe\u8fdb\u5165\u7cfb\u7edf\u7684\u5b9e\u4f53\u6570\u91cf\u65e0\u9650\u3002\u8003\u5bdf\u76f8\u90bb\u4e24\u4e2a\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\u7684\u65f6\u95f4\u5dee\uff1a \u5bf9\u4e8e\u5b9a\u957f\u5206\u5e03\uff0c\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\u7684\u65f6\u95f4\u5dee\u4e3a\u5e38\u91cf t t \uff0c t t \u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u4e3a\uff1a f(t; \\alpha)=\\left\\{ \\begin{aligned} & 1 & t=\\alpha \\\\ & 0 & t\\not =\\alpha \\end{aligned} \\right . f(t; \\alpha)=\\left\\{ \\begin{aligned} & 1 & t=\\alpha \\\\ & 0 & t\\not =\\alpha \\end{aligned} \\right . Poisson \u6d41\uff0c\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\u7684\u65f6\u95f4\u5dee\u72ec\u7acb\u540c\u5206\u5e03\uff0c\u670d\u4ece\u53c2\u6570\u4e3a \\lambda \\lambda \u7684\u6307\u6570\u5206\u5e03 f_{\\xi_i}(t; \\lambda)=\\left\\{ \\begin{aligned} & \\lambda e^{-\\lambda t} & t\\geq 0 \\\\ & 0 & t < 0 \\end{aligned} \\right . f_{\\xi_i}(t; \\lambda)=\\left\\{ \\begin{aligned} & \\lambda e^{-\\lambda t} & t\\geq 0 \\\\ & 0 & t < 0 \\end{aligned} \\right . Erlang \u5206\u5e03\uff0c\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\u7684\u65f6\u95f4\u5dee\u72ec\u7acb\u540c\u5206\u5e03\uff0c\u670d\u4ece\u5982\u4e0b\u516c\u5f0f\u6240\u793a\u7684\u5206\u5e03\u3002\u82e5\u67d0\u4e2a\u7cfb\u7edf\u4e2d\u6709 K K \u4e2a\u5e76\u8054\u7684\u670d\u52a1\u53f0\uff0c\u8f93\u5165\u5b9e\u4f53\u4e3a Poisson \u6d41\uff0c\u5219\u7b2c K K \u4e2a\u670d\u52a1\u53f0\u7684\u987e\u5ba2\u6d41\u4e3a Erlang \u6d41\uff0c\u524d\u9762\u6240\u6709 K - 1 K - 1 \u4e2a\u670d\u52a1\u53f0\u5728\u7b2c\u4e00\u4e2a\u5b9e\u4f53\u5230\u8fbe\u4ee5\u540e\u7684\u8f93\u5165\u6d41\u540c\u6837\u4e3a Erlang \u6d41\u3002 f(t; \\lambda, K)=\\left\\{ \\begin{aligned} & \\frac{\\lambda(\\lambda t)^{K-1}}{(K-1)!} & t\\geq 0 \\\\ & 0 & t < 0 \\end{aligned} \\right . f(t; \\lambda, K)=\\left\\{ \\begin{aligned} & \\frac{\\lambda(\\lambda t)^{K-1}}{(K-1)!} & t\\geq 0 \\\\ & 0 & t < 0 \\end{aligned} \\right . \u5b9e\u4f53\u6392\u961f\u4e0e\u5904\u7406 \u00b6 \u7cfb\u7edf\u4e2d\u53ef\u80fd\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u670d\u52a1\u53f0\u3002\u5728\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u670d\u52a1\u53f0\u90fd\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u65f6\uff0c\u65b0\u8fdb\u5165\u7684\u5b9e\u4f53\u65e0\u6cd5\u7acb\u5373\u8fdb\u884c\u5904\u7406\uff0c\u800c\u662f\u8fdb\u5165\u961f\u5217\u6216\u76f4\u63a5\u79bb\u5f00\uff0c\u53d6\u51b3\u4e8e\u7cfb\u7edf\u7684\u6392\u961f\u7b56\u7565\u3002\u6392\u961f\u7b56\u7565\u53ef\u4ee5\u5206\u4e3a\u635f\u5931\u5236\u3001\u7b49\u5f85\u5236\u4e0e\u6df7\u5408\u5236\u3002 \u5728\u635f\u5931\u5236\u7cfb\u7edf\u4e2d\uff0c\u5982\u679c\u65b0\u8fdb\u5165\u7684\u5b9e\u4f53\u4e0d\u80fd\u88ab\u7acb\u5373\u5904\u7406\uff0c\u5219\u4f1a\u79bb\u5f00\u7cfb\u7edf\u3002 \u5728\u7b49\u5f85\u5236\u7cfb\u7edf\u4e2d\uff0c\u5982\u679c\u65b0\u8fdb\u5165\u7684\u5b9e\u4f53\u4e0d\u80fd\u88ab\u7acb\u5373\u5904\u7406\uff0c\u5219\u4f1a\u5728\u961f\u5217\u4e2d\u7b49\u5f85\uff0c\u76f4\u5230\u88ab\u5904\u7406\u3002 \u5728\u6df7\u5408\u5236\u7cfb\u7edf\u4e2d\uff0c\u5982\u679c\u65b0\u8fdb\u5165\u7684\u5b9e\u4f53\u4e0d\u80fd\u88ab\u7acb\u5373\u5904\u7406\u4e14\u6b64\u65f6\u7684\u961f\u5217\u957f\u5ea6\u5927\u4e8e\u67d0\u4e00\u5e38\u6570\u503c\uff0c\u5219\u4f1a\u79bb\u5f00\u7cfb\u7edf\uff0c\u5426\u5219\u4f1a\u8fdb\u5165\u961f\u5217\u7b49\u5f85\u3002 \u5b9e\u4f53\u5728\u6392\u961f\u8fc7\u7a0b\u4e2d\u7684\u884c\u4e3a\u53ef\u4ee5\u5206\u4e3a\u5982\u4e0b\u7c7b\u578b\uff1a \u79bb\u5f00\uff1a\u5f53\u5b9e\u4f53\u5f97\u77e5\u9700\u8981\u7b49\u5f85\u6216\u6ca1\u6709\u8010\u5fc3\u7ee7\u7eed\u7b49\u5f85\u65f6\uff0c\u5b9e\u4f53\u53ef\u80fd\u9000\u51fa\u961f\u5217 \u53d8\u6362\uff1a\u5373\u5b9e\u4f53\u4e3a\u51cf\u5c11\u6392\u961f\u65f6\u95f4\u800c\u5728\u4e0d\u540c\u670d\u52a1\u53f0\u7684\u961f\u5217\u4e4b\u95f4\u79fb\u52a8 \u670d\u52a1\u53f0\u4f1a\u6309\u7167\u5982\u4e0b\u53ef\u80fd\u7684\u65b9\u5f0f\u8fdb\u884c\u670d\u52a1\uff1a FCFS\uff1a\u5148\u8fdb\u5165\u961f\u5217\u7684\u5148\u8fdb\u884c\u5904\u7406 LCFS\uff1a\u540e\u8fdb\u5165\u961f\u5217\u7684\u5148\u8fdb\u884c\u5904\u7406 \u968f\u673a\u5904\u7406 PS\uff1a\u4f18\u5148\u7ea7\u9ad8\u7684\u5b9e\u4f53\u5148\u8fdb\u884c\u5904\u7406 \u65ad\u7eed\u5904\u7406\uff1a\u5728\u5904\u7406\u67d0\u4e2a\u5b9e\u4f53\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u8f6c\u800c\u5904\u7406\u53e6\u4e00\u4e2a\u5b9e\u4f53\uff0c\u4e0d\u65ad\u5faa\u73af\u76f4\u5230\u5b9e\u4f53\u5904\u7406\u5b8c\u6210 \u5728\u7cfb\u7edf\u4e2d\u7684\u670d\u52a1\u53f0\u7684\u670d\u52a1\u65f6\u95f4\u662f\u4e00\u4e2a\u968f\u673a\u53d8\u91cf\uff0c\u6982\u7387\u5206\u5e03\u4e3a\u5e38\u6570\u3001\u6307\u6570\u5206\u5e03\u3001K\u7ea7 Erlang \u5206\u5e03\u3001\u4e00\u822c\u5206\u5e03\u7b49\u3002 \u7cfb\u7edf\u7684\u7b26\u53f7\u8868\u793a \u00b6 Kendall\u8bb0\u53f7\uff0c\u683c\u5f0f\u4e3a X/Y/Z/A/B/C X/Y/Z/A/B/C X X \u8868\u793a\u5b9e\u4f53\u5230\u8fbe\u95f4\u9694\u65f6\u95f4\u7684\u5206\u5e03 M M \u8868\u793a\u5230\u8fbe\u8fc7\u7a0b\u4e3a Poisson \u8fc7\u7a0b\uff08\u95f4\u9694\u65f6\u95f4\u670d\u4ece\u6307\u6570\u5206\u5e03\uff09\u6216\u8d1f\u6307\u6570\u5206\u5e03 D D \u8868\u793a\u95f4\u9694\u65f6\u95f4\u4e3a\u5e38\u6570 E_k E_k \u8868\u793a\u95f4\u9694\u65f6\u95f4\u670d\u4ece k k \u9636 Erlang \u5206\u5e03 G G \u8868\u793a\u95f4\u9694\u65f6\u95f4\u670d\u4ece\u4e00\u822c\u3001\u76f8\u4e92\u72ec\u7acb\u7684\u968f\u673a\u5206\u5e03 Y Y \u8868\u793a\u670d\u52a1\u53f0\u5355\u6b21\u670d\u52a1\u65f6\u95f4\u7684\u5206\u5e03\uff0c\u8bb0\u53f7\u4e0e X X \u7684\u542b\u4e49\u76f8\u540c Z Z \u8868\u793a\u670d\u52a1\u53f0\u4e2a\u6570 A A \u8868\u793a\u7cfb\u7edf\u7684\u7b49\u5f85\u7a7a\u95f4\u5bb9\u91cf\uff0c 0 0 \u4e3a\u635f\u5931\u5236\u7cfb\u7edf\uff0c \\infty \\infty \u4e3a\u7b49\u5f85\u5236\u7cfb\u7edf\uff0c\u5426\u5219\u4e3a\u6df7\u5408\u5236\u7cfb\u7edf\u3002 B B \u8868\u793a\u5b9e\u4f53\u7684\u603b\u6570\u91cf\uff0c \\infty \\infty \u8868\u793a\u5b9e\u4f53\u6e90\u65e0\u9650 C C \u8868\u793a\u670d\u52a1\u89c4\u5219 A, B, C A, B, C \u53c2\u6570\u53ef\u4ee5\u7701\u7565\u3002\u5206\u522b\u7b49\u4ef7\u4e8e \\infty, \\infty, \\mathit{FCFS} \\infty, \\infty, \\mathit{FCFS} \u7cfb\u7edf\u7684\u89c2\u6d4b\u6307\u6807 \u00b6 \u8861\u91cf\u7cfb\u7edf\u6027\u80fd\u7684\u5e38\u7528\u89c2\u6d4b\u6307\u6807\u4e3a\uff1a N(L) N(L) \uff1a\u7a33\u6001\u7cfb\u7edf\u7684\u961f\u957f\uff08\u6307\u7cfb\u7edf\u5185\u6240\u6709\u7684\u5b9e\u4f53\u6570\u91cf\uff09 N_q(L_q) N_q(L_q) \u7a33\u6001\u7cfb\u7edf\u7684\u6392\u961f\u957f T(W) T(W) \uff1a\u987e\u5ba2\u5728\u7a33\u6001\u7cfb\u7edf\u4e2d\u7684\u505c\u7559\u65f6\u95f4\uff08\u5904\u7406+\u7b49\u5f85\uff09 T_q(W_q) T_q(W_q) \uff1a\u987e\u5ba2\u5728\u7a33\u6001\u7cfb\u7edf\u4e2d\u7684\u7b49\u5f85\u65f6\u95f4 p_n p_n \uff1a\u7a33\u6001\u7cfb\u7edf\u4efb\u610f\u65f6\u523b\u72b6\u6001\u4e3a n n \u7684\u6982\u7387\uff0c p_n=P(N=n)=\\lim_{t\\rightarrow \\infty}P(N(t) = n) p_n=P(N=n)=\\lim_{t\\rightarrow \\infty}P(N(t) = n) \\rho \\rho \uff1a\u5229\u7528\u7387 p_D p_D \uff1a\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\u65f6\u9700\u8981\u7b49\u5f85\u7684\u6982\u7387 \u82e5\u5c06\u7cfb\u7edf\u89c6\u4e3a\u7ba1\u9053\uff0c\u7cfb\u7edf\u4e2d\u5b9e\u4f53\u7684\u6570\u91cf\u7b49\u4e8e\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\u7684\u901f\u5ea6\u4e0e\u7cfb\u7edf\u5e73\u5747\u54cd\u5e94\uff08\u5904\u7406\uff09\u65f6\u95f4\u4e4b\u79ef\u3002 \u5bf9\u4e8e M/M/s M/M/s \u7cfb\u7edf\uff0c\u4ee4 \\lambda \\lambda \u4e3a\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\u7684\u901f\u5ea6\uff0c \\mu \\mu \u4e3a\u670d\u52a1\u53f0\u5904\u7406\u5b9e\u4f53\u7684\u901f\u5ea6\uff0c s s \u4e3a\u670d\u52a1\u53f0\u7684\u6570\u91cf\uff0c\u5219\uff1a \\begin{aligned} L &= \\lambda_e W \\\\ L_q &= \\lambda_e W_q \\end{aligned} \\begin{aligned} L &= \\lambda_e W \\\\ L_q &= \\lambda_e W_q \\end{aligned} \u968f\u673a\u8fc7\u7a0b \u00b6 \u5e38\u89c1\u7684\u968f\u673a\u8fc7\u7a0b\u6709 Markov \u8fc7\u7a0b\u3001\u751f\u706d\u8fc7\u7a0b\u3001 Poisson \u8fc7\u7a0b\u7b49\u3002\u6240\u6709\u7684 Poisson \u8fc7\u7a0b\u90fd\u662f\u751f\u706d\u8fc7\u7a0b\uff0c\u6240\u6709\u7684\u751f\u706d\u8fc7\u7a0b\u90fd\u662f Markov \u8fc7\u7a0b\u3002 Markov \u8fc7\u7a0b \u00b6 \u7279\u70b9\uff1a t_0 t_0 \u65f6\u523b\u7684\u72b6\u6001\u4e0e\u4efb\u610f t<t_0 t<t_0 \u65f6\u7684\u72b6\u6001\u65e0\u5173 Markov \u94fe\u7531\u9a6c\u5c14\u53ef\u592b\u8fc7\u7a0b\u4e2d\u7684\u79bb\u6563\u72b6\u6001\u7ec4\u5408\u3002\u5bf9\u4e8e Markov \u8fc7\u7a0b\uff0c\u7cfb\u7edf\u65e0\u8bb0\u5fc6\u6027\uff0c\u5f53\u524d\u7684\u72b6\u6001\u4e0d\u4f1a\u5bf9\u540e\u9762\u7684\u72b6\u6001\u4ea7\u751f\u5f71\u54cd\u3002 M/M/s M/M/s \u7cfb\u7edf\u53ef\u4ee5\u4f7f\u7528 Markov \u8fc7\u7a0b\u5efa\u6a21\u3002\u961f\u5217\u4e2d\u5b9e\u4f53\u7684\u6570\u91cf\u662f\u4e00\u4e2a Markov \u94fe\u3002 \u751f\u706d\u8fc7\u7a0b \u00b6 \u751f\u706d\u8fc7\u7a0b\u6309\u5982\u4e0b\u56fe\u8fdb\u884c\u63cf\u8ff0\uff08\u72b6\u6001\u8f6c\u79fb\u56fe\uff09\uff1a \u5047\u8bbe\u5b9e\u4f53\u79bb\u6563\u8fdb\u5165\u7684 M/M/s M/M/s \u7cfb\u7edf\uff0c\u961f\u5217\u4e2d\u7684\u5b9e\u4f53\u6570\u91cf\u670d\u4ece\u751f\u706d\u8fc7\u7a0b Poisson \u8fc7\u7a0b \u00b6 \u5b9e\u4f53\u8fdb\u5165\u7684\u65f6\u95f4\u5dee\u76f8\u4e92\u72ec\u7acb\u4e14\u670d\u4ece\u540c\u4e00\u6307\u6570\u5206\u5e03\u7684\u8fc7\u7a0b \u751f\u706d\u8fc7\u7a0b \u00b6 \u5bf9\u4e8e\u751f\u706d\u8fc7\u7a0b\uff0c\u6709\u5982\u4e0b\u5047\u8bbe \u6bcf\u4e2a\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf \u5b9a\u4e49\u7cfb\u7edf\u7684\u72b6\u6001\u4e3a\u7cfb\u7edf\u4e2d\u7684\u5b9e\u4f53\u6570\u91cf n n \u4e00\u4e2a\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\uff0c\u7cfb\u7edf\u7684\u72b6\u6001\u7531 n-1 n-1 \u8f6c\u53d8\u4e3a n n \u4e00\u4e2a\u5b9e\u4f53\u79bb\u5f00\u7cfb\u7edf\uff0c\u7cfb\u7edf\u7684\u72b6\u6001\u7531 n n \u8f6c\u53d8\u4e3a n+1 n+1 \u7cfb\u7edf\u5904\u4e8e\u72b6\u6001 n n \u65f6\uff0c\u5b9a\u4e49\u5b9e\u4f53\u8fdb\u5165\u7684\u901f\u5ea6\u4e3a \\lambda _n \\lambda _n \uff0c\u7cfb\u7edf\u7684\u5904\u7406\u901f\u5ea6\u4e3a \\mu_n \\mu_n \u3002\u5bf9\u4e8e \\lambda_n \\lambda_n \uff0c n\\geq 0 n\\geq 0 \uff1b\u5bf9\u4e8e \\mu_n \\mu_n \uff0c n>0 n>0 \u95ee\u9898\uff1a\u7cfb\u7edf\u5904\u4e8e\u7a33\u5b9a\u72b6\u6001\u65f6\uff0c\u751f\u706d\u7cfb\u7edf\u5904\u4e8e\u72b6\u6001 n n \u7684\u6982\u7387 p_n p_n \uff1f \u5bf9\u4e8e\u5904\u4e8e\u72b6\u6001 j j \u7684\u7cfb\u7edf\uff0c\u8003\u5bdf\u4e00\u4e2a\u6781\u77ed\u7684\u65f6\u95f4\u95f4\u9694 \\Delta t \\Delta t \uff0c\u7531\u4e8e \\Delta t \\Delta t \u6781\u77ed\uff0c\u53ef\u4ee5\u5ffd\u7565 \\Delta t \\Delta t \u65f6\u95f4\u5185\u4e24\u4e2a\u5b9e\u4f53\u540c\u65f6\u8fdb\u5165/\u79bb\u5f00\u7cfb\u7edf\u6216\u4e00\u4e2a\u5b9e\u4f53\u8fdb\u5165\u3001\u4e00\u4e2a\u5b9e\u4f53\u79bb\u5f00\u7cfb\u7edf\u7684\u60c5\u51b5\u3002 \\Delta t \\Delta t \u65f6\u95f4\u5185\u7cfb\u7edf\u53d1\u751f\u53d8\u5316\u7684\u6982\u7387\u5982\u4e0b\uff1a \u4e00\u4e2a\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\uff1a P(n(t+\\Delta t)=j+1 | n(t) = j)=\\lambda_j\\Delta t P(n(t+\\Delta t)=j+1 | n(t) = j)=\\lambda_j\\Delta t \u4e00\u4e2a\u5b9e\u4f53\u79bb\u5f00\u7cfb\u7edf\uff1a P(n(t+\\Delta t)=j-1| n(t) = j) = \\mu_j\\Delta t P(n(t+\\Delta t)=j-1| n(t) = j) = \\mu_j\\Delta t \u7cfb\u7edf\u5728 \\Delta t \\Delta t \u65f6\u95f4\u5185\u6ca1\u6709\u53d1\u751f\u72b6\u6001\u6539\u53d8\uff1a P(n(t+\\Delta t) = j | n(t)=j) = 1 - (\\lambda_j+\\mu_j)\\Delta t P(n(t+\\Delta t) = j | n(t)=j) = 1 - (\\lambda_j+\\mu_j)\\Delta t \u6839\u636e\u5047\u8bbe\uff0c\u5904\u4e8e\u72b6\u6001 i i \u7684\u7cfb\u7edf\u5728 t+\\Delta t t+\\Delta t \u65f6\u53ea\u53ef\u80fd\u5904\u4e8e i-1, i, i+1 i-1, i, i+1 \u4e09\u79cd\u72b6\u6001\u4e2d\u7684\u4e00\u79cd\u3002\u4e5f\u5373\uff0c\u5904\u4e8e\u72b6\u6001 i i \u7684\u7cfb\u7edf\u5728 t-\\Delta t t-\\Delta t \u65f6\u53ea\u53ef\u80fd\u5904\u4e8e i-1, i, i+1 i-1, i, i+1 \u4e09\u79cd\u72b6\u6001\u4e2d\u7684\u4e00\u79cd\u3002\u7531\u6b64\uff0c\u53ef\u4ee5\u5217\u5f0f\u5982\u4e0b\uff1a \\begin{aligned} p_0(t+\\Delta t) &= (1-\\lambda_0\\Delta t)p_0(t) + \\mu_1\\Delta tp_1(t) \\\\ p_j(t+\\Delta t) &= \\lambda_{j-1}\\Delta tp_{j-1}(t)+(1-\\mu_j\\Delta t-\\lambda_j\\Delta t)p_j(t)+\\mu_{j+1}\\Delta tp_{j+1}(t) \\end{aligned} \\begin{aligned} p_0(t+\\Delta t) &= (1-\\lambda_0\\Delta t)p_0(t) + \\mu_1\\Delta tp_1(t) \\\\ p_j(t+\\Delta t) &= \\lambda_{j-1}\\Delta tp_{j-1}(t)+(1-\\mu_j\\Delta t-\\lambda_j\\Delta t)p_j(t)+\\mu_{j+1}\\Delta tp_{j+1}(t) \\end{aligned} \u6574\u7406\u540e\u53d6\u6781\u9650 \\Delta t\\rightarrow 0 \\Delta t\\rightarrow 0 \uff0c\u4e0a\u5f0f\u53d8\u4e3a\u5bfc\u6570\u5f62\u5f0f\uff1a \\begin{aligned} &\\lim_{\\Delta t\\rightarrow 0} \\frac{p_j(t+\\Delta t)-p_j(t)}{\\Delta t}=\\lambda_{j-1}p_{j-1}(t)+\\mu_{j+1}p_{j+1}(t) - (\\mu_j+\\lambda_j)p_j(t) \\\\ \\Rightarrow &\\frac{\\mathrm dp_j(t)}{\\mathrm dt}=\\lambda_{j-1}p_{j-1}(t)+\\mu_{j+1}p_{j+1}(t) - (\\mu_j+\\lambda_j)p_j(t) \\end{aligned} \\begin{aligned} &\\lim_{\\Delta t\\rightarrow 0} \\frac{p_j(t+\\Delta t)-p_j(t)}{\\Delta t}=\\lambda_{j-1}p_{j-1}(t)+\\mu_{j+1}p_{j+1}(t) - (\\mu_j+\\lambda_j)p_j(t) \\\\ \\Rightarrow &\\frac{\\mathrm dp_j(t)}{\\mathrm dt}=\\lambda_{j-1}p_{j-1}(t)+\\mu_{j+1}p_{j+1}(t) - (\\mu_j+\\lambda_j)p_j(t) \\end{aligned} \u5f53 t\\rightarrow \\infty t\\rightarrow \\infty \u65f6\uff0c\u7cfb\u7edf\u8d8b\u4e8e\u7a33\u6001\uff0c\u5219\u6709 \\lim_{t\\rightarrow \\infty}p_j(t) = p_j \\lim_{t\\rightarrow \\infty}p_j(t) = p_j \uff0c\u6536\u655b\u7684\u5145\u5206\u5fc5\u8981\u6761\u4ef6\u4e3a \\lim_{t\\rightarrow\\infty} \\frac{\\mathrm dp_j(t)}{\\mathrm dt}=0 \\lim_{t\\rightarrow\\infty} \\frac{\\mathrm dp_j(t)}{\\mathrm dt}=0 \u3002\u5373 \\lambda_{j-1}p_{j-1}(t)+\\mu_{j+1}p_{j+1}(t) - (\\mu_j+\\lambda_j)p_j(t)=0 \\lambda_{j-1}p_{j-1}(t)+\\mu_{j+1}p_{j+1}(t) - (\\mu_j+\\lambda_j)p_j(t)=0 \u3002 \u89e3 p_{j+1} p_{j+1} \uff0c\u89e3\u5f97\uff1a p_{j+1} = \\left(\\frac{\\mu_j+\\lambda_j}{\\mu{j+1}}\\right)p_j-\\frac{\\lambda_{j-1}}{\\mu_{j+1}}p_{j-1} p_{j+1} = \\left(\\frac{\\mu_j+\\lambda_j}{\\mu{j+1}}\\right)p_j-\\frac{\\lambda_{j-1}}{\\mu_{j+1}}p_{j-1} \u5bf9\u4e8e p_1 p_1 \uff0c\u6709 p_1=\\frac{\\lambda_0}{\\mu_1}p_0 p_1=\\frac{\\lambda_0}{\\mu_1}p_0 \u3002 \u6839\u636e\u9012\u63a8\u516c\u5f0f\uff0c\u53ef\u4ee5\u7528 p_0 p_0 \u8868\u793a\u51fa p_j p_j \uff1a \\begin{aligned} p_2&=\\left(\\frac{\\mu_1+\\lambda_1}{\\mu_2}\\right)p_1-\\frac{\\lambda _0}{\\mu_2}p_0 = \\frac{\\lambda_0(\\mu_1+\\lambda_1)}{\\mu_1\\mu_2}p_0-\\frac{\\lambda_0}{\\mu_2}p_0=\\frac{\\lambda_0\\lambda_1}{\\mu_1\\mu_2}p_0 \\\\ p_3&=\\left(\\frac{\\mu_2+\\lambda_2}{\\mu_3}\\right)p_2-\\frac{\\lambda_1}{\\mu_3}p_1=\\frac{\\lambda_0\\lambda_1(\\mu_2+\\lambda_2)}{\\mu_1\\mu_2\\mu_3}p_0-\\frac{\\lambda_0\\lambda_1}{\\mu_1\\mu_3}p_0=\\frac{\\lambda_0\\lambda_1\\lambda_2}{\\mu_1\\mu_2\\mu_3}p_0 \\\\ &\\vdots \\\\ &p_j = \\frac{\\lambda_0\\lambda_1\\cdots\\lambda_{j-1}}{\\mu_1\\mu_2\\cdots\\mu_j}p_0=p_0\\prod_{i = 1}^{j}\\frac{\\lambda_{i-1}}{\\mu_j} \\end{aligned} \\begin{aligned} p_2&=\\left(\\frac{\\mu_1+\\lambda_1}{\\mu_2}\\right)p_1-\\frac{\\lambda _0}{\\mu_2}p_0 = \\frac{\\lambda_0(\\mu_1+\\lambda_1)}{\\mu_1\\mu_2}p_0-\\frac{\\lambda_0}{\\mu_2}p_0=\\frac{\\lambda_0\\lambda_1}{\\mu_1\\mu_2}p_0 \\\\ p_3&=\\left(\\frac{\\mu_2+\\lambda_2}{\\mu_3}\\right)p_2-\\frac{\\lambda_1}{\\mu_3}p_1=\\frac{\\lambda_0\\lambda_1(\\mu_2+\\lambda_2)}{\\mu_1\\mu_2\\mu_3}p_0-\\frac{\\lambda_0\\lambda_1}{\\mu_1\\mu_3}p_0=\\frac{\\lambda_0\\lambda_1\\lambda_2}{\\mu_1\\mu_2\\mu_3}p_0 \\\\ &\\vdots \\\\ &p_j = \\frac{\\lambda_0\\lambda_1\\cdots\\lambda_{j-1}}{\\mu_1\\mu_2\\cdots\\mu_j}p_0=p_0\\prod_{i = 1}^{j}\\frac{\\lambda_{i-1}}{\\mu_j} \\end{aligned} \u7531\u4e8e\u7cfb\u7edf\u7684\u72b6\u6001\u53ea\u53ef\u80fd\u53d6 0\\sim\\infty 0\\sim\\infty \u4e4b\u95f4\u7684\u6574\u6570\u503c\uff0c\u6982\u7387\u4e4b\u548c\u4e3a 1 1 \uff0c\u53ef\u4ee5\u8ba1\u7b97\u51fa p_0 p_0 \uff1a p_0=\\frac{1}{1+\\sum_{n=1}^\\infty \\prod_{i=0}^{n}\\frac{\\lambda_{i-1}}{\\mu_i}} p_0=\\frac{1}{1+\\sum_{n=1}^\\infty \\prod_{i=0}^{n}\\frac{\\lambda_{i-1}}{\\mu_i}} M/M/1\u961f\u5217 \u00b6 \u5bf9\u4e8e M/M/1 M/M/1 \u7cfb\u7edf\uff0c \\lambda_0=\\lambda_1=\\cdots=\\lambda_n=\\lambda, \\mu_1=\\cdots=\\mu_n=\\mu \\lambda_0=\\lambda_1=\\cdots=\\lambda_n=\\lambda, \\mu_1=\\cdots=\\mu_n=\\mu \u3002 \u7531\u6b64\uff0c\u8ba1\u7b97\u51fa M/M/1 M/M/1 \u7cfb\u7edf\u5728\u7a33\u6001\u65f6\u5904\u4e8e p_0 p_0 \u7684\u6982\u7387\uff1a p_0=\\frac{1}{1+\\sum_{n=1}^\\infty \\prod_{i=0}^{n}\\frac{\\lambda}{\\mu}} = \\frac{1}{1+\\sum_{n=1}^\\infty \\rho^n}=\\frac{1}{\\sum_{n=0}^\\infty \\rho^n}=1-\\rho p_0=\\frac{1}{1+\\sum_{n=1}^\\infty \\prod_{i=0}^{n}\\frac{\\lambda}{\\mu}} = \\frac{1}{1+\\sum_{n=1}^\\infty \\rho^n}=\\frac{1}{\\sum_{n=0}^\\infty \\rho^n}=1-\\rho \u6982\u7387\u5206\u5e03\u4e3a\uff1a P(N=n)=\\rho^n(1-\\rho) P(N=n)=\\rho^n(1-\\rho) M/M/s\u961f\u5217 \u00b6 \u5bf9\u4e8e M/M/s M/M/s \u7cfb\u7edf\uff0c \\lambda_i, \\mu_i \\lambda_i, \\mu_i \u670d\u4ece\u5982\u4e0b\u89c4\u5f8b\uff1a \\lambda_i = \\lambda \\qquad i=0, 1\\cdots, \\infty \\lambda_i = \\lambda \\qquad i=0, 1\\cdots, \\infty \\mu_i = \\max\\{i, s\\}\\mu \\qquad i=1, 2, \\cdots, \\infty \\mu_i = \\max\\{i, s\\}\\mu \\qquad i=1, 2, \\cdots, \\infty \u8ba1\u7b97\u51fa M/M/s M/M/s \u7cfb\u7edf\u5728\u7a33\u6001\u65f6\u5904\u4e8e p_0 p_0 \u7684\u6982\u7387\uff0c\u4ee4 \\rho_0=\\frac{\\lambda}{\\mu} \\rho_0=\\frac{\\lambda}{\\mu} \uff1a \\begin{aligned} p_0&=\\frac{1}{1+\\sum_{n=1}^\\infty \\prod_{i=0}^{n}\\frac{\\lambda}{\\max\\{i, s\\}\\mu}} \\\\ &= \\frac{1}{\\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}+\\sum_{i=s}^\\infty \\frac{\\rho_0^i}{s!s^{i-s}}} \\\\ &=\\frac{1}{\\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}+\\frac{\\rho_0^s}{s!}\\sum_{i=0}^\\infty \\frac{\\rho_0^i}{s^i}} \\\\ &=\\frac{1}{\\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}} \\end{aligned} \\begin{aligned} p_0&=\\frac{1}{1+\\sum_{n=1}^\\infty \\prod_{i=0}^{n}\\frac{\\lambda}{\\max\\{i, s\\}\\mu}} \\\\ &= \\frac{1}{\\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}+\\sum_{i=s}^\\infty \\frac{\\rho_0^i}{s!s^{i-s}}} \\\\ &=\\frac{1}{\\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}+\\frac{\\rho_0^s}{s!}\\sum_{i=0}^\\infty \\frac{\\rho_0^i}{s^i}} \\\\ &=\\frac{1}{\\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}} \\end{aligned} \u8bbe \\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}=T \\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}=T \uff0c p_i p_i \u53ef\u4ee5\u901a\u8fc7 p_0 p_0 \u63a8\u5bfc\u5f97\uff1a p_i=\\frac{\\lambda_0\\lambda_1\\cdots\\lambda_{i-1}}{\\mu_1\\mu_2\\cdots\\mu_i}p_0=\\left\\{ \\begin{aligned} & \\frac{\\rho_0^i}{i!}p_0=\\frac{\\rho_0^i}{i!\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)} & i\\leq s \\\\ & \\frac{\\rho_0^i}{s!s^{i-s}}p_0=\\frac{\\rho_0^i}{s!s^{i-s}\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)} & i > s \\end{aligned} \\right. p_i=\\frac{\\lambda_0\\lambda_1\\cdots\\lambda_{i-1}}{\\mu_1\\mu_2\\cdots\\mu_i}p_0=\\left\\{ \\begin{aligned} & \\frac{\\rho_0^i}{i!}p_0=\\frac{\\rho_0^i}{i!\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)} & i\\leq s \\\\ & \\frac{\\rho_0^i}{s!s^{i-s}}p_0=\\frac{\\rho_0^i}{s!s^{i-s}\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)} & i > s \\end{aligned} \\right. \u5f53 n \\geq s n \\geq s \u65f6\uff0c\u987e\u5ba2\u5230\u8fbe\u7cfb\u7edf\u65f6\u9700\u8981\u7b49\u5f85\uff0c\u5219\u6709\uff1a p_D=\\sum_{i=s}^\\infty p_i= \\sum_{i=s}^\\infty \\frac{\\rho^i_0}{s!s^{i-s}}p_0 = \\frac{\\rho^s_0p_0}{(s-1)!(s-\\rho_0)}=\\frac{\\rho^s_0}{(s-1)!(s-\\rho_0)T+\\rho_0^s} p_D=\\sum_{i=s}^\\infty p_i= \\sum_{i=s}^\\infty \\frac{\\rho^i_0}{s!s^{i-s}}p_0 = \\frac{\\rho^s_0p_0}{(s-1)!(s-\\rho_0)}=\\frac{\\rho^s_0}{(s-1)!(s-\\rho_0)T+\\rho_0^s} \u5f53 N\\leq s N\\leq s \u65f6\uff0c\u7cfb\u7edf\u4e2d\u6ca1\u6709\u961f\u5217\uff0c L_q=0 L_q=0 \uff0c\u5f53 N>s N>s \u65f6\uff0c\u961f\u5217\u957f\u5ea6\u4e3a N-s N-s \uff0c\u56e0\u6b64\u7a33\u6001\u65f6\u7684\u5e73\u5747\u6392\u961f\u957f\u4e3a\uff1a \\begin{aligned} L_q&=\\sum_{i=s + 1}^\\infty (i - s)p_i \\\\ &=\\sum_{i=s}^\\infty (i-s)\\frac{\\rho^i_0}{s!s^{i-s}}p_0 \\\\ &= \\frac{\\rho^s_0p_0}{s!}\\sum_{i=0}^\\infty \\frac{i\\rho_0^i}{s^i} \\\\ &= \\frac{\\rho^s_0p_0}{s!}\\sum_{i=1}^\\infty \\left(\\frac{\\rho_0}{s}\\right)^i\\frac{s}{s-\\rho_0} \\\\ &= \\frac{\\rho^s_0p_0}{(s-1)!(s-\\rho)}\\frac{\\rho_0/s}{1-\\rho_0/s} \\\\ &= \\frac{\\rho^{s+1}_0p_0}{(s-1)!(s-\\rho_0)^2} \\end{aligned} \\begin{aligned} L_q&=\\sum_{i=s + 1}^\\infty (i - s)p_i \\\\ &=\\sum_{i=s}^\\infty (i-s)\\frac{\\rho^i_0}{s!s^{i-s}}p_0 \\\\ &= \\frac{\\rho^s_0p_0}{s!}\\sum_{i=0}^\\infty \\frac{i\\rho_0^i}{s^i} \\\\ &= \\frac{\\rho^s_0p_0}{s!}\\sum_{i=1}^\\infty \\left(\\frac{\\rho_0}{s}\\right)^i\\frac{s}{s-\\rho_0} \\\\ &= \\frac{\\rho^s_0p_0}{(s-1)!(s-\\rho)}\\frac{\\rho_0/s}{1-\\rho_0/s} \\\\ &= \\frac{\\rho^{s+1}_0p_0}{(s-1)!(s-\\rho_0)^2} \\end{aligned} \u72b6\u6001\u4e3a n n \u7684\u7a33\u6001\u65f6\u7cfb\u7edf\u63a5\u53d7\u670d\u52a1\u7684\u5b9e\u4f53\u6570\u91cf\u4e3a\uff1a \\left\\{ \\begin{aligned} &n & n\\leq s \\\\ &s & n> s \\end{aligned} \\right . \\left\\{ \\begin{aligned} &n & n\\leq s \\\\ &s & n> s \\end{aligned} \\right . \u56e0\u6b64\uff0c\u7a33\u6001\u7cfb\u7edf\u4e2d\u63a5\u53d7\u670d\u52a1\u7684\u5b9e\u4f53\u5e73\u5747\u6570\u91cf\u4e3a\uff1a \\begin{aligned} L-L_q&=\\sum_{i=0}^s ip_i+\\sum_{i=s+1}^\\infty sp_i \\\\ &=\\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}p_0+s\\sum_{i=s+1}^\\infty \\frac{\\rho_0^i}{s!s^{i-s}}p_0 \\\\ &= \\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}p_0 + \\frac{\\rho_0^sp_0}{(s-1)!}\\sum_{i=1}^\\infty \\frac{\\rho_0^i}{s^i} \\\\ &= \\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}p_0 + \\frac{\\rho_0^{s+1}p_0}{(s-1)!(s-\\rho_0)} \\\\ &= \\frac{\\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}}{\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)} + \\frac{\\rho_0^{s+1}p_0}{(s-1)!(s-\\rho_0)} \\\\ &= \\frac{\\rho_0 T+1}{T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}} + \\frac{\\rho_0^{s+1}}{(s-1)!(s-\\rho_0)T+\\rho_0^s} \\\\ &= \\frac{(\\rho_0 T+1)(s-1)!(s-\\rho_0) + \\rho_0^{s+1}}{(s-1)!(s-\\rho_0)T+\\rho_0^s}\\\\ &= \\rho_0 + \\frac{(s-1)!(s-\\rho_0)}{(s-1)!(s-\\rho_0)T+\\rho_0^s} \\end{aligned} \\begin{aligned} L-L_q&=\\sum_{i=0}^s ip_i+\\sum_{i=s+1}^\\infty sp_i \\\\ &=\\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}p_0+s\\sum_{i=s+1}^\\infty \\frac{\\rho_0^i}{s!s^{i-s}}p_0 \\\\ &= \\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}p_0 + \\frac{\\rho_0^sp_0}{(s-1)!}\\sum_{i=1}^\\infty \\frac{\\rho_0^i}{s^i} \\\\ &= \\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}p_0 + \\frac{\\rho_0^{s+1}p_0}{(s-1)!(s-\\rho_0)} \\\\ &= \\frac{\\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}}{\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)} + \\frac{\\rho_0^{s+1}p_0}{(s-1)!(s-\\rho_0)} \\\\ &= \\frac{\\rho_0 T+1}{T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}} + \\frac{\\rho_0^{s+1}}{(s-1)!(s-\\rho_0)T+\\rho_0^s} \\\\ &= \\frac{(\\rho_0 T+1)(s-1)!(s-\\rho_0) + \\rho_0^{s+1}}{(s-1)!(s-\\rho_0)T+\\rho_0^s}\\\\ &= \\rho_0 + \\frac{(s-1)!(s-\\rho_0)}{(s-1)!(s-\\rho_0)T+\\rho_0^s} \\end{aligned} \u987e\u5ba2\u7684\u5e73\u5747\u9017\u7559\u65f6\u95f4 W=\\frac{L}{\\lambda} W=\\frac{L}{\\lambda} \uff1a \\begin{aligned} W&=\\frac{L}{\\lambda} \\\\ &= \\frac{\\sum_{i=0}^\\infty ip_i}{\\lambda} \\\\ &= \\frac{\\sum_{i=1}^s \\left(\\frac{\\rho_0^i}{(i-1)!\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)}\\right) + \\sum_{i=s+1}^\\infty \\left(i\\frac{\\rho_0^i}{s!s^{i-s}\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)}\\right) }{\\lambda} \\\\ &= \\frac{\\frac{T(s-1)!(s-\\rho_0)}{T(s-1)!(s-\\rho_0) + \\rho_0^s} + \\frac{\\rho_0^{s+1}(s-\\rho_0+1)/(s-\\rho_0)}{T(s-1)!(s-\\rho_0) + \\rho_0^s}}{\\lambda} \\\\ &= \\frac{T(s-1)!(s-\\rho_0) + \\rho_0^{s+1}(s-\\rho_0+1)/(s-\\rho_0)}{\\lambda(T(s-1)!(s-\\rho_0) + \\rho_0^s)} \\end{aligned} \\begin{aligned} W&=\\frac{L}{\\lambda} \\\\ &= \\frac{\\sum_{i=0}^\\infty ip_i}{\\lambda} \\\\ &= \\frac{\\sum_{i=1}^s \\left(\\frac{\\rho_0^i}{(i-1)!\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)}\\right) + \\sum_{i=s+1}^\\infty \\left(i\\frac{\\rho_0^i}{s!s^{i-s}\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)}\\right) }{\\lambda} \\\\ &= \\frac{\\frac{T(s-1)!(s-\\rho_0)}{T(s-1)!(s-\\rho_0) + \\rho_0^s} + \\frac{\\rho_0^{s+1}(s-\\rho_0+1)/(s-\\rho_0)}{T(s-1)!(s-\\rho_0) + \\rho_0^s}}{\\lambda} \\\\ &= \\frac{T(s-1)!(s-\\rho_0) + \\rho_0^{s+1}(s-\\rho_0+1)/(s-\\rho_0)}{\\lambda(T(s-1)!(s-\\rho_0) + \\rho_0^s)} \\end{aligned}","title":"Chapter 12"},{"location":"math/queue-theory/chapter-12.html#_1","text":"\u4e00\u4e2a\u6392\u961f\u6a21\u578b\u4e3b\u8981\u7531\u4ee5\u4e0b\u90e8\u5206\u7ec4\u6210 \u987e\u5ba2\uff08\u5b9e\u4f53\uff09\u5904\u7406 \u5b9e\u4f53\u6392\u961f\u7b49\u5f85\u5904\u7406\uff08\u7cfb\u7edf\u7684\u6392\u961f\u7b56\u7565\u53ef\u80fd\u4e0d\u540c\uff0c\u635f\u5931\u5236\u4e0d\u5141\u8bb8\u6392\u961f\u3001\u6df7\u5408\u5236\u5141\u8bb8\u6392\u6709\u9650\u957f\u5ea6\u7684\u961f\u5217\uff09 \u5b9e\u4f53\u5904\u7406\u5b8c\u6bd5\uff0c\u79bb\u5f00\u7cfb\u7edf","title":"\u5e38\u89c1\u6392\u961f\u6a21\u578b"},{"location":"math/queue-theory/chapter-12.html#_2","text":"","title":"\u6392\u961f\u6a21\u578b\u7684\u63cf\u8ff0"},{"location":"math/queue-theory/chapter-12.html#_3","text":"\u5047\u8bbe\u8fdb\u5165\u7cfb\u7edf\u7684\u5b9e\u4f53\u6570\u91cf\u65e0\u9650\u3002\u8003\u5bdf\u76f8\u90bb\u4e24\u4e2a\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\u7684\u65f6\u95f4\u5dee\uff1a \u5bf9\u4e8e\u5b9a\u957f\u5206\u5e03\uff0c\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\u7684\u65f6\u95f4\u5dee\u4e3a\u5e38\u91cf t t \uff0c t t \u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u4e3a\uff1a f(t; \\alpha)=\\left\\{ \\begin{aligned} & 1 & t=\\alpha \\\\ & 0 & t\\not =\\alpha \\end{aligned} \\right . f(t; \\alpha)=\\left\\{ \\begin{aligned} & 1 & t=\\alpha \\\\ & 0 & t\\not =\\alpha \\end{aligned} \\right . Poisson \u6d41\uff0c\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\u7684\u65f6\u95f4\u5dee\u72ec\u7acb\u540c\u5206\u5e03\uff0c\u670d\u4ece\u53c2\u6570\u4e3a \\lambda \\lambda \u7684\u6307\u6570\u5206\u5e03 f_{\\xi_i}(t; \\lambda)=\\left\\{ \\begin{aligned} & \\lambda e^{-\\lambda t} & t\\geq 0 \\\\ & 0 & t < 0 \\end{aligned} \\right . f_{\\xi_i}(t; \\lambda)=\\left\\{ \\begin{aligned} & \\lambda e^{-\\lambda t} & t\\geq 0 \\\\ & 0 & t < 0 \\end{aligned} \\right . Erlang \u5206\u5e03\uff0c\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\u7684\u65f6\u95f4\u5dee\u72ec\u7acb\u540c\u5206\u5e03\uff0c\u670d\u4ece\u5982\u4e0b\u516c\u5f0f\u6240\u793a\u7684\u5206\u5e03\u3002\u82e5\u67d0\u4e2a\u7cfb\u7edf\u4e2d\u6709 K K \u4e2a\u5e76\u8054\u7684\u670d\u52a1\u53f0\uff0c\u8f93\u5165\u5b9e\u4f53\u4e3a Poisson \u6d41\uff0c\u5219\u7b2c K K \u4e2a\u670d\u52a1\u53f0\u7684\u987e\u5ba2\u6d41\u4e3a Erlang \u6d41\uff0c\u524d\u9762\u6240\u6709 K - 1 K - 1 \u4e2a\u670d\u52a1\u53f0\u5728\u7b2c\u4e00\u4e2a\u5b9e\u4f53\u5230\u8fbe\u4ee5\u540e\u7684\u8f93\u5165\u6d41\u540c\u6837\u4e3a Erlang \u6d41\u3002 f(t; \\lambda, K)=\\left\\{ \\begin{aligned} & \\frac{\\lambda(\\lambda t)^{K-1}}{(K-1)!} & t\\geq 0 \\\\ & 0 & t < 0 \\end{aligned} \\right . f(t; \\lambda, K)=\\left\\{ \\begin{aligned} & \\frac{\\lambda(\\lambda t)^{K-1}}{(K-1)!} & t\\geq 0 \\\\ & 0 & t < 0 \\end{aligned} \\right .","title":"\u8fdb\u5165\u7cfb\u7edf"},{"location":"math/queue-theory/chapter-12.html#_4","text":"\u7cfb\u7edf\u4e2d\u53ef\u80fd\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u670d\u52a1\u53f0\u3002\u5728\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u670d\u52a1\u53f0\u90fd\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u65f6\uff0c\u65b0\u8fdb\u5165\u7684\u5b9e\u4f53\u65e0\u6cd5\u7acb\u5373\u8fdb\u884c\u5904\u7406\uff0c\u800c\u662f\u8fdb\u5165\u961f\u5217\u6216\u76f4\u63a5\u79bb\u5f00\uff0c\u53d6\u51b3\u4e8e\u7cfb\u7edf\u7684\u6392\u961f\u7b56\u7565\u3002\u6392\u961f\u7b56\u7565\u53ef\u4ee5\u5206\u4e3a\u635f\u5931\u5236\u3001\u7b49\u5f85\u5236\u4e0e\u6df7\u5408\u5236\u3002 \u5728\u635f\u5931\u5236\u7cfb\u7edf\u4e2d\uff0c\u5982\u679c\u65b0\u8fdb\u5165\u7684\u5b9e\u4f53\u4e0d\u80fd\u88ab\u7acb\u5373\u5904\u7406\uff0c\u5219\u4f1a\u79bb\u5f00\u7cfb\u7edf\u3002 \u5728\u7b49\u5f85\u5236\u7cfb\u7edf\u4e2d\uff0c\u5982\u679c\u65b0\u8fdb\u5165\u7684\u5b9e\u4f53\u4e0d\u80fd\u88ab\u7acb\u5373\u5904\u7406\uff0c\u5219\u4f1a\u5728\u961f\u5217\u4e2d\u7b49\u5f85\uff0c\u76f4\u5230\u88ab\u5904\u7406\u3002 \u5728\u6df7\u5408\u5236\u7cfb\u7edf\u4e2d\uff0c\u5982\u679c\u65b0\u8fdb\u5165\u7684\u5b9e\u4f53\u4e0d\u80fd\u88ab\u7acb\u5373\u5904\u7406\u4e14\u6b64\u65f6\u7684\u961f\u5217\u957f\u5ea6\u5927\u4e8e\u67d0\u4e00\u5e38\u6570\u503c\uff0c\u5219\u4f1a\u79bb\u5f00\u7cfb\u7edf\uff0c\u5426\u5219\u4f1a\u8fdb\u5165\u961f\u5217\u7b49\u5f85\u3002 \u5b9e\u4f53\u5728\u6392\u961f\u8fc7\u7a0b\u4e2d\u7684\u884c\u4e3a\u53ef\u4ee5\u5206\u4e3a\u5982\u4e0b\u7c7b\u578b\uff1a \u79bb\u5f00\uff1a\u5f53\u5b9e\u4f53\u5f97\u77e5\u9700\u8981\u7b49\u5f85\u6216\u6ca1\u6709\u8010\u5fc3\u7ee7\u7eed\u7b49\u5f85\u65f6\uff0c\u5b9e\u4f53\u53ef\u80fd\u9000\u51fa\u961f\u5217 \u53d8\u6362\uff1a\u5373\u5b9e\u4f53\u4e3a\u51cf\u5c11\u6392\u961f\u65f6\u95f4\u800c\u5728\u4e0d\u540c\u670d\u52a1\u53f0\u7684\u961f\u5217\u4e4b\u95f4\u79fb\u52a8 \u670d\u52a1\u53f0\u4f1a\u6309\u7167\u5982\u4e0b\u53ef\u80fd\u7684\u65b9\u5f0f\u8fdb\u884c\u670d\u52a1\uff1a FCFS\uff1a\u5148\u8fdb\u5165\u961f\u5217\u7684\u5148\u8fdb\u884c\u5904\u7406 LCFS\uff1a\u540e\u8fdb\u5165\u961f\u5217\u7684\u5148\u8fdb\u884c\u5904\u7406 \u968f\u673a\u5904\u7406 PS\uff1a\u4f18\u5148\u7ea7\u9ad8\u7684\u5b9e\u4f53\u5148\u8fdb\u884c\u5904\u7406 \u65ad\u7eed\u5904\u7406\uff1a\u5728\u5904\u7406\u67d0\u4e2a\u5b9e\u4f53\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u8f6c\u800c\u5904\u7406\u53e6\u4e00\u4e2a\u5b9e\u4f53\uff0c\u4e0d\u65ad\u5faa\u73af\u76f4\u5230\u5b9e\u4f53\u5904\u7406\u5b8c\u6210 \u5728\u7cfb\u7edf\u4e2d\u7684\u670d\u52a1\u53f0\u7684\u670d\u52a1\u65f6\u95f4\u662f\u4e00\u4e2a\u968f\u673a\u53d8\u91cf\uff0c\u6982\u7387\u5206\u5e03\u4e3a\u5e38\u6570\u3001\u6307\u6570\u5206\u5e03\u3001K\u7ea7 Erlang \u5206\u5e03\u3001\u4e00\u822c\u5206\u5e03\u7b49\u3002","title":"\u5b9e\u4f53\u6392\u961f\u4e0e\u5904\u7406"},{"location":"math/queue-theory/chapter-12.html#_5","text":"Kendall\u8bb0\u53f7\uff0c\u683c\u5f0f\u4e3a X/Y/Z/A/B/C X/Y/Z/A/B/C X X \u8868\u793a\u5b9e\u4f53\u5230\u8fbe\u95f4\u9694\u65f6\u95f4\u7684\u5206\u5e03 M M \u8868\u793a\u5230\u8fbe\u8fc7\u7a0b\u4e3a Poisson \u8fc7\u7a0b\uff08\u95f4\u9694\u65f6\u95f4\u670d\u4ece\u6307\u6570\u5206\u5e03\uff09\u6216\u8d1f\u6307\u6570\u5206\u5e03 D D \u8868\u793a\u95f4\u9694\u65f6\u95f4\u4e3a\u5e38\u6570 E_k E_k \u8868\u793a\u95f4\u9694\u65f6\u95f4\u670d\u4ece k k \u9636 Erlang \u5206\u5e03 G G \u8868\u793a\u95f4\u9694\u65f6\u95f4\u670d\u4ece\u4e00\u822c\u3001\u76f8\u4e92\u72ec\u7acb\u7684\u968f\u673a\u5206\u5e03 Y Y \u8868\u793a\u670d\u52a1\u53f0\u5355\u6b21\u670d\u52a1\u65f6\u95f4\u7684\u5206\u5e03\uff0c\u8bb0\u53f7\u4e0e X X \u7684\u542b\u4e49\u76f8\u540c Z Z \u8868\u793a\u670d\u52a1\u53f0\u4e2a\u6570 A A \u8868\u793a\u7cfb\u7edf\u7684\u7b49\u5f85\u7a7a\u95f4\u5bb9\u91cf\uff0c 0 0 \u4e3a\u635f\u5931\u5236\u7cfb\u7edf\uff0c \\infty \\infty \u4e3a\u7b49\u5f85\u5236\u7cfb\u7edf\uff0c\u5426\u5219\u4e3a\u6df7\u5408\u5236\u7cfb\u7edf\u3002 B B \u8868\u793a\u5b9e\u4f53\u7684\u603b\u6570\u91cf\uff0c \\infty \\infty \u8868\u793a\u5b9e\u4f53\u6e90\u65e0\u9650 C C \u8868\u793a\u670d\u52a1\u89c4\u5219 A, B, C A, B, C \u53c2\u6570\u53ef\u4ee5\u7701\u7565\u3002\u5206\u522b\u7b49\u4ef7\u4e8e \\infty, \\infty, \\mathit{FCFS} \\infty, \\infty, \\mathit{FCFS}","title":"\u7cfb\u7edf\u7684\u7b26\u53f7\u8868\u793a"},{"location":"math/queue-theory/chapter-12.html#_6","text":"\u8861\u91cf\u7cfb\u7edf\u6027\u80fd\u7684\u5e38\u7528\u89c2\u6d4b\u6307\u6807\u4e3a\uff1a N(L) N(L) \uff1a\u7a33\u6001\u7cfb\u7edf\u7684\u961f\u957f\uff08\u6307\u7cfb\u7edf\u5185\u6240\u6709\u7684\u5b9e\u4f53\u6570\u91cf\uff09 N_q(L_q) N_q(L_q) \u7a33\u6001\u7cfb\u7edf\u7684\u6392\u961f\u957f T(W) T(W) \uff1a\u987e\u5ba2\u5728\u7a33\u6001\u7cfb\u7edf\u4e2d\u7684\u505c\u7559\u65f6\u95f4\uff08\u5904\u7406+\u7b49\u5f85\uff09 T_q(W_q) T_q(W_q) \uff1a\u987e\u5ba2\u5728\u7a33\u6001\u7cfb\u7edf\u4e2d\u7684\u7b49\u5f85\u65f6\u95f4 p_n p_n \uff1a\u7a33\u6001\u7cfb\u7edf\u4efb\u610f\u65f6\u523b\u72b6\u6001\u4e3a n n \u7684\u6982\u7387\uff0c p_n=P(N=n)=\\lim_{t\\rightarrow \\infty}P(N(t) = n) p_n=P(N=n)=\\lim_{t\\rightarrow \\infty}P(N(t) = n) \\rho \\rho \uff1a\u5229\u7528\u7387 p_D p_D \uff1a\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\u65f6\u9700\u8981\u7b49\u5f85\u7684\u6982\u7387 \u82e5\u5c06\u7cfb\u7edf\u89c6\u4e3a\u7ba1\u9053\uff0c\u7cfb\u7edf\u4e2d\u5b9e\u4f53\u7684\u6570\u91cf\u7b49\u4e8e\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\u7684\u901f\u5ea6\u4e0e\u7cfb\u7edf\u5e73\u5747\u54cd\u5e94\uff08\u5904\u7406\uff09\u65f6\u95f4\u4e4b\u79ef\u3002 \u5bf9\u4e8e M/M/s M/M/s \u7cfb\u7edf\uff0c\u4ee4 \\lambda \\lambda \u4e3a\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\u7684\u901f\u5ea6\uff0c \\mu \\mu \u4e3a\u670d\u52a1\u53f0\u5904\u7406\u5b9e\u4f53\u7684\u901f\u5ea6\uff0c s s \u4e3a\u670d\u52a1\u53f0\u7684\u6570\u91cf\uff0c\u5219\uff1a \\begin{aligned} L &= \\lambda_e W \\\\ L_q &= \\lambda_e W_q \\end{aligned} \\begin{aligned} L &= \\lambda_e W \\\\ L_q &= \\lambda_e W_q \\end{aligned}","title":"\u7cfb\u7edf\u7684\u89c2\u6d4b\u6307\u6807"},{"location":"math/queue-theory/chapter-12.html#_7","text":"\u5e38\u89c1\u7684\u968f\u673a\u8fc7\u7a0b\u6709 Markov \u8fc7\u7a0b\u3001\u751f\u706d\u8fc7\u7a0b\u3001 Poisson \u8fc7\u7a0b\u7b49\u3002\u6240\u6709\u7684 Poisson \u8fc7\u7a0b\u90fd\u662f\u751f\u706d\u8fc7\u7a0b\uff0c\u6240\u6709\u7684\u751f\u706d\u8fc7\u7a0b\u90fd\u662f Markov \u8fc7\u7a0b\u3002","title":"\u968f\u673a\u8fc7\u7a0b"},{"location":"math/queue-theory/chapter-12.html#markov","text":"\u7279\u70b9\uff1a t_0 t_0 \u65f6\u523b\u7684\u72b6\u6001\u4e0e\u4efb\u610f t<t_0 t<t_0 \u65f6\u7684\u72b6\u6001\u65e0\u5173 Markov \u94fe\u7531\u9a6c\u5c14\u53ef\u592b\u8fc7\u7a0b\u4e2d\u7684\u79bb\u6563\u72b6\u6001\u7ec4\u5408\u3002\u5bf9\u4e8e Markov \u8fc7\u7a0b\uff0c\u7cfb\u7edf\u65e0\u8bb0\u5fc6\u6027\uff0c\u5f53\u524d\u7684\u72b6\u6001\u4e0d\u4f1a\u5bf9\u540e\u9762\u7684\u72b6\u6001\u4ea7\u751f\u5f71\u54cd\u3002 M/M/s M/M/s \u7cfb\u7edf\u53ef\u4ee5\u4f7f\u7528 Markov \u8fc7\u7a0b\u5efa\u6a21\u3002\u961f\u5217\u4e2d\u5b9e\u4f53\u7684\u6570\u91cf\u662f\u4e00\u4e2a Markov \u94fe\u3002","title":"Markov \u8fc7\u7a0b"},{"location":"math/queue-theory/chapter-12.html#_8","text":"\u751f\u706d\u8fc7\u7a0b\u6309\u5982\u4e0b\u56fe\u8fdb\u884c\u63cf\u8ff0\uff08\u72b6\u6001\u8f6c\u79fb\u56fe\uff09\uff1a \u5047\u8bbe\u5b9e\u4f53\u79bb\u6563\u8fdb\u5165\u7684 M/M/s M/M/s \u7cfb\u7edf\uff0c\u961f\u5217\u4e2d\u7684\u5b9e\u4f53\u6570\u91cf\u670d\u4ece\u751f\u706d\u8fc7\u7a0b","title":"\u751f\u706d\u8fc7\u7a0b"},{"location":"math/queue-theory/chapter-12.html#poisson","text":"\u5b9e\u4f53\u8fdb\u5165\u7684\u65f6\u95f4\u5dee\u76f8\u4e92\u72ec\u7acb\u4e14\u670d\u4ece\u540c\u4e00\u6307\u6570\u5206\u5e03\u7684\u8fc7\u7a0b","title":"Poisson \u8fc7\u7a0b"},{"location":"math/queue-theory/chapter-12.html#_9","text":"\u5bf9\u4e8e\u751f\u706d\u8fc7\u7a0b\uff0c\u6709\u5982\u4e0b\u5047\u8bbe \u6bcf\u4e2a\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf \u5b9a\u4e49\u7cfb\u7edf\u7684\u72b6\u6001\u4e3a\u7cfb\u7edf\u4e2d\u7684\u5b9e\u4f53\u6570\u91cf n n \u4e00\u4e2a\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\uff0c\u7cfb\u7edf\u7684\u72b6\u6001\u7531 n-1 n-1 \u8f6c\u53d8\u4e3a n n \u4e00\u4e2a\u5b9e\u4f53\u79bb\u5f00\u7cfb\u7edf\uff0c\u7cfb\u7edf\u7684\u72b6\u6001\u7531 n n \u8f6c\u53d8\u4e3a n+1 n+1 \u7cfb\u7edf\u5904\u4e8e\u72b6\u6001 n n \u65f6\uff0c\u5b9a\u4e49\u5b9e\u4f53\u8fdb\u5165\u7684\u901f\u5ea6\u4e3a \\lambda _n \\lambda _n \uff0c\u7cfb\u7edf\u7684\u5904\u7406\u901f\u5ea6\u4e3a \\mu_n \\mu_n \u3002\u5bf9\u4e8e \\lambda_n \\lambda_n \uff0c n\\geq 0 n\\geq 0 \uff1b\u5bf9\u4e8e \\mu_n \\mu_n \uff0c n>0 n>0 \u95ee\u9898\uff1a\u7cfb\u7edf\u5904\u4e8e\u7a33\u5b9a\u72b6\u6001\u65f6\uff0c\u751f\u706d\u7cfb\u7edf\u5904\u4e8e\u72b6\u6001 n n \u7684\u6982\u7387 p_n p_n \uff1f \u5bf9\u4e8e\u5904\u4e8e\u72b6\u6001 j j \u7684\u7cfb\u7edf\uff0c\u8003\u5bdf\u4e00\u4e2a\u6781\u77ed\u7684\u65f6\u95f4\u95f4\u9694 \\Delta t \\Delta t \uff0c\u7531\u4e8e \\Delta t \\Delta t \u6781\u77ed\uff0c\u53ef\u4ee5\u5ffd\u7565 \\Delta t \\Delta t \u65f6\u95f4\u5185\u4e24\u4e2a\u5b9e\u4f53\u540c\u65f6\u8fdb\u5165/\u79bb\u5f00\u7cfb\u7edf\u6216\u4e00\u4e2a\u5b9e\u4f53\u8fdb\u5165\u3001\u4e00\u4e2a\u5b9e\u4f53\u79bb\u5f00\u7cfb\u7edf\u7684\u60c5\u51b5\u3002 \\Delta t \\Delta t \u65f6\u95f4\u5185\u7cfb\u7edf\u53d1\u751f\u53d8\u5316\u7684\u6982\u7387\u5982\u4e0b\uff1a \u4e00\u4e2a\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\uff1a P(n(t+\\Delta t)=j+1 | n(t) = j)=\\lambda_j\\Delta t P(n(t+\\Delta t)=j+1 | n(t) = j)=\\lambda_j\\Delta t \u4e00\u4e2a\u5b9e\u4f53\u79bb\u5f00\u7cfb\u7edf\uff1a P(n(t+\\Delta t)=j-1| n(t) = j) = \\mu_j\\Delta t P(n(t+\\Delta t)=j-1| n(t) = j) = \\mu_j\\Delta t \u7cfb\u7edf\u5728 \\Delta t \\Delta t \u65f6\u95f4\u5185\u6ca1\u6709\u53d1\u751f\u72b6\u6001\u6539\u53d8\uff1a P(n(t+\\Delta t) = j | n(t)=j) = 1 - (\\lambda_j+\\mu_j)\\Delta t P(n(t+\\Delta t) = j | n(t)=j) = 1 - (\\lambda_j+\\mu_j)\\Delta t \u6839\u636e\u5047\u8bbe\uff0c\u5904\u4e8e\u72b6\u6001 i i \u7684\u7cfb\u7edf\u5728 t+\\Delta t t+\\Delta t \u65f6\u53ea\u53ef\u80fd\u5904\u4e8e i-1, i, i+1 i-1, i, i+1 \u4e09\u79cd\u72b6\u6001\u4e2d\u7684\u4e00\u79cd\u3002\u4e5f\u5373\uff0c\u5904\u4e8e\u72b6\u6001 i i \u7684\u7cfb\u7edf\u5728 t-\\Delta t t-\\Delta t \u65f6\u53ea\u53ef\u80fd\u5904\u4e8e i-1, i, i+1 i-1, i, i+1 \u4e09\u79cd\u72b6\u6001\u4e2d\u7684\u4e00\u79cd\u3002\u7531\u6b64\uff0c\u53ef\u4ee5\u5217\u5f0f\u5982\u4e0b\uff1a \\begin{aligned} p_0(t+\\Delta t) &= (1-\\lambda_0\\Delta t)p_0(t) + \\mu_1\\Delta tp_1(t) \\\\ p_j(t+\\Delta t) &= \\lambda_{j-1}\\Delta tp_{j-1}(t)+(1-\\mu_j\\Delta t-\\lambda_j\\Delta t)p_j(t)+\\mu_{j+1}\\Delta tp_{j+1}(t) \\end{aligned} \\begin{aligned} p_0(t+\\Delta t) &= (1-\\lambda_0\\Delta t)p_0(t) + \\mu_1\\Delta tp_1(t) \\\\ p_j(t+\\Delta t) &= \\lambda_{j-1}\\Delta tp_{j-1}(t)+(1-\\mu_j\\Delta t-\\lambda_j\\Delta t)p_j(t)+\\mu_{j+1}\\Delta tp_{j+1}(t) \\end{aligned} \u6574\u7406\u540e\u53d6\u6781\u9650 \\Delta t\\rightarrow 0 \\Delta t\\rightarrow 0 \uff0c\u4e0a\u5f0f\u53d8\u4e3a\u5bfc\u6570\u5f62\u5f0f\uff1a \\begin{aligned} &\\lim_{\\Delta t\\rightarrow 0} \\frac{p_j(t+\\Delta t)-p_j(t)}{\\Delta t}=\\lambda_{j-1}p_{j-1}(t)+\\mu_{j+1}p_{j+1}(t) - (\\mu_j+\\lambda_j)p_j(t) \\\\ \\Rightarrow &\\frac{\\mathrm dp_j(t)}{\\mathrm dt}=\\lambda_{j-1}p_{j-1}(t)+\\mu_{j+1}p_{j+1}(t) - (\\mu_j+\\lambda_j)p_j(t) \\end{aligned} \\begin{aligned} &\\lim_{\\Delta t\\rightarrow 0} \\frac{p_j(t+\\Delta t)-p_j(t)}{\\Delta t}=\\lambda_{j-1}p_{j-1}(t)+\\mu_{j+1}p_{j+1}(t) - (\\mu_j+\\lambda_j)p_j(t) \\\\ \\Rightarrow &\\frac{\\mathrm dp_j(t)}{\\mathrm dt}=\\lambda_{j-1}p_{j-1}(t)+\\mu_{j+1}p_{j+1}(t) - (\\mu_j+\\lambda_j)p_j(t) \\end{aligned} \u5f53 t\\rightarrow \\infty t\\rightarrow \\infty \u65f6\uff0c\u7cfb\u7edf\u8d8b\u4e8e\u7a33\u6001\uff0c\u5219\u6709 \\lim_{t\\rightarrow \\infty}p_j(t) = p_j \\lim_{t\\rightarrow \\infty}p_j(t) = p_j \uff0c\u6536\u655b\u7684\u5145\u5206\u5fc5\u8981\u6761\u4ef6\u4e3a \\lim_{t\\rightarrow\\infty} \\frac{\\mathrm dp_j(t)}{\\mathrm dt}=0 \\lim_{t\\rightarrow\\infty} \\frac{\\mathrm dp_j(t)}{\\mathrm dt}=0 \u3002\u5373 \\lambda_{j-1}p_{j-1}(t)+\\mu_{j+1}p_{j+1}(t) - (\\mu_j+\\lambda_j)p_j(t)=0 \\lambda_{j-1}p_{j-1}(t)+\\mu_{j+1}p_{j+1}(t) - (\\mu_j+\\lambda_j)p_j(t)=0 \u3002 \u89e3 p_{j+1} p_{j+1} \uff0c\u89e3\u5f97\uff1a p_{j+1} = \\left(\\frac{\\mu_j+\\lambda_j}{\\mu{j+1}}\\right)p_j-\\frac{\\lambda_{j-1}}{\\mu_{j+1}}p_{j-1} p_{j+1} = \\left(\\frac{\\mu_j+\\lambda_j}{\\mu{j+1}}\\right)p_j-\\frac{\\lambda_{j-1}}{\\mu_{j+1}}p_{j-1} \u5bf9\u4e8e p_1 p_1 \uff0c\u6709 p_1=\\frac{\\lambda_0}{\\mu_1}p_0 p_1=\\frac{\\lambda_0}{\\mu_1}p_0 \u3002 \u6839\u636e\u9012\u63a8\u516c\u5f0f\uff0c\u53ef\u4ee5\u7528 p_0 p_0 \u8868\u793a\u51fa p_j p_j \uff1a \\begin{aligned} p_2&=\\left(\\frac{\\mu_1+\\lambda_1}{\\mu_2}\\right)p_1-\\frac{\\lambda _0}{\\mu_2}p_0 = \\frac{\\lambda_0(\\mu_1+\\lambda_1)}{\\mu_1\\mu_2}p_0-\\frac{\\lambda_0}{\\mu_2}p_0=\\frac{\\lambda_0\\lambda_1}{\\mu_1\\mu_2}p_0 \\\\ p_3&=\\left(\\frac{\\mu_2+\\lambda_2}{\\mu_3}\\right)p_2-\\frac{\\lambda_1}{\\mu_3}p_1=\\frac{\\lambda_0\\lambda_1(\\mu_2+\\lambda_2)}{\\mu_1\\mu_2\\mu_3}p_0-\\frac{\\lambda_0\\lambda_1}{\\mu_1\\mu_3}p_0=\\frac{\\lambda_0\\lambda_1\\lambda_2}{\\mu_1\\mu_2\\mu_3}p_0 \\\\ &\\vdots \\\\ &p_j = \\frac{\\lambda_0\\lambda_1\\cdots\\lambda_{j-1}}{\\mu_1\\mu_2\\cdots\\mu_j}p_0=p_0\\prod_{i = 1}^{j}\\frac{\\lambda_{i-1}}{\\mu_j} \\end{aligned} \\begin{aligned} p_2&=\\left(\\frac{\\mu_1+\\lambda_1}{\\mu_2}\\right)p_1-\\frac{\\lambda _0}{\\mu_2}p_0 = \\frac{\\lambda_0(\\mu_1+\\lambda_1)}{\\mu_1\\mu_2}p_0-\\frac{\\lambda_0}{\\mu_2}p_0=\\frac{\\lambda_0\\lambda_1}{\\mu_1\\mu_2}p_0 \\\\ p_3&=\\left(\\frac{\\mu_2+\\lambda_2}{\\mu_3}\\right)p_2-\\frac{\\lambda_1}{\\mu_3}p_1=\\frac{\\lambda_0\\lambda_1(\\mu_2+\\lambda_2)}{\\mu_1\\mu_2\\mu_3}p_0-\\frac{\\lambda_0\\lambda_1}{\\mu_1\\mu_3}p_0=\\frac{\\lambda_0\\lambda_1\\lambda_2}{\\mu_1\\mu_2\\mu_3}p_0 \\\\ &\\vdots \\\\ &p_j = \\frac{\\lambda_0\\lambda_1\\cdots\\lambda_{j-1}}{\\mu_1\\mu_2\\cdots\\mu_j}p_0=p_0\\prod_{i = 1}^{j}\\frac{\\lambda_{i-1}}{\\mu_j} \\end{aligned} \u7531\u4e8e\u7cfb\u7edf\u7684\u72b6\u6001\u53ea\u53ef\u80fd\u53d6 0\\sim\\infty 0\\sim\\infty \u4e4b\u95f4\u7684\u6574\u6570\u503c\uff0c\u6982\u7387\u4e4b\u548c\u4e3a 1 1 \uff0c\u53ef\u4ee5\u8ba1\u7b97\u51fa p_0 p_0 \uff1a p_0=\\frac{1}{1+\\sum_{n=1}^\\infty \\prod_{i=0}^{n}\\frac{\\lambda_{i-1}}{\\mu_i}} p_0=\\frac{1}{1+\\sum_{n=1}^\\infty \\prod_{i=0}^{n}\\frac{\\lambda_{i-1}}{\\mu_i}}","title":"\u751f\u706d\u8fc7\u7a0b"},{"location":"math/queue-theory/chapter-12.html#mm1","text":"\u5bf9\u4e8e M/M/1 M/M/1 \u7cfb\u7edf\uff0c \\lambda_0=\\lambda_1=\\cdots=\\lambda_n=\\lambda, \\mu_1=\\cdots=\\mu_n=\\mu \\lambda_0=\\lambda_1=\\cdots=\\lambda_n=\\lambda, \\mu_1=\\cdots=\\mu_n=\\mu \u3002 \u7531\u6b64\uff0c\u8ba1\u7b97\u51fa M/M/1 M/M/1 \u7cfb\u7edf\u5728\u7a33\u6001\u65f6\u5904\u4e8e p_0 p_0 \u7684\u6982\u7387\uff1a p_0=\\frac{1}{1+\\sum_{n=1}^\\infty \\prod_{i=0}^{n}\\frac{\\lambda}{\\mu}} = \\frac{1}{1+\\sum_{n=1}^\\infty \\rho^n}=\\frac{1}{\\sum_{n=0}^\\infty \\rho^n}=1-\\rho p_0=\\frac{1}{1+\\sum_{n=1}^\\infty \\prod_{i=0}^{n}\\frac{\\lambda}{\\mu}} = \\frac{1}{1+\\sum_{n=1}^\\infty \\rho^n}=\\frac{1}{\\sum_{n=0}^\\infty \\rho^n}=1-\\rho \u6982\u7387\u5206\u5e03\u4e3a\uff1a P(N=n)=\\rho^n(1-\\rho) P(N=n)=\\rho^n(1-\\rho)","title":"M/M/1\u961f\u5217"},{"location":"math/queue-theory/chapter-12.html#mms","text":"\u5bf9\u4e8e M/M/s M/M/s \u7cfb\u7edf\uff0c \\lambda_i, \\mu_i \\lambda_i, \\mu_i \u670d\u4ece\u5982\u4e0b\u89c4\u5f8b\uff1a \\lambda_i = \\lambda \\qquad i=0, 1\\cdots, \\infty \\lambda_i = \\lambda \\qquad i=0, 1\\cdots, \\infty \\mu_i = \\max\\{i, s\\}\\mu \\qquad i=1, 2, \\cdots, \\infty \\mu_i = \\max\\{i, s\\}\\mu \\qquad i=1, 2, \\cdots, \\infty \u8ba1\u7b97\u51fa M/M/s M/M/s \u7cfb\u7edf\u5728\u7a33\u6001\u65f6\u5904\u4e8e p_0 p_0 \u7684\u6982\u7387\uff0c\u4ee4 \\rho_0=\\frac{\\lambda}{\\mu} \\rho_0=\\frac{\\lambda}{\\mu} \uff1a \\begin{aligned} p_0&=\\frac{1}{1+\\sum_{n=1}^\\infty \\prod_{i=0}^{n}\\frac{\\lambda}{\\max\\{i, s\\}\\mu}} \\\\ &= \\frac{1}{\\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}+\\sum_{i=s}^\\infty \\frac{\\rho_0^i}{s!s^{i-s}}} \\\\ &=\\frac{1}{\\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}+\\frac{\\rho_0^s}{s!}\\sum_{i=0}^\\infty \\frac{\\rho_0^i}{s^i}} \\\\ &=\\frac{1}{\\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}} \\end{aligned} \\begin{aligned} p_0&=\\frac{1}{1+\\sum_{n=1}^\\infty \\prod_{i=0}^{n}\\frac{\\lambda}{\\max\\{i, s\\}\\mu}} \\\\ &= \\frac{1}{\\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}+\\sum_{i=s}^\\infty \\frac{\\rho_0^i}{s!s^{i-s}}} \\\\ &=\\frac{1}{\\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}+\\frac{\\rho_0^s}{s!}\\sum_{i=0}^\\infty \\frac{\\rho_0^i}{s^i}} \\\\ &=\\frac{1}{\\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}} \\end{aligned} \u8bbe \\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}=T \\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}=T \uff0c p_i p_i \u53ef\u4ee5\u901a\u8fc7 p_0 p_0 \u63a8\u5bfc\u5f97\uff1a p_i=\\frac{\\lambda_0\\lambda_1\\cdots\\lambda_{i-1}}{\\mu_1\\mu_2\\cdots\\mu_i}p_0=\\left\\{ \\begin{aligned} & \\frac{\\rho_0^i}{i!}p_0=\\frac{\\rho_0^i}{i!\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)} & i\\leq s \\\\ & \\frac{\\rho_0^i}{s!s^{i-s}}p_0=\\frac{\\rho_0^i}{s!s^{i-s}\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)} & i > s \\end{aligned} \\right. p_i=\\frac{\\lambda_0\\lambda_1\\cdots\\lambda_{i-1}}{\\mu_1\\mu_2\\cdots\\mu_i}p_0=\\left\\{ \\begin{aligned} & \\frac{\\rho_0^i}{i!}p_0=\\frac{\\rho_0^i}{i!\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)} & i\\leq s \\\\ & \\frac{\\rho_0^i}{s!s^{i-s}}p_0=\\frac{\\rho_0^i}{s!s^{i-s}\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)} & i > s \\end{aligned} \\right. \u5f53 n \\geq s n \\geq s \u65f6\uff0c\u987e\u5ba2\u5230\u8fbe\u7cfb\u7edf\u65f6\u9700\u8981\u7b49\u5f85\uff0c\u5219\u6709\uff1a p_D=\\sum_{i=s}^\\infty p_i= \\sum_{i=s}^\\infty \\frac{\\rho^i_0}{s!s^{i-s}}p_0 = \\frac{\\rho^s_0p_0}{(s-1)!(s-\\rho_0)}=\\frac{\\rho^s_0}{(s-1)!(s-\\rho_0)T+\\rho_0^s} p_D=\\sum_{i=s}^\\infty p_i= \\sum_{i=s}^\\infty \\frac{\\rho^i_0}{s!s^{i-s}}p_0 = \\frac{\\rho^s_0p_0}{(s-1)!(s-\\rho_0)}=\\frac{\\rho^s_0}{(s-1)!(s-\\rho_0)T+\\rho_0^s} \u5f53 N\\leq s N\\leq s \u65f6\uff0c\u7cfb\u7edf\u4e2d\u6ca1\u6709\u961f\u5217\uff0c L_q=0 L_q=0 \uff0c\u5f53 N>s N>s \u65f6\uff0c\u961f\u5217\u957f\u5ea6\u4e3a N-s N-s \uff0c\u56e0\u6b64\u7a33\u6001\u65f6\u7684\u5e73\u5747\u6392\u961f\u957f\u4e3a\uff1a \\begin{aligned} L_q&=\\sum_{i=s + 1}^\\infty (i - s)p_i \\\\ &=\\sum_{i=s}^\\infty (i-s)\\frac{\\rho^i_0}{s!s^{i-s}}p_0 \\\\ &= \\frac{\\rho^s_0p_0}{s!}\\sum_{i=0}^\\infty \\frac{i\\rho_0^i}{s^i} \\\\ &= \\frac{\\rho^s_0p_0}{s!}\\sum_{i=1}^\\infty \\left(\\frac{\\rho_0}{s}\\right)^i\\frac{s}{s-\\rho_0} \\\\ &= \\frac{\\rho^s_0p_0}{(s-1)!(s-\\rho)}\\frac{\\rho_0/s}{1-\\rho_0/s} \\\\ &= \\frac{\\rho^{s+1}_0p_0}{(s-1)!(s-\\rho_0)^2} \\end{aligned} \\begin{aligned} L_q&=\\sum_{i=s + 1}^\\infty (i - s)p_i \\\\ &=\\sum_{i=s}^\\infty (i-s)\\frac{\\rho^i_0}{s!s^{i-s}}p_0 \\\\ &= \\frac{\\rho^s_0p_0}{s!}\\sum_{i=0}^\\infty \\frac{i\\rho_0^i}{s^i} \\\\ &= \\frac{\\rho^s_0p_0}{s!}\\sum_{i=1}^\\infty \\left(\\frac{\\rho_0}{s}\\right)^i\\frac{s}{s-\\rho_0} \\\\ &= \\frac{\\rho^s_0p_0}{(s-1)!(s-\\rho)}\\frac{\\rho_0/s}{1-\\rho_0/s} \\\\ &= \\frac{\\rho^{s+1}_0p_0}{(s-1)!(s-\\rho_0)^2} \\end{aligned} \u72b6\u6001\u4e3a n n \u7684\u7a33\u6001\u65f6\u7cfb\u7edf\u63a5\u53d7\u670d\u52a1\u7684\u5b9e\u4f53\u6570\u91cf\u4e3a\uff1a \\left\\{ \\begin{aligned} &n & n\\leq s \\\\ &s & n> s \\end{aligned} \\right . \\left\\{ \\begin{aligned} &n & n\\leq s \\\\ &s & n> s \\end{aligned} \\right . \u56e0\u6b64\uff0c\u7a33\u6001\u7cfb\u7edf\u4e2d\u63a5\u53d7\u670d\u52a1\u7684\u5b9e\u4f53\u5e73\u5747\u6570\u91cf\u4e3a\uff1a \\begin{aligned} L-L_q&=\\sum_{i=0}^s ip_i+\\sum_{i=s+1}^\\infty sp_i \\\\ &=\\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}p_0+s\\sum_{i=s+1}^\\infty \\frac{\\rho_0^i}{s!s^{i-s}}p_0 \\\\ &= \\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}p_0 + \\frac{\\rho_0^sp_0}{(s-1)!}\\sum_{i=1}^\\infty \\frac{\\rho_0^i}{s^i} \\\\ &= \\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}p_0 + \\frac{\\rho_0^{s+1}p_0}{(s-1)!(s-\\rho_0)} \\\\ &= \\frac{\\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}}{\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)} + \\frac{\\rho_0^{s+1}p_0}{(s-1)!(s-\\rho_0)} \\\\ &= \\frac{\\rho_0 T+1}{T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}} + \\frac{\\rho_0^{s+1}}{(s-1)!(s-\\rho_0)T+\\rho_0^s} \\\\ &= \\frac{(\\rho_0 T+1)(s-1)!(s-\\rho_0) + \\rho_0^{s+1}}{(s-1)!(s-\\rho_0)T+\\rho_0^s}\\\\ &= \\rho_0 + \\frac{(s-1)!(s-\\rho_0)}{(s-1)!(s-\\rho_0)T+\\rho_0^s} \\end{aligned} \\begin{aligned} L-L_q&=\\sum_{i=0}^s ip_i+\\sum_{i=s+1}^\\infty sp_i \\\\ &=\\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}p_0+s\\sum_{i=s+1}^\\infty \\frac{\\rho_0^i}{s!s^{i-s}}p_0 \\\\ &= \\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}p_0 + \\frac{\\rho_0^sp_0}{(s-1)!}\\sum_{i=1}^\\infty \\frac{\\rho_0^i}{s^i} \\\\ &= \\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}p_0 + \\frac{\\rho_0^{s+1}p_0}{(s-1)!(s-\\rho_0)} \\\\ &= \\frac{\\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}}{\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)} + \\frac{\\rho_0^{s+1}p_0}{(s-1)!(s-\\rho_0)} \\\\ &= \\frac{\\rho_0 T+1}{T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}} + \\frac{\\rho_0^{s+1}}{(s-1)!(s-\\rho_0)T+\\rho_0^s} \\\\ &= \\frac{(\\rho_0 T+1)(s-1)!(s-\\rho_0) + \\rho_0^{s+1}}{(s-1)!(s-\\rho_0)T+\\rho_0^s}\\\\ &= \\rho_0 + \\frac{(s-1)!(s-\\rho_0)}{(s-1)!(s-\\rho_0)T+\\rho_0^s} \\end{aligned} \u987e\u5ba2\u7684\u5e73\u5747\u9017\u7559\u65f6\u95f4 W=\\frac{L}{\\lambda} W=\\frac{L}{\\lambda} \uff1a \\begin{aligned} W&=\\frac{L}{\\lambda} \\\\ &= \\frac{\\sum_{i=0}^\\infty ip_i}{\\lambda} \\\\ &= \\frac{\\sum_{i=1}^s \\left(\\frac{\\rho_0^i}{(i-1)!\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)}\\right) + \\sum_{i=s+1}^\\infty \\left(i\\frac{\\rho_0^i}{s!s^{i-s}\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)}\\right) }{\\lambda} \\\\ &= \\frac{\\frac{T(s-1)!(s-\\rho_0)}{T(s-1)!(s-\\rho_0) + \\rho_0^s} + \\frac{\\rho_0^{s+1}(s-\\rho_0+1)/(s-\\rho_0)}{T(s-1)!(s-\\rho_0) + \\rho_0^s}}{\\lambda} \\\\ &= \\frac{T(s-1)!(s-\\rho_0) + \\rho_0^{s+1}(s-\\rho_0+1)/(s-\\rho_0)}{\\lambda(T(s-1)!(s-\\rho_0) + \\rho_0^s)} \\end{aligned} \\begin{aligned} W&=\\frac{L}{\\lambda} \\\\ &= \\frac{\\sum_{i=0}^\\infty ip_i}{\\lambda} \\\\ &= \\frac{\\sum_{i=1}^s \\left(\\frac{\\rho_0^i}{(i-1)!\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)}\\right) + \\sum_{i=s+1}^\\infty \\left(i\\frac{\\rho_0^i}{s!s^{i-s}\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)}\\right) }{\\lambda} \\\\ &= \\frac{\\frac{T(s-1)!(s-\\rho_0)}{T(s-1)!(s-\\rho_0) + \\rho_0^s} + \\frac{\\rho_0^{s+1}(s-\\rho_0+1)/(s-\\rho_0)}{T(s-1)!(s-\\rho_0) + \\rho_0^s}}{\\lambda} \\\\ &= \\frac{T(s-1)!(s-\\rho_0) + \\rho_0^{s+1}(s-\\rho_0+1)/(s-\\rho_0)}{\\lambda(T(s-1)!(s-\\rho_0) + \\rho_0^s)} \\end{aligned}","title":"M/M/s\u961f\u5217"}],"index":{"fieldVectors":[["title/index.html",[0,5.748]],["text/index.html",[1,5.606,2,7.906,3,0.777,4,5.606,5,6.828,6,5.606,7,5.606,8,5.606,9,5.617,10,5.606,11,4.869,12,5.606,13,6.606,14,5.606,15,4.409,16,5.606,17,5.606,18,6.606,19,5.606,20,7.143,21,5.606,22,5.606,23,4.869,24,5.606,25,5.606,26,5.606,27,5.606,28,5.606,29,4.869,30,7.143,31,5.606,32,5.606,33,5.606,34,5.606,35,5.606]],["title/index.html#welcome-to-mkdocs",[1,3.913,2,3.618]],["text/index.html#welcome-to-mkdocs",[3,0.633,4,7.327,5,6.364,6,7.327,7,7.327]],["title/index.html#commands",[8,5.159]],["text/index.html#commands",[2,8.062,5,5.643,9,6.154,10,6.496,11,5.643,12,6.496,13,6.008,14,6.496,15,5.108,16,6.496,17,6.496,18,6.008,19,6.496,20,7.826,21,6.496,22,6.496,23,5.643,24,6.496,25,6.496,26,6.496]],["title/index.html#project-layout",[13,3.618,27,3.913]],["text/index.html#project-layout",[3,0.768,5,5.982,18,6.369,28,6.887,29,5.982,30,8.103,31,6.887,32,6.887,33,6.887,34,6.887,35,6.887]],["title/about.html",[]],["text/about.html",[3,0.726,36,8.164,37,6.036,38,8.164]],["title/weixin-2020.html",[39,5.748]],["text/weixin-2020.html",[3,0.822]],["title/weixin-2020.html#_1",[3,0.446]],["text/weixin-2020.html#_1",[3,0.818]],["title/coding/index.html",[3,0.446]],["text/coding/index.html",[3,0.807,40,5.618,41,5.39]],["title/coding/index.html#_1",[3,0.446]],["text/coding/index.html#_1",[3,0.793,40,5.689,41,5.458]],["title/coding/dsa.html",[3,0.446]],["text/coding/dsa.html",[3,0.824]],["title/coding/dsa.html#_1",[3,0.446]],["text/coding/dsa.html#_1",[3,0.821]],["title/coding/leetcode.html",[3,0.446]],["text/coding/leetcode.html",[3,0.826,40,4.145,42,0.637,43,2.791,44,3.472,45,5.271,46,2.445,47,3.976,48,3.976,49,3.698,50,4.342,51,3.698,52,4.342,53,5.271,54,4.342,55,4.342,56,3.976,57,3.829,58,4.145,59,1.96,60,4.342,61,4.342,62,4.342,63,4.342,64,4.276,65,4.342,66,4.342,67,4.342,68,4.342,69,4.342,70,4.342,71,4.342,72,4.342,73,4.342,74,4.342,75,4.342]],["title/coding/leetcode.html#leetcode",[3,0.338,40,3.077]],["text/coding/leetcode.html#leetcode",[3,0.825,42,0.646,43,2.83,44,3.521,45,5.345,46,2.479,47,4.032,48,4.032,49,3.749,50,4.402,51,3.749,52,4.402,53,5.345,54,4.402,55,4.402,56,4.032,57,3.882,58,4.203,59,1.988,60,4.402,61,4.402,62,4.402,63,4.402,64,4.315,65,4.402,66,4.402,67,4.402,68,4.402,69,4.402,70,4.402,71,4.402,72,4.402,73,4.402,74,4.402,75,4.402]],["title/coding/python.html",[3,0.446]],["text/coding/python.html",[3,0.763,41,6.337]],["title/coding/python.html#python",[41,3.892]],["text/coding/python.html#python",[]],["title/coding/python.html#_1",[3,0.446]],["text/coding/python.html#_1",[41,5.673]],["title/coding/dsa/vector-and-list.html",[3,0.446]],["text/coding/dsa/vector-and-list.html",[3,0.836,76,3.462,77,4.766,78,3.748,79,4.766,80,4.766,81,4.766,82,4.766,83,4.766,84,4.766,85,4.766,86,4.766,87,4.766,88,4.665,89,4.14,90,4.766,91,4.766,92,4.766,93,4.766,94,0.93,95,4.766,96,4.766,97,4.766,98,4.766]],["title/coding/dsa/vector-and-list.html#_1",[3,0.446]],["text/coding/dsa/vector-and-list.html#_1",[3,0.734]],["title/coding/dsa/vector-and-list.html#_2",[3,0.446]],["text/coding/dsa/vector-and-list.html#_2",[3,0.827,76,4.666,77,6.423,78,5.051,79,6.423,80,6.423,81,6.423,82,6.423,83,6.423]],["title/coding/dsa/vector-and-list.html#_3",[3,0.446]],["text/coding/dsa/vector-and-list.html#_3",[3,0.833,84,5.579,85,5.579,86,5.579,87,5.579,88,5.172,89,4.846,90,5.579,91,5.579,92,5.579,93,5.579,94,1.089,95,5.579,96,5.579,97,5.579,98,5.579]],["title/coding/leetcode/1.html",[3,0.338,42,0.473]],["text/coding/leetcode/1.html",[3,0.836,42,0.527,43,1.804,46,1.58,94,1.352,99,3.963,100,4.617,101,0.927,102,1.496,103,1.789,104,2.059,105,2.059,106,1.44,107,0.412,108,1.318,109,0.916,110,1.25,111,1.799,112,1.318,113,1.318,114,1.19,115,1.138,116,2.067,117,2.059,118,4.386,119,2.059,120,2.555,121,4.407,122,3.806,123,4.407,124,2.059,125,3.49,126,2.643,127,5.551,128,4.347,129,1.967,130,1.643,131,6.683,132,4.335,133,5.45,134,1.008,135,2.313,136,1.619,137,1.398,138,0.955]],["title/coding/leetcode/1.html#1",[3,0.338,42,0.473]],["text/coding/leetcode/1.html#1",[3,0.734]],["title/coding/leetcode/1.html#_1",[3,0.446]],["text/coding/leetcode/1.html#_1",[3,0.82,42,0.752,43,4.034,46,3.534,99,4.034,100,6.275,101,1.26,102,4.514,103,5.398,104,6.214,105,6.214,106,1.124,107,1.243]],["title/coding/leetcode/1.html#_2",[3,0.446]],["text/coding/leetcode/1.html#_2",[3,0.836,42,0.269,94,1.392,99,3.884,100,3.789,101,0.761,106,1.45,108,1.426,109,0.967,110,1.352,111,1.901,112,1.426,113,1.426,114,1.288,115,1.231,116,2.205,117,2.227,118,4.554,119,2.227,120,2.665,121,4.596,122,3.969,123,4.596,124,2.227,125,3.624,126,2.792,127,5.743,128,4.417,129,2.062,130,1.736,131,6.894,132,4.451,133,5.608,134,1.091,135,2.467,136,1.751,137,1.513,138,1.033]],["title/coding/leetcode/101.html",[3,0.338,139,3.618]],["text/coding/leetcode/101.html",[3,0.833,42,0.652,94,0.725,101,1.153,107,0.743,109,1.556,120,3.519,138,1.723,139,3.436,140,3.715,141,2.03,142,2.096,143,3.715,144,2.148,145,2.922,146,2.922,147,2.606,148,6.07,149,3.231,150,4.733,151,4.591,152,3.118,153,6.968,154,7.719,155,7.719,156,1.854,157,3.715,158,5.48,159,1.819]],["title/coding/leetcode/101.html#101",[3,0.338,139,3.618]],["text/coding/leetcode/101.html#101",[3,0.734]],["title/coding/leetcode/101.html#_1",[3,0.446]],["text/coding/leetcode/101.html#_1",[3,0.822,42,0.924,101,1.423,107,1.25,140,6.248,141,2.507,142,2.971,143,6.248]],["title/coding/leetcode/101.html#_2",[3,0.446]],["text/coding/leetcode/101.html#_2",[3,0.831,94,0.836,109,1.643,120,3.689,138,1.988,144,2.477,145,3.37,146,3.37,147,3.006,148,6.363,149,3.496,150,5.047,151,4.896,152,3.451,153,7.432,154,8.092,155,8.092,156,2.138,157,4.285,158,5.844,159,2.098]],["title/coding/leetcode/102.html",[3,0.338,160,3.618]],["text/coding/leetcode/102.html",[3,0.836,42,0.851,43,0.967,46,0.847,76,2.238,94,1.601,103,1.586,106,1.15,107,0.365,108,1.169,109,1.195,110,3.45,111,2.165,112,1.169,113,1.169,114,1.056,115,3.342,116,1.108,120,2.139,126,4.015,129,2.734,130,2.145,137,1.24,138,2.806,141,0.897,144,1.056,145,1.436,146,1.436,147,1.281,148,3.69,149,1.567,150,2.092,151,2.029,158,4.121,160,1.689,161,1.826,162,1.826,163,1.826,164,1.826,165,4.076,166,1.586,167,1.586,168,1.436,169,2.31,170,1.429,171,4.076,172,6.048,173,5.683,174,6.048,175,5.24,176,1.972,177,3.995,178,5.24,179,5.24,180,5.24,181,5.24,182,5.683]],["title/coding/leetcode/102.html#102",[3,0.338,160,3.618]],["text/coding/leetcode/102.html#102",[3,0.734]],["title/coding/leetcode/102.html#_1",[3,0.446]],["text/coding/leetcode/102.html#_1",[3,0.82,43,3.46,46,3.031,103,5.675,107,1.307,141,2.288,161,6.533,162,6.533,163,6.533,164,6.533]],["title/coding/leetcode/102.html#_2",[3,0.446]],["text/coding/leetcode/102.html#_2",[3,0.836,42,0.867,76,2.342,94,1.618,106,1.177,108,1.234,109,1.229,110,3.546,111,2.233,112,1.234,113,1.234,114,1.114,115,3.427,116,1.17,120,2.214,126,4.102,129,2.785,130,2.205,137,1.309,138,2.877,144,1.114,145,1.516,146,1.516,147,1.352,148,3.819,149,1.64,150,2.189,151,2.124,158,4.249,165,4.218,166,1.674,167,1.674,168,1.516,169,2.402,170,1.495,171,4.218,172,6.203,173,5.843,174,6.203,175,5.404,176,2.064,177,4.155,178,5.404,179,5.404,180,5.404,181,5.404,182,5.843]],["title/coding/leetcode/118.html",[3,0.338,62,3.223]],["text/coding/leetcode/118.html",[3,0.836,42,0.984,62,1.96,76,2.784,94,1.66,101,0.634,106,0.998,107,0.476,108,1.524,109,1.359,110,3.923,111,2.808,112,1.524,113,1.524,114,1.376,115,2.659,126,2.921,129,2.837,130,2.668,138,1.778,165,5.254,166,2.067,167,2.067,176,2.454,183,7.811,184,0.911,185,2.38,186,2.38,187,2.067,188,2.38,189,3.833,190,3.329,191,5.517,192,3.496,193,4.812,194,6.048]],["title/coding/leetcode/118.html#118",[3,0.338,62,3.223]],["text/coding/leetcode/118.html#118",[3,0.734]],["title/coding/leetcode/118.html#_1",[3,0.446]],["text/coding/leetcode/118.html#_1",[3,0.809,42,0.818,107,1.353,183,7.415,184,2.59,185,6.765,186,6.765,187,5.876,188,6.765]],["title/coding/leetcode/118.html#_2",[3,0.446]],["text/coding/leetcode/118.html#_2",[3,0.836,42,0.986,76,2.916,94,1.677,101,0.664,106,1.032,108,1.614,109,1.395,110,4.025,111,2.874,112,1.614,113,1.614,114,1.458,115,2.763,126,3.036,129,2.892,130,2.725,138,1.862,165,5.408,166,2.19,167,2.19,176,2.57,183,7.773,189,4.014,190,3.487,191,5.702,192,3.633,193,5.001,194,6.226]],["title/coding/leetcode/119.html",[3,0.272,63,2.596,64,1.963]],["text/coding/leetcode/119.html",[3,0.834,42,0.935,63,3.07,64,2.322,94,1.65,106,1.151,107,0.746,108,2.386,109,1.338,110,2.262,111,2.234,112,2.386,113,2.386,114,2.155,115,2.059,126,4.498,129,2.712,130,2.04,134,1.825,141,1.086,187,3.238,195,4.034,196,5.407,197,5.407,198,2.059,199,6.362,200,7.728,201,6.979,202,3.727]],["title/coding/leetcode/119.html#119-ii",[3,0.272,63,2.596,64,1.963]],["text/coding/leetcode/119.html#119-ii",[3,0.734]],["title/coding/leetcode/119.html#_1",[3,0.446]],["text/coding/leetcode/119.html#_1",[3,0.814,107,1.322,141,1.925,187,5.74,195,5.069,196,7.907,197,7.907]],["title/coding/leetcode/119.html#_2",[3,0.446]],["text/coding/leetcode/119.html#_2",[3,0.833,42,0.97,94,1.689,106,1.224,108,2.663,109,1.422,110,2.525,111,2.416,112,2.663,113,2.663,114,2.405,115,2.299,126,4.692,129,2.851,130,2.207,134,2.038,198,2.299,199,6.763,200,8.016,201,7.336,202,4.161]],["title/coding/leetcode/120.html",[3,0.338,203,3.223]],["text/coding/leetcode/120.html",[3,0.834,42,0.968,59,2.03,94,1.453,101,0.903,102,3.965,106,1.404,107,0.756,109,1.148,116,2.292,132,4.974,136,2.97,141,1.1,169,3.705,170,2.532,184,1.446,203,3.111,204,3.777,205,3.777,206,3.777,207,4.741,208,2.97,209,3.777,210,6.41,211,7.022,212,5.458,213,7.448]],["title/coding/leetcode/120.html#120",[3,0.338,203,3.223]],["text/coding/leetcode/120.html#120",[3,0.734]],["title/coding/leetcode/120.html#_1",[3,0.446]],["text/coding/leetcode/120.html#_1",[3,0.827,42,0.903,59,2.778,101,1.235,102,5.425,107,1.204,141,1.753,184,2.305,204,6.018,205,6.018,206,6.018,207,6.487]],["title/coding/leetcode/120.html#_2",[3,0.446]],["text/coding/leetcode/120.html#_2",[3,0.832,42,0.961,94,1.55,106,1.485,109,1.296,116,2.723,132,5.198,136,3.528,169,4.07,170,2.859,208,3.528,209,4.486,210,7.04,211,7.579,212,6.163,213,7.944]],["title/coding/leetcode/121.html",[3,0.338,214,3.223]],["text/coding/leetcode/121.html",[3,0.835,42,0.921,43,2.119,94,1.407,101,0.941,106,1.432,107,0.8,109,0.841,122,4.896,132,3.453,137,5.173,184,2.535,214,3.295,215,3.475,216,4.238,217,3.475,218,5.689,219,5.689,220,3.475,221,6.262,222,4.941,223,7.209]],["title/coding/leetcode/121.html#121",[3,0.338,214,3.223]],["text/coding/leetcode/121.html#121",[3,0.734]],["title/coding/leetcode/121.html#_1",[3,0.446]],["text/coding/leetcode/121.html#_1",[3,0.829,42,1.016,43,3.09,101,1.212,106,1.325,107,1.167,184,3.066,215,5.068,216,5.126,217,5.068]],["title/coding/leetcode/121.html#_2",[3,0.446]],["text/coding/leetcode/121.html#_2",[3,0.832,42,0.596,94,1.537,106,1.425,109,1.037,122,5.351,132,3.988,137,5.573,218,6.569,219,6.569,220,4.283,221,6.843,222,5.706,223,7.879]],["title/coding/leetcode/122.html",[3,0.272,64,1.963,65,2.596]],["text/coding/leetcode/122.html",[3,0.835,42,1.024,43,1.767,64,2.079,65,2.748,94,1.291,101,1.094,106,1.281,107,0.668,109,1.048,128,4.076,135,2.266,141,2.164,142,2.887,184,2.844,215,2.898,216,3.19,217,2.898,220,4.328,221,5.747,222,5.747,224,3.337,225,3.337,226,2.535,227,3.337,228,4.983,229,4.051]],["title/coding/leetcode/122.html#122-ii",[3,0.272,64,1.963,65,2.596]],["text/coding/leetcode/122.html#122-ii",[3,0.734]],["title/coding/leetcode/122.html#_1",[3,0.446]],["text/coding/leetcode/122.html#_1",[3,0.834,42,1.037,43,2.385,101,1.167,106,1.276,107,0.901,141,2.394,142,3.194,184,3.147,215,3.912,216,3.956,217,3.912,224,4.504,225,4.504,226,3.144,227,4.504]],["title/coding/leetcode/122.html#_2",[3,0.446]],["text/coding/leetcode/122.html#_2",[3,0.831,42,0.956,94,1.543,101,0.823,106,1.195,109,1.389,128,4.572,135,3.378,220,5.739,221,6.867,222,6.867,228,6.607,229,5.039]],["title/coding/leetcode/125.html",[3,0.338,66,3.223]],["text/coding/leetcode/125.html",[3,0.835,42,0.565,46,1.42,56,2.309,66,2.521,94,0.597,101,0.506,106,1.234,107,0.612,109,1.332,152,3.272,156,2.33,159,2.286,229,4.301,230,3.06,231,3.06,232,3.06,233,3.06,234,3.06,235,2.658,236,3.06,237,3.06,238,3.06,239,6.819,240,3.16,241,5.076,242,3.671,243,4.669,244,6.819,245,6.819,246,3.171,247,2.407,248,2.407,249,4.657,250,6.335]],["title/coding/leetcode/125.html#125",[3,0.338,66,3.223]],["text/coding/leetcode/125.html#125",[3,0.734]],["title/coding/leetcode/125.html#_1",[3,0.446]],["text/coding/leetcode/125.html#_1",[3,0.808,42,0.809,101,1.106,107,1.338,156,3.336,159,3.274,230,6.686,231,6.686,232,6.686,233,6.686,234,6.686,235,5.807]],["title/coding/leetcode/125.html#_2",[3,0.446]],["text/coding/leetcode/125.html#_2",[3,0.835,42,0.401,46,1.539,56,2.502,94,0.647,106,1.278,109,1.387,152,3.436,156,1.655,159,1.625,229,4.48,236,3.317,237,3.317,238,3.317,239,7.063,240,3.292,241,5.151,242,3.902,243,4.962,244,7.063,245,7.063,246,3.37,247,2.609,248,2.609,249,4.754,250,6.466]],["title/coding/leetcode/13.html",[3,0.338,47,2.952]],["text/coding/leetcode/13.html",[3,0.835,42,0.945,46,2.148,47,1.697,57,3.877,64,2.885,94,0.714,101,0.606,106,0.407,107,0.45,109,0.473,128,3.896,129,2.985,135,3.99,141,1.349,142,2.448,170,3.08,184,2.542,226,2.715,240,1.827,241,2.168,251,6.14,252,4.952,253,4.418,254,4.839,255,4.575,256,4.026,257,4.936,258,4.631,259,2.249,260,2.249,261,2.249,262,2.249,263,2.249,264,2.249,265,4.631,266,3.661,267,2.249,268,3.18,269,1.954,270,3.661,271,2.249,272,3.661,273,2.249,274,2.249,275,2.249,276,2.249,277,2.249,278,2.249,279,2.249,280,2.249,281,2.249,282,2.249,283,2.249,284,2.249,285,2.249,286,2.249,287,2.249,288,6.639]],["title/coding/leetcode/13.html#13",[3,0.338,47,2.952]],["text/coding/leetcode/13.html#13",[3,0.734]],["title/coding/leetcode/13.html#_1",[3,0.446]],["text/coding/leetcode/13.html#_1",[3,0.831,42,0.868,46,2.821,57,4.417,64,3.788,101,0.845,107,0.69,141,1.772,142,2.921,170,3.33,184,2.878,226,2.597,251,6.638,252,5.287,253,4.716,254,5.009,255,4.883,256,3.852,257,4.721,258,6.081,259,3.447,260,3.447,261,3.447,262,3.447,263,3.447,264,3.447,265,6.081,266,5.106,267,3.447,268,4.435,269,2.994,270,5.106,271,3.447,272,5.106,273,3.447,274,3.447,275,3.447,276,3.447,277,3.447,278,3.447,279,3.447,280,3.447,281,3.447,282,3.447,283,3.447,284,3.447,285,3.447]],["title/coding/leetcode/13.html#_2",[3,0.446]],["text/coding/leetcode/13.html#_2",[3,0.835,42,0.977,57,2.606,94,1.026,106,0.649,109,0.754,128,4.438,129,3.339,135,4.955,170,2.439,184,1.374,226,2.675,240,2.624,241,3.113,251,4.862,252,4.135,253,3.689,254,4.331,255,3.819,256,3.966,257,4.862,286,3.587,287,3.587,288,7.878]],["title/coding/leetcode/136.html",[3,0.338,67,3.223]],["text/coding/leetcode/136.html",[3,0.834,42,0.753,67,3.754,94,1.489,99,3.299,101,0.754,106,1.38,107,0.912,109,0.958,118,6.132,125,3.602,129,2.759,142,1.771,253,5.604,289,4.558,290,4.558,291,4.558,292,4.558]],["title/coding/leetcode/136.html#136",[3,0.338,67,3.223]],["text/coding/leetcode/136.html#136",[3,0.734]],["title/coding/leetcode/136.html#_1",[3,0.446]],["text/coding/leetcode/136.html#_1",[3,0.814,42,0.973,101,1.126,107,1.361,142,2.645,289,6.805,290,6.805]],["title/coding/leetcode/136.html#_2",[3,0.446]],["text/coding/leetcode/136.html#_2",[3,0.832,94,1.556,99,3.55,106,1.443,109,1.069,118,6.305,125,3.876,129,2.915,253,5.815,291,5.084,292,5.084]],["title/coding/leetcode/14.html",[3,0.338,48,2.952]],["text/coding/leetcode/14.html",[3,0.836,42,0.959,48,1.911,59,0.942,94,0.979,101,0.946,106,1.348,107,0.507,109,1.312,111,2.073,129,1.949,130,2.629,134,2.456,135,1.72,138,1.175,176,1.621,192,4.152,229,4.238,240,4.16,242,1.992,293,2.533,294,2.533,295,2.533,296,2.2,297,5.016,298,5.016,299,4.028,300,4.152,301,4.152,302,4.028,303,6.052,304,7.232,305,6.239]],["title/coding/leetcode/14.html#14",[3,0.338,48,2.952]],["text/coding/leetcode/14.html#14",[3,0.734]],["title/coding/leetcode/14.html#_1",[3,0.446]],["text/coding/leetcode/14.html#_1",[3,0.824,42,0.795,101,1.087,107,1.315,242,5.167,293,6.571,294,6.571,295,6.571]],["title/coding/leetcode/14.html#_2",[3,0.446]],["text/coding/leetcode/14.html#_2",[3,0.836,42,0.962,59,1.014,94,1.027,101,0.87,106,1.38,109,1.359,111,2.174,129,2.045,130,2.704,134,2.577,135,1.851,138,1.264,176,1.745,192,4.325,229,4.391,240,4.222,296,2.367,297,5.262,298,5.262,299,4.269,300,4.325,301,4.325,302,4.269,303,6.225,304,7.419,305,6.465]],["title/coding/leetcode/155.html",[3,0.338,306,3.618]],["text/coding/leetcode/155.html",[3,0.834,9,1.978,37,2.072,42,0.604,94,1.408,101,0.826,106,0.904,107,0.503,109,1.05,111,1.04,114,1.454,115,1.39,116,1.527,120,2.596,121,3.151,122,4.5,130,1.512,134,1.232,136,1.978,141,1.455,149,2.541,169,2.887,170,3.347,198,2.759,208,1.978,306,2.327,307,2.516,308,4.994,309,7.323,310,2.516,311,4.007,312,2.516,313,2.516,314,2.516,315,2.516,316,7.621,317,4.007,318,2.516,319,4.007,320,2.516,321,2.516,322,5.695,323,2.185,324,2.516,325,2.516,326,2.516,327,2.516,328,4.007,329,2.516,330,7.461,331,2.516,332,2.516,333,2.516,334,2.516,335,2.185,336,2.185,337,2.516,338,2.516,339,2.516,340,2.516,341,2.516,342,2.516,343,2.516]],["title/coding/leetcode/155.html#155",[3,0.338,306,3.618]],["text/coding/leetcode/155.html#155",[3,0.734]],["title/coding/leetcode/155.html#_1",[3,0.446]],["text/coding/leetcode/155.html#_1",[3,0.827,9,4.164,101,1.266,106,0.958,107,1.059,141,2.229,170,2.456,307,5.295,308,7.651,309,7.076,310,5.295,311,6.885,312,5.295,313,5.295,314,5.295,315,5.295,316,7.076,317,6.885,318,5.295,319,6.885,320,5.295,321,5.295]],["title/coding/leetcode/155.html#_2",[3,0.446]],["text/coding/leetcode/155.html#_2",[3,0.833,37,2.475,42,0.677,94,1.495,106,0.833,109,1.177,111,1.241,114,1.737,115,1.66,116,1.823,120,2.859,121,3.62,122,4.845,130,1.737,134,1.471,136,2.362,149,2.847,169,3.235,170,3.445,198,3.092,208,2.362,309,7.263,316,7.649,322,6.272,323,2.609,324,3.004,325,3.004,326,3.004,327,3.004,328,4.603,329,3.004,330,7.674,331,3.004,332,3.004,333,3.004,334,3.004,335,2.609,336,2.609,337,3.004,338,3.004,339,3.004,340,3.004,341,3.004,342,3.004,343,3.004]],["title/coding/leetcode/189.html",[3,0.338,68,3.223]],["text/coding/leetcode/189.html",[3,0.834,42,0.955,68,2.732,94,1.446,99,4.277,101,1.168,106,0.898,107,0.664,109,0.698,125,4.441,141,1.446,195,5.099,198,2.741,249,4.083,250,5.554,256,3.743,344,3.317,345,4.962,346,3.317,347,3.317,348,3.317,349,4.962,350,3.317,351,3.317,352,3.604,353,5.188,354,3.805,355,2.881]],["title/coding/leetcode/189.html#189",[3,0.338,68,3.223]],["text/coding/leetcode/189.html#189",[3,0.734]],["title/coding/leetcode/189.html#_1",[3,0.446]],["text/coding/leetcode/189.html#_1",[3,0.828,42,1.061,101,1.343,107,1.064,141,2.012,195,4.692,256,5.21,344,5.32,345,6.906,346,5.32,347,5.32,348,5.32,349,6.906,350,5.32,351,5.32,352,5.016]],["title/coding/leetcode/189.html#_2",[3,0.446]],["text/coding/leetcode/189.html#_2",[3,0.832,42,0.509,94,1.57,99,4.536,101,0.696,106,1.066,109,0.885,125,4.775,195,5.157,198,3.256,249,4.487,250,6.103,353,5.797,354,4.355,355,3.654]],["title/coding/leetcode/19.html",[59,1.455,356,3.618]],["text/coding/leetcode/19.html",[3,0.834,42,0.829,59,3.005,94,1.214,101,1.03,106,0.951,107,0.718,109,1.309,120,3.327,128,4.498,138,2.887,141,1.532,142,1.394,144,2.074,149,1.825,184,2.013,249,3.962,354,2.296,356,3.317,357,2.436,358,2.436,359,2.296,360,4.429,361,4.766,362,3.587,363,6.854]],["title/coding/leetcode/19.html#19-n",[59,1.455,356,3.618]],["text/coding/leetcode/19.html#19-n",[3,0.734]],["title/coding/leetcode/19.html#_1",[3,0.446]],["text/coding/leetcode/19.html#_1",[3,0.818,42,0.937,59,3.101,101,1.379,107,1.278,141,2.257,142,2.483,184,2.966]],["title/coding/leetcode/19.html#_2",[3,0.446]],["text/coding/leetcode/19.html#_2",[3,0.833,42,0.695,59,2.698,94,1.302,106,1.04,109,1.403,120,3.491,128,4.613,138,3.095,144,2.346,149,2.064,249,4.194,354,2.597,357,2.756,358,2.756,359,2.597,360,4.648,361,4.911,362,4.057,363,7.255]],["title/coding/leetcode/198.html",[3,0.338,364,3.618]],["text/coding/leetcode/198.html",[3,0.835,42,1.032,46,2.127,94,1.446,99,3.77,101,1.178,106,1.341,107,0.598,109,0.964,111,1.235,116,1.814,125,4.285,130,1.73,134,1.463,137,3.114,141,1.822,142,1.782,168,2.35,169,3.224,170,2.127,184,1.144,256,2.254,269,2.596,364,2.764,365,2.596,366,2.988,367,3.216,368,2.596,369,2.596,370,7.12,371,4.585,372,4.585,373,4.585,374,2.988,375,7.412]],["title/coding/leetcode/198.html#198",[3,0.338,364,3.618]],["text/coding/leetcode/198.html#198",[3,0.734]],["title/coding/leetcode/198.html#_1",[3,0.446]],["text/coding/leetcode/198.html#_1",[3,0.832,42,1.053,46,3.137,101,1.249,106,1.224,107,1.031,141,2.336,142,2.629,184,1.973,256,3.887,269,4.475,365,4.475,366,5.152,367,4.745,368,4.475,369,4.475]],["title/coding/leetcode/198.html#_2",[3,0.446]],["text/coding/leetcode/198.html#_2",[3,0.834,42,0.991,94,1.562,99,4.111,101,1.06,106,1.348,109,1.148,111,1.56,116,2.292,125,4.627,130,2.06,134,1.849,137,3.707,168,2.97,169,3.705,170,2.532,370,7.763,371,5.458,372,5.458,373,5.458,374,3.777,375,8.004]],["title/coding/leetcode/204.html",[3,0.338,376,3.618]],["text/coding/leetcode/204.html",[3,0.835,15,2.387,42,0.972,43,3.34,59,3.04,94,1.231,101,1.185,106,0.84,107,0.607,109,0.638,111,1.254,129,2.189,130,1.751,132,4.349,134,1.487,141,2.342,142,1.803,184,1.163,226,2.361,240,3.575,376,2.808,377,4.03,378,3.036,379,5.632,380,3.036,381,6.223,382,6.795,383,3.036,384,4.64,385,3.036,386,3.036]],["title/coding/leetcode/204.html#204",[3,0.338,376,3.618]],["text/coding/leetcode/204.html#204",[3,0.734]],["title/coding/leetcode/204.html#_1",[3,0.446]],["text/coding/leetcode/204.html#_1",[3,0.814,43,3.52,59,2.472,101,1.1,107,1.33,141,1.937,142,3.084,184,2.545,226,4.037]],["title/coding/leetcode/204.html#_2",[3,0.446]],["text/coding/leetcode/204.html#_2",[3,0.835,15,2.594,42,0.993,43,3.137,59,3.054,94,1.284,101,1.165,106,0.894,109,0.694,111,1.363,129,2.302,130,1.864,132,4.489,134,1.615,141,2.349,240,3.691,377,4.291,378,3.298,379,5.924,380,3.298,381,6.423,382,7.045,383,3.298,384,4.94,385,3.298,386,3.298]],["title/coding/leetcode/206.html",[3,0.338,69,3.223]],["text/coding/leetcode/206.html",[3,0.833,42,0.68,69,3.239,94,0.767,101,0.929,107,0.787,109,1.182,120,3.45,138,3.041,141,1.637,142,2.184,144,2.273,149,2,184,2.152,249,4.683,300,5.196,301,5.885,357,2.67,358,2.67,359,2.517,360,4.593,361,4.945,387,3.932,388,6.572]],["title/coding/leetcode/206.html#206",[3,0.338,69,3.223]],["text/coding/leetcode/206.html#206",[3,0.734]],["title/coding/leetcode/206.html#_1",[3,0.446]],["text/coding/leetcode/206.html#_1",[3,0.789,42,0.966,101,1.322,107,1.345,138,3.706,141,2.328,142,3.105,184,3.06]],["title/coding/leetcode/206.html#_2",[3,0.446]],["text/coding/leetcode/206.html#_2",[3,0.832,94,0.849,109,1.269,120,3.582,138,2.018,144,2.515,149,2.213,249,4.82,300,5.434,301,6.056,357,2.954,358,2.954,359,2.785,360,4.769,361,5.051,387,4.35,388,6.824]],["title/coding/leetcode/21.html",[3,0.338,49,2.745]],["text/coding/leetcode/21.html",[3,0.832,42,0.89,49,2.94,94,0.818,101,0.972,107,0.838,109,1.548,120,3.534,141,1.713,142,2.861,144,2.423,149,3.454,357,2.846,358,2.846,359,2.683,360,4.705,361,4.481,389,6.79,390,8.421,391,8.421]],["title/coding/leetcode/21.html#21",[3,0.338,49,2.745]],["text/coding/leetcode/21.html#21",[3,0.734]],["title/coding/leetcode/21.html#_1",[3,0.446]],["text/coding/leetcode/21.html#_1",[3,0.765,42,1.071,101,1.331,107,1.361,141,2.344,142,3.441]],["title/coding/leetcode/21.html#_2",[3,0.446]],["text/coding/leetcode/21.html#_2",[3,0.831,94,0.904,109,1.615,120,3.662,144,2.677,149,3.641,357,3.146,358,3.146,359,2.965,360,4.876,361,4.644,389,7.157,390,8.627,391,8.627]],["title/coding/leetcode/217.html",[3,0.338,70,3.223]],["text/coding/leetcode/217.html",[3,0.834,42,0.82,70,3.44,94,1.608,99,3.891,101,0.97,106,0.755,107,0.835,109,1.545,118,4.259,125,4.248,130,1.576,141,1.217,152,2.414,156,3.667,159,3.599,198,3.24,365,3.627,392,4.176,393,4.176,394,5.863,395,5.863,396,4.176,397,4.176]],["title/coding/leetcode/217.html#217",[3,0.338,70,3.223]],["text/coding/leetcode/217.html#217",[3,0.734]],["title/coding/leetcode/217.html#_1",[3,0.446]],["text/coding/leetcode/217.html#_1",[3,0.818,42,0.786,101,1.075,107,1.3,141,1.893,156,3.905,159,4.113,365,5.643,392,6.496,393,6.496]],["title/coding/leetcode/217.html#_2",[3,0.446]],["text/coding/leetcode/217.html#_2",[3,0.833,42,0.777,94,1.667,99,4.116,101,0.788,106,0.862,109,1.634,118,4.665,125,4.493,130,1.799,152,2.755,156,3.205,159,2.334,198,3.548,394,6.422,395,6.422,396,4.766,397,4.766]],["title/coding/leetcode/234.html",[3,0.338,398,3.618]],["text/coding/leetcode/234.html",[3,0.834,42,0.779,94,1.256,101,1.144,106,0.866,107,0.633,109,1.214,111,1.306,120,3.633,129,2.503,130,1.193,138,2.679,144,1.828,149,3.846,152,1.828,156,2.388,159,2.344,207,4.157,229,3.922,247,2.486,249,3.338,300,5.789,301,5.025,352,3.476,353,5.064,357,2.147,358,2.147,359,2.024,360,4.837,361,4.37,398,2.924,399,4.786]],["title/coding/leetcode/234.html#234",[3,0.338,398,3.618]],["text/coding/leetcode/234.html#234",[3,0.734]],["title/coding/leetcode/234.html#_1",[3,0.446]],["text/coding/leetcode/234.html#_1",[3,0.811,42,1.052,101,1.439,107,1.292,156,3.224,159,3.163,207,6.774,352,5.665]],["title/coding/leetcode/234.html#_2",[3,0.446]],["text/coding/leetcode/234.html#_2",[3,0.833,94,1.321,101,0.579,106,0.934,109,1.29,111,1.446,120,3.734,129,2.632,130,1.321,138,2.846,144,2.023,149,3.977,152,2.023,156,1.746,159,1.714,229,4.167,247,2.752,249,3.547,300,5.95,301,5.247,353,5.326,357,2.377,358,2.377,359,2.24,360,4.972,361,4.519,399,5.163]],["title/coding/leetcode/237.html",[3,0.338,71,3.223]],["text/coding/leetcode/237.html",[3,0.832,42,0.94,46,2.979,71,3.926,101,0.788,107,0.954,120,2.173,142,2.496,147,5.992,149,3.267,184,2.781,198,2.634,249,4.199,360,2.893,361,4.493,400,7.263,401,4.766,402,4.766,403,4.766]],["title/coding/leetcode/237.html#237",[3,0.338,71,3.223]],["text/coding/leetcode/237.html#237",[3,0.734]],["title/coding/leetcode/237.html#_1",[3,0.446]],["text/coding/leetcode/237.html#_1",[3,0.826,42,1.012,46,3.377,101,0.955,107,1.156,142,2.829,147,5.106,184,3.052,249,4.608,400,7.97,401,5.776,402,5.776]],["title/coding/leetcode/237.html#_2",[3,0.446]],["text/coding/leetcode/237.html#_2",[3,0.823,120,2.833,147,6.182,149,3.876,198,3.434,360,3.772,361,4.964,403,6.214]],["title/coding/leetcode/24.html",[3,0.338,50,3.223]],["text/coding/leetcode/24.html",[3,0.832,42,0.747,50,3.71,94,0.879,101,1.022,107,0.901,109,1.299,120,3.627,141,1.8,142,2.402,144,2.604,149,2.291,249,4.865,357,3.059,358,3.059,359,2.883,360,4.829,361,4.751,404,6.18,405,7.592,406,6.18]],["title/coding/leetcode/24.html#24",[3,0.338,50,3.223]],["text/coding/leetcode/24.html#24",[3,0.734]],["title/coding/leetcode/24.html#_1",[3,0.446]],["text/coding/leetcode/24.html#_1",[3,0.784,42,0.983,101,1.345,107,1.386,141,2.369,142,3.16]],["title/coding/leetcode/24.html#_2",[3,0.446]],["text/coding/leetcode/24.html#_2",[3,0.83,94,0.966,109,1.385,120,3.746,144,2.863,149,2.519,249,4.985,357,3.363,358,3.363,359,3.17,360,4.988,361,4.885,404,6.588,405,7.892,406,6.588]],["title/coding/leetcode/242.html",[3,0.338,72,3.223]],["text/coding/leetcode/242.html",[3,0.836,42,0.463,51,4.53,72,3.152,88,5.664,94,1.075,101,0.633,106,1.278,107,0.766,109,1.159,128,4.356,152,2.212,156,2.75,159,2.699,235,3.324,240,3.223,241,4.617,407,3.827,408,3.827,409,3.827,410,3.827,411,3.827,412,6.458,413,6.458]],["title/coding/leetcode/242.html#242",[3,0.338,72,3.223]],["text/coding/leetcode/242.html#242",[3,0.734]],["title/coding/leetcode/242.html#_1",[3,0.446]],["text/coding/leetcode/242.html#_1",[3,0.824,42,0.732,88,6.18,101,1.001,107,1.21,156,3.019,159,2.963,235,5.255,241,5.037,407,6.05,408,6.05,409,6.05,410,6.05]],["title/coding/leetcode/242.html#_2",[3,0.446]],["text/coding/leetcode/242.html#_2",[3,0.835,51,4.969,88,4.513,94,1.212,106,1.378,109,1.307,128,4.547,152,2.624,156,2.266,159,2.223,240,3.535,241,3.679,411,4.54,412,7.083,413,7.083]],["title/coding/leetcode/26.html",[3,0.338,51,2.745]],["text/coding/leetcode/26.html",[3,0.836,42,0.967,51,2.641,94,1.513,99,4.487,101,1.23,106,1.268,107,0.753,109,1.145,125,4.3,141,1.097,142,1.463,184,1.441,229,3.698,352,3.955,414,3.764,415,3.764,416,3.764,417,3.764,418,3.764,419,7.996]],["title/coding/leetcode/26.html#26",[3,0.338,51,2.745]],["text/coding/leetcode/26.html#26",[3,0.734]],["title/coding/leetcode/26.html#_1",[3,0.446]],["text/coding/leetcode/26.html#_1",[3,0.832,42,0.919,94,1.331,99,4.428,101,1.333,106,1.235,107,1.045,141,1.522,142,2.03,184,2,229,4.634,352,4.957,414,5.223,415,5.223,416,5.223,417,5.223]],["title/coding/leetcode/26.html#_2",[3,0.446]],["text/coding/leetcode/26.html#_2",[3,0.832,42,0.961,94,1.551,99,4.377,101,0.834,106,1.206,109,1.402,125,4.778,418,5.039,419,8.661]],["title/coding/leetcode/28.html",[3,0.272,52,2.596,420,2.596]],["text/coding/leetcode/28.html",[3,0.835,42,0.948,52,2.663,94,0.95,101,0.805,106,1.478,107,0.647,109,1.37,240,2.429,248,3.827,253,2.268,300,5.533,301,5.074,388,6.067,420,5.365,421,7.416,422,7.556,423,3.233,424,3.233,425,3.233,426,3.233,427,3.233,428,3.233,429,5.853,430,6.985,431,6.985]],["title/coding/leetcode/28.html#28-strstr",[3,0.272,52,2.596,420,2.596]],["text/coding/leetcode/28.html#28-strstr",[3,0.734]],["title/coding/leetcode/28.html#_1",[3,0.446]],["text/coding/leetcode/28.html#_1",[3,0.825,42,0.955,101,1.189,106,1.3,107,1.133,253,3.972,420,5.921,421,7.682,422,8.103,423,5.662,424,5.662,425,5.662,426,5.662,427,5.662,428,5.662]],["title/coding/leetcode/28.html#_2",[3,0.446]],["text/coding/leetcode/28.html#_2",[3,0.834,42,0.913,94,1.091,106,1.496,109,1.5,240,2.79,248,4.397,300,5.873,301,5.482,388,6.555,420,3.217,421,6.979,422,6.594,429,6.531,430,7.546,431,7.546]],["title/coding/leetcode/315.html",[3,0.338,73,3.223]],["text/coding/leetcode/315.html",[3,0.835,42,0.915,73,2.024,78,4.418,94,1.535,99,2.975,101,0.813,106,1.186,107,0.491,108,1.573,109,1.292,110,1.491,111,2.031,112,1.573,113,1.573,114,1.42,115,1.357,120,3.363,125,3.79,126,2.386,129,2.941,130,1.855,134,1.203,138,2.606,149,2.501,150,3.816,151,3.701,184,0.941,216,1.573,368,2.134,369,4.269,432,3.932,433,2.457,434,2.457,435,2.457,436,2.457,437,3.932,438,7.377,439,5.618,440,7.566,441,6.146,442,5.618,443,2.457,444,4.915]],["title/coding/leetcode/315.html#315",[3,0.338,73,3.223]],["text/coding/leetcode/315.html#315",[3,0.734]],["title/coding/leetcode/315.html#_1",[3,0.446]],["text/coding/leetcode/315.html#_1",[3,0.824,42,1.058,99,3.794,101,1.303,106,1.296,107,1.127,184,2.157,216,3.607,368,4.893,369,6.844,432,7.165,433,5.634,434,5.634,435,5.634,436,5.634,437,7.165]],["title/coding/leetcode/315.html#_2",[3,0.446]],["text/coding/leetcode/315.html#_2",[3,0.834,42,0.734,78,4.775,94,1.591,99,2.325,106,1.099,108,1.809,109,1.383,110,1.715,111,2.225,112,1.809,113,1.809,114,1.634,115,1.562,120,3.517,125,4.024,126,2.665,129,3.064,130,2.032,134,1.384,138,2.817,149,2.74,150,4.124,151,4.001,438,7.713,439,6.073,440,7.884,441,6.576,442,6.073,443,2.826,444,5.385]],["title/coding/leetcode/344.html",[3,0.338,74,3.223]],["text/coding/leetcode/344.html",[3,0.832,42,0.988,74,4.01,94,0.95,101,1.077,106,0.881,107,0.974,109,1.024,198,2.69,240,3.663,241,4.979,352,3.536,354,4.699,445,4.868,446,4.868,447,4.868,448,6.513,449,6.513,450,8.171]],["title/coding/leetcode/344.html#344",[3,0.338,74,3.223]],["text/coding/leetcode/344.html#344",[3,0.734]],["title/coding/leetcode/344.html#_1",[3,0.446]],["text/coding/leetcode/344.html#_1",[3,0.804,42,0.818,101,1.119,107,1.353,240,3.376,352,4.914,445,6.765,446,6.765,447,6.765,448,8.018]],["title/coding/leetcode/344.html#_2",[3,0.446]],["text/coding/leetcode/344.html#_2",[3,0.828,42,0.994,94,1.073,101,0.91,106,0.995,109,1.156,198,3.038,240,3.521,241,5.149,354,4.987,449,7.055,450,8.498]],["title/coding/leetcode/350.html",[3,0.272,64,1.963,451,2.914]],["text/coding/leetcode/350.html",[3,0.837,42,0.676,64,1.276,94,1.458,101,0.339,106,1.438,107,0.41,109,0.431,111,1.401,116,1.243,120,2.548,121,4.394,122,4.09,126,2.633,127,5.792,128,4.523,129,1.686,130,1.637,133,6.388,134,1.003,169,2.508,170,1.573,208,1.611,451,1.894,452,5.244,453,2.048,454,5.439,455,3.391,456,2.048,457,2.048,458,2.048,459,6.375,460,6.375,461,2.048,462,4.381,463,4.381]],["title/coding/leetcode/350.html#350-ii",[3,0.272,64,1.963,451,2.914]],["text/coding/leetcode/350.html#350-ii",[3,0.734]],["title/coding/leetcode/350.html#_1",[3,0.446]],["text/coding/leetcode/350.html#_1",[3,0.822,42,0.752,101,1.028,107,1.243,452,6.478,453,6.214,454,6.753,455,7.618,456,6.214,457,6.214,458,6.214]],["title/coding/leetcode/350.html#_2",[3,0.446]],["text/coding/leetcode/350.html#_2",[3,0.837,42,0.64,94,1.493,106,1.466,109,0.467,111,1.496,116,1.347,120,2.659,121,4.587,122,4.25,126,2.784,127,5.979,128,4.581,129,1.783,130,1.731,133,6.498,134,1.087,169,2.652,170,1.68,208,1.745,452,4.587,454,4.587,459,6.601,460,6.601,461,2.219,462,4.598,463,4.598]],["title/coding/leetcode/36.html",[3,0.338,54,3.223]],["text/coding/leetcode/36.html",[3,0.836,42,0.95,44,2.237,46,2.342,54,1.69,94,1.176,101,0.339,106,1.455,107,0.41,109,1.062,130,1.639,132,4.978,134,2.127,141,2.389,152,1.186,156,2.52,159,1.663,184,0.786,195,4.322,240,1.024,464,3.396,465,3.396,466,2.052,467,3.396,468,3.396,469,3.396,470,3.396,471,3.396,472,3.396,473,3.396,474,3.396,475,2.052,476,2.052,477,7.616,478,6.921,479,2.052,480,6.38,481,5.049]],["title/coding/leetcode/36.html#36",[3,0.338,54,3.223]],["text/coding/leetcode/36.html#36",[3,0.734]],["title/coding/leetcode/36.html#_1",[3,0.446]],["text/coding/leetcode/36.html#_1",[3,0.83,42,1.022,44,4.34,46,3.661,101,0.819,107,0.991,156,2.471,159,2.425,184,1.896,464,6.588,465,6.588,466,4.952,467,6.588,468,6.588,469,6.588,470,6.588,471,6.588,472,6.588,473,6.588,474,6.588,475,4.952]],["title/coding/leetcode/36.html#_2",[3,0.446]],["text/coding/leetcode/36.html#_2",[3,0.836,42,0.89,94,1.276,106,1.511,109,1.177,130,1.847,132,5.151,134,2.397,141,2.472,152,1.411,156,2.442,159,1.195,195,4.541,240,1.218,476,2.441,477,7.979,478,7.361,479,2.441,480,6.866,481,5.598]],["title/coding/leetcode/38.html",[3,0.338,55,3.223]],["text/coding/leetcode/38.html",[3,0.836,42,1.025,49,3.378,55,1.567,59,2.819,94,0.94,101,1.148,102,3.896,106,1.17,107,0.38,109,0.865,111,1.7,115,2.274,123,4.217,128,3.073,129,2.946,130,2.024,134,1.561,138,0.882,141,0.929,142,1.239,184,0.728,192,3.896,226,2.45,240,3.717,248,2.507,249,2.784,250,4.217,354,4.444,367,2.236,482,4.815,483,2.769,484,5.363,485,3.188,486,1.902,487,4.115,488,3.188,489,6.942,490,5.363,491,3.188]],["title/coding/leetcode/38.html#38",[3,0.338,55,3.223]],["text/coding/leetcode/38.html#38",[3,0.734]],["title/coding/leetcode/38.html#_1",[3,0.446]],["text/coding/leetcode/38.html#_1",[3,0.829,42,1.113,49,5.256,59,3.104,101,1.381,102,5.715,107,0.874,141,1.762,142,2.351,184,1.672,367,4.244,482,7.492,483,5.254,484,7.868,485,6.049]],["title/coding/leetcode/38.html#_2",[3,0.446]],["text/coding/leetcode/38.html#_2",[3,0.836,42,0.854,59,2.525,94,1.075,101,0.795,106,1.278,109,1.011,111,1.986,115,2.655,123,4.751,128,3.42,129,3.123,130,2.28,134,1.874,138,1.102,192,4.389,226,2.803,240,3.954,248,3.009,249,3.185,250,4.751,354,4.793,486,2.375,487,4.805,488,3.827,489,7.487,490,6.042,491,3.827]],["title/coding/leetcode/384.html",[3,0.338,492,3.618]],["text/coding/leetcode/384.html",[3,0.835,9,1.751,29,1.935,42,0.269,76,5.008,94,1.651,99,3.651,101,0.368,106,0.657,107,0.727,109,1.229,110,2.205,111,2.192,114,1.288,115,2.541,120,1.656,125,3.379,129,2.85,130,2.366,141,0.649,169,3.067,170,2.461,176,2.325,190,5.445,198,1.231,323,1.935,330,6.87,335,1.935,336,1.935,354,2.945,381,3.995,492,2.06,493,4.596,494,7.083,495,2.227,496,3.632,497,2.227,498,3.632,499,3.632,500,2.227,501,2.227,502,1.935,503,2.227,504,2.227,505,2.227,506,2.227,507,5.845,508,2.227,509,2.227,510,2.227,511,2.227,512,2.227,513,2.227,514,2.227,515,2.227,516,2.227]],["title/coding/leetcode/384.html#384",[3,0.338,492,3.618]],["text/coding/leetcode/384.html#384",[3,0.734]],["title/coding/leetcode/384.html#_1",[3,0.446]],["text/coding/leetcode/384.html#_1",[3,0.815,9,4.94,42,0.76,94,1.226,99,3.327,101,1.039,107,1.257,141,1.83,493,6.951,494,7.092,495,6.283,496,7.669,497,6.283]],["title/coding/leetcode/384.html#_2",[3,0.446]],["text/coding/leetcode/384.html#_2",[3,0.835,29,2.098,76,5.163,94,1.664,99,3.621,106,0.702,107,0.483,109,1.281,110,2.354,111,2.299,114,1.396,115,2.685,120,1.768,125,3.523,129,2.925,130,2.455,169,3.216,170,2.581,176,2.483,190,5.651,198,1.334,323,2.098,330,7.008,335,2.098,336,2.098,354,3.111,381,4.221,494,6.96,498,3.878,499,3.878,500,2.415,501,2.415,502,2.098,503,2.415,504,2.415,505,2.415,506,2.415,507,6.093,508,2.415,509,2.415,510,2.415,511,2.415,512,2.415,513,2.415,514,2.415,515,2.415,516,2.415]],["title/coding/leetcode/387.html",[3,0.338,75,3.223]],["text/coding/leetcode/387.html",[3,0.835,40,3.584,42,0.858,51,3.197,75,3.754,94,1.385,101,0.754,106,1.127,107,0.912,109,1.31,128,4.617,133,5.582,240,3.109,241,4.883,517,4.558,518,4.558]],["title/coding/leetcode/387.html#387",[3,0.338,75,3.223]],["text/coding/leetcode/387.html#387",[3,0.734]],["title/coding/leetcode/387.html#_1",[3,0.446]],["text/coding/leetcode/387.html#_1",[3,0.81,40,5.351,42,0.823,101,1.126,106,1.231,107,1.361,241,4.764,517,6.805]],["title/coding/leetcode/387.html#_2",[3,0.446]],["text/coding/leetcode/387.html#_2",[3,0.833,42,0.811,51,3.566,94,1.464,106,0.92,109,1.41,128,4.72,133,5.898,240,3.346,241,4.722,518,5.084]],["title/coding/leetcode/48.html",[3,0.338,56,2.952]],["text/coding/leetcode/48.html",[3,0.835,42,0.841,43,1.693,44,2.106,46,1.483,47,2.412,48,2.412,56,2.412,59,1.795,94,1.264,101,1.071,106,1.258,107,0.64,132,5.246,141,1.406,142,1.876,184,1.848,198,1.766,216,3.089,268,2.777,354,4.45,355,2.777,367,2.243,493,2.514,519,7.654,520,3.197,521,3.197,522,3.197,523,3.197,524,3.197,525,3.197,526,3.197,527,3.197,528,3.197,529,3.197,530,3.197,531,7.588,532,3.197]],["title/coding/leetcode/48.html#48",[3,0.338,56,2.952]],["text/coding/leetcode/48.html#48",[3,0.734]],["title/coding/leetcode/48.html#_1",[3,0.446]],["text/coding/leetcode/48.html#_1",[3,0.822,42,0.929,43,2.83,44,3.521,46,2.479,47,4.032,48,4.032,59,2.576,101,1.271,107,1.069,141,2.018,142,2.692,184,2.653,216,4.434,268,4.642,367,3.749,493,4.203,519,6.406,520,5.345,521,5.345,522,5.345,523,5.345,524,5.345,525,5.345,526,5.345,527,5.345,528,5.345,529,5.345,530,5.345]],["title/coding/leetcode/48.html#_2",[3,0.446]],["text/coding/leetcode/48.html#_2",[3,0.836,42,0.688,94,1.407,101,0.662,106,1.378,132,5.443,198,2.21,354,4.876,355,3.475,519,7.83,531,8.142,532,4.001]],["title/coding/leetcode/50.html",[57,2.289,58,2.478,59,1.172]],["text/coding/leetcode/50.html",[3,0.834,42,1.016,57,2.631,58,4.163,59,3.123,94,1.033,101,1.212,106,1.246,107,0.724,109,1.113,129,2.432,141,1.542,170,3.549,226,1.842,246,3.596,533,5.294,534,3.621,535,3.621,536,3.621,537,3.621,538,3.621,539,3.621,540,3.621,541,5.294,542,5.414,543,2.848,544,6.258,545,5.294,546,6.016]],["title/coding/leetcode/50.html#50-powx-n",[57,2.289,58,2.478,59,1.172]],["text/coding/leetcode/50.html#50-powx-n",[3,0.734]],["title/coding/leetcode/50.html#_1",[3,0.446]],["text/coding/leetcode/50.html#_1",[3,0.824,42,0.94,58,4.303,59,2.89,101,1.357,107,1.095,141,2.049,170,3.263,226,2.784,246,3.716,533,7.033,534,5.472,535,5.472,536,5.472,537,5.472,538,5.472,539,5.472,540,5.472,541,7.033,542,6.451]],["title/coding/leetcode/50.html#_2",[3,0.446]],["text/coding/leetcode/50.html#_2",[3,0.833,42,1.024,59,3.078,94,1.226,101,0.763,106,1.387,109,1.321,129,2.776,170,3.557,246,3.133,543,3.627,544,7.142,545,6.281,546,6.509]],["title/coding/leetcode/509.html",[3,0.338,547,3.618]],["text/coding/leetcode/509.html",[3,0.835,42,1.024,59,3.098,94,1.574,101,1.175,106,1.326,107,0.482,109,1.169,111,0.996,129,2.366,130,1.461,134,1.18,138,1.118,141,1.619,142,0.937,361,2.805,546,6.044,547,2.229,548,6.087,549,3.872,550,4.853,551,4.853,552,3.872,553,2.41,554,3.872,555,3.872,556,5.557,557,7.103,558,7.329,559,3.581,560,4.853]],["title/coding/leetcode/509.html#509",[3,0.338,547,3.618]],["text/coding/leetcode/509.html#509",[3,0.734]],["title/coding/leetcode/509.html#_1",[3,0.446]],["text/coding/leetcode/509.html#_1",[3,0.825,42,1.092,59,2.45,101,1.398,106,1.34,107,0.991,141,2.299,142,1.925,548,8.218,549,6.588,550,7.404,551,7.404,552,6.588,553,4.952,554,6.588,555,6.588]],["title/coding/leetcode/509.html#_2",[3,0.446]],["text/coding/leetcode/509.html#_2",[]],["title/coding/leetcode/509.html#_3",[3,0.446]],["text/coding/leetcode/509.html#_3",[3,0.835,42,0.936,59,3.16,94,1.638,101,0.835,106,1.291,109,1.267,111,1.403,130,1.905,134,1.663,138,1.575,546,6.599,556,6.674,557,7.954,558,8.127,559,3.14]],["title/coding/leetcode/509.html#_4",[3,0.446]],["text/coding/leetcode/509.html#_4",[3,0.826,42,0.706,59,2.978,94,1.562,106,1.056,109,1.227,129,3.363,361,4.629,559,5.396,560,8.008]],["title/coding/leetcode/66.html",[3,0.338,60,3.223]],["text/coding/leetcode/66.html",[3,0.836,42,0.976,46,1.659,60,2.946,94,1.575,101,0.592,106,1.318,107,0.715,108,2.289,109,1.103,110,2.171,111,2.168,112,2.289,113,2.289,114,2.067,115,1.976,126,3.184,129,3.059,130,1.979,176,2.289,493,2.812,561,3.576,562,3.106,563,3.576,564,3.576,565,3.576,566,3.576,567,3.576,568,5.246,569,7.871,570,6.213]],["title/coding/leetcode/66.html#66",[3,0.338,60,3.223]],["text/coding/leetcode/66.html#66",[3,0.734]],["title/coding/leetcode/66.html#_1",[3,0.446]],["text/coding/leetcode/66.html#_1",[3,0.822,42,0.786,101,1.075,106,1.175,107,1.3,493,5.108,561,6.496,562,5.643,563,6.496,564,6.496,565,6.496]],["title/coding/leetcode/66.html#_2",[3,0.446]],["text/coding/leetcode/66.html#_2",[3,0.835,42,0.985,46,1.856,94,1.624,106,1.304,108,2.561,109,1.196,110,2.428,111,2.35,112,2.561,113,2.561,114,2.313,115,2.21,126,3.453,129,3.165,130,2.147,176,2.561,566,4.001,567,4.001,568,5.689,569,8.142,570,6.62]],["title/coding/leetcode/7.html",[3,0.338,43,2.072]],["text/coding/leetcode/7.html",[3,0.833,42,0.941,43,2.244,49,2.973,94,1.156,101,0.701,106,1.408,107,0.848,109,0.891,129,3.025,141,1.235,170,3.168,203,3.491,226,3.475,246,4.639,353,3.332,542,5.816,543,3.332,562,5.145,571,5.924,572,4.658,573,8.445,574,4.238]],["title/coding/leetcode/7.html#7",[3,0.338,43,2.072]],["text/coding/leetcode/7.html#7",[3,0.734]],["title/coding/leetcode/7.html#_1",[3,0.446]],["text/coding/leetcode/7.html#_1",[3,0.821,42,0.989,49,4.29,101,1.012,106,1.106,107,1.223,141,1.781,203,5.037,246,5.123,542,6.715,562,6.551,571,7.543]],["title/coding/leetcode/7.html#_2",[3,0.446]],["text/coding/leetcode/7.html#_2",[3,0.831,42,0.811,94,1.308,106,1.443,109,1.069,129,3.222,170,3.48,226,3.816,246,3.453,353,3.998,543,3.998,572,5.272,573,8.81,574,5.084]],["title/coding/leetcode/70.html",[3,0.338,61,3.223]],["text/coding/leetcode/70.html",[3,0.835,42,1.06,59,3.233,61,2.848,94,1.56,101,1.394,106,0.626,107,0.692,109,1.281,111,1.429,130,1.931,134,1.693,138,2.374,141,1.775,546,6.532,575,6.733,576,3.457]],["title/coding/leetcode/70.html#70",[3,0.338,61,3.223]],["text/coding/leetcode/70.html#70",[3,0.734]],["title/coding/leetcode/70.html#_1",[3,0.446]],["text/coding/leetcode/70.html#_1",[3,0.829,42,1.11,59,2.616,101,1.495,107,1.095,141,2.264]],["title/coding/leetcode/70.html#_2",[3,0.446]],["text/coding/leetcode/70.html#_2",[3,0.833,42,0.903,59,3.309,94,1.657,101,0.995,106,0.784,109,1.454,111,1.791,130,2.271,134,2.122,138,2.791,546,6.866,575,7.468,576,4.334]],["title/coding/leetcode/779.html",[195,2.262,577,3.618]],["text/coding/leetcode/779.html",[3,0.833,42,1.084,59,3.202,94,1.379,101,1.169,106,1.411,107,0.766,109,1.159,142,1.487,184,1.465,195,5.03,226,1.947,483,3.324,577,3.539,578,4.787,579,3.827,580,3.827,581,3.827,582,3.827,583,5.511,584,6.458]],["title/coding/leetcode/779.html#779-k",[195,2.262,577,3.618]],["text/coding/leetcode/779.html#779-k",[3,0.734]],["title/coding/leetcode/779.html#_1",[3,0.446]],["text/coding/leetcode/779.html#_1",[3,0.829,42,1.081,59,3.197,101,1.217,106,1.48,107,0.978,142,1.9,184,1.872,195,5.049,226,2.487,483,4.246,578,5.674,579,4.888,580,4.888,581,4.888]],["title/coding/leetcode/779.html#_2",[3,0.446]],["text/coding/leetcode/779.html#_2",[3,0.828,42,1.053,59,3.062,94,1.606,101,0.914,106,1,109,1.488,195,4.514,582,5.525,583,7.077,584,7.808]],["title/coding/leetcode/8.html",[3,0.272,44,2.076,585,2.737]],["text/coding/leetcode/8.html",[3,0.837,42,0.786,44,1.817,46,2.46,94,0.841,101,0.456,106,1.385,107,0.552,109,1.115,123,5.113,128,4.352,129,2.798,141,1.255,142,1.072,184,1.056,226,1.403,240,2.15,246,2.926,303,3.742,542,5.858,543,2.169,572,4.713,585,3.742,586,4.903,587,5.542,588,6.501,589,4.309,590,4.309,591,2.758,592,2.396,593,4.309,594,2.758,595,2.758]],["title/coding/leetcode/8.html#8-atoi",[3,0.272,44,2.076,585,2.737]],["text/coding/leetcode/8.html#8-atoi",[3,0.734]],["title/coding/leetcode/8.html#_1",[3,0.446]],["text/coding/leetcode/8.html#_1",[3,0.834,42,0.958,101,0.736,106,1.109,107,0.891,141,1.786,142,1.73,184,1.705,246,4.163,542,6.721,543,3.501,585,3.867,586,4.117,587,5.669,588,7.922,589,6.13,590,6.13,591,4.452,592,3.867,593,6.13,594,4.452]],["title/coding/leetcode/8.html#_2",[3,0.446]],["text/coding/leetcode/8.html#_2",[3,0.836,46,2.996,94,1.075,106,1.454,109,1.358,123,5.888,128,4.649,129,3.123,226,1.947,240,2.75,303,4.787,572,5.556,586,5.096,587,5.096,595,3.827]],["title/coding/leetcode/88.html",[3,0.338,596,3.618]],["text/coding/leetcode/88.html",[3,0.834,42,0.825,59,2.703,94,1.572,106,1.12,107,0.711,116,2.157,130,1.341,137,2.414,141,1.521,168,2.795,169,4.901,170,3.738,171,3.087,176,2.275,198,1.964,255,5.28,452,6.744,454,6.467,462,3.087,463,3.087,596,3.287,597,3.554,598,3.554,599,3.554]],["title/coding/leetcode/88.html#88",[3,0.338,596,3.618]],["text/coding/leetcode/88.html#88",[3,0.734]],["title/coding/leetcode/88.html#_1",[3,0.446]],["text/coding/leetcode/88.html#_1",[3,0.826,59,2.964,107,1.156,141,2.121,255,5.79,452,6.926,454,6.783,597,5.776,598,5.776,599,5.776]],["title/coding/leetcode/88.html#_2",[3,0.446]],["text/coding/leetcode/88.html#_2",[3,0.832,42,0.9,59,2.226,94,1.654,106,1.246,116,2.611,130,1.623,137,2.921,168,3.382,169,5.092,170,3.932,171,3.736,176,2.753,198,2.376,255,4.348,452,6.371,454,5.853,462,3.736,463,3.736]],["title/coding/leetcode/9.html",[3,0.338,46,1.815]],["text/coding/leetcode/9.html",[3,0.834,42,0.558,46,2.14,94,0.9,101,0.763,106,1.292,107,0.923,109,1.321,141,1.344,152,2.667,156,3.564,159,2.259,170,3.84,214,6.316,226,3.901,247,3.627,502,5.456,572,3.627,578,4.007,600,7.668]],["title/coding/leetcode/9.html#9",[3,0.338,46,1.815]],["text/coding/leetcode/9.html#9",[3,0.734]],["title/coding/leetcode/9.html#_1",[3,0.446]],["text/coding/leetcode/9.html#_1",[3,0.828,42,0.74,101,1.012,107,1.223,141,1.781,156,3.764,159,2.995,214,7.034,226,3.111,578,5.311]],["title/coding/leetcode/9.html#_2",[3,0.446]],["text/coding/leetcode/9.html#_2",[3,0.827,94,1.099,106,1.425,109,1.507,152,3.257,156,2.811,170,4.06,226,4.009,247,4.43,502,6.224,572,4.43,600,8.292]],["title/coding/leetcode/98.html",[3,0.338,601,3.618]],["text/coding/leetcode/98.html",[3,0.834,42,0.662,78,3.521,94,0.874,101,0.741,107,0.58,109,1.479,111,1.197,120,3.74,128,3.724,129,2.392,130,1.093,135,1.968,138,2.855,141,1.304,142,1.74,144,1.675,145,2.279,146,2.279,147,2.033,148,5.231,149,3.73,150,3.041,151,2.95,152,1.675,156,2.234,158,5.955,159,3.014,184,1.714,192,3.252,216,1.855,359,5.173,360,4.45,361,3.558,601,2.68,602,2.898,603,6.154,604,2.898]],["title/coding/leetcode/98.html#98",[3,0.338,601,3.618]],["text/coding/leetcode/98.html#98",[3,0.734]],["title/coding/leetcode/98.html#_1",[3,0.446]],["text/coding/leetcode/98.html#_1",[3,0.827,42,0.985,101,1.24,107,1.21,141,2.183,142,2.912,156,3.019,159,2.963,184,2.869,216,3.873,602,6.05]],["title/coding/leetcode/98.html#_2",[3,0.446]],["text/coding/leetcode/98.html#_2",[3,0.833,78,3.877,94,0.962,109,1.553,111,1.359,120,3.847,128,3.912,129,2.553,130,1.241,135,2.234,138,3.047,144,1.901,145,2.586,146,2.586,147,2.307,148,5.533,149,3.897,150,3.348,151,3.248,152,1.901,156,1.641,158,6.195,159,2.896,192,3.581,359,5.333,360,4.65,361,3.797,603,6.569,604,3.289]],["title/coding/python/killable-thread.html",[3,0.446]],["text/coding/python/killable-thread.html",[3,0.832,11,4.415,15,1.631,23,4.415,37,1.708,41,1.565,42,0.529,89,4.415,100,1.708,101,0.343,106,0.62,109,1.348,122,1.409,159,1.016,605,5.627,606,4.377,607,8.409,608,6.411,609,3.426,610,3.426,611,6.949,612,5.082,613,8.837,614,5.082,615,3.426,616,3.426,617,2.074,618,2.074,619,5.082,620,6.059,621,2.074,622,3.426,623,5.082,624,3.426,625,3.426,626,3.426,627,6.059,628,5.082,629,5.082,630,3.426,631,3.426,632,6.411,633,4.377,634,3.426,635,5.082,636,2.074,637,2.074,638,2.074,639,2.074,640,2.074,641,2.074,642,4.377,643,3.426,644,3.426,645,3.426,646,5.082,647,3.426,648,3.426,649,3.426,650,2.074,651,3.426,652,2.074,653,3.426,654,2.074,655,4.377,656,4.377,657,2.074,658,2.074,659,2.976,660,2.074,661,2.074,662,2.074]],["title/coding/python/killable-thread.html#python",[41,3.892]],["text/coding/python/killable-thread.html#python",[3,0.832,11,4.424,15,1.637,23,4.424,37,1.715,42,0.531,89,4.424,100,1.715,101,0.344,106,0.622,109,1.35,122,1.414,159,1.019,605,5.638,606,4.388,607,8.415,608,6.421,609,3.436,610,3.436,611,6.958,612,5.094,613,8.842,614,5.094,615,3.436,616,3.436,617,2.082,618,2.082,619,5.094,620,6.07,621,2.082,622,3.436,623,5.094,624,3.436,625,3.436,626,3.436,627,6.07,628,5.094,629,5.094,630,3.436,631,3.436,632,6.421,633,4.388,634,3.436,635,5.094,636,2.082,637,2.082,638,2.082,639,2.082,640,2.082,641,2.082,642,4.388,643,3.436,644,3.436,645,3.436,646,5.094,647,3.436,648,3.436,649,3.436,650,2.082,651,3.436,652,2.082,653,3.436,654,2.082,655,4.388,656,4.388,657,2.082,658,2.082,659,2.985,660,2.082,661,2.082,662,2.082]],["title/math/index.html",[3,0.446]],["text/math/index.html",[3,0.816]],["title/math/index.html#_1",[3,0.446]],["text/math/index.html#_1",[3,0.808]],["title/math/queue-theory/index.html",[3,0.446]],["text/math/queue-theory/index.html",[3,0.749,42,0.773,43,3.383,44,4.208,46,2.963,101,1.057,102,4.64,141,1.861,142,2.483,184,2.446,216,4.089,226,3.25,367,4.481,663,8.708]],["title/math/queue-theory/index.html#_1",[3,0.446]],["text/math/queue-theory/index.html#_1",[3,0.674,42,0.781,43,3.421,44,4.256,46,2.997,101,1.069,102,4.692,141,1.882,142,2.511,184,2.474,216,4.135,226,3.286,367,4.532,663,8.72]],["title/math/queue-theory/chapter-12.html",[367,2.745,663,3.618]],["text/math/queue-theory/chapter-12.html",[3,0.826,42,0.781,59,2.536,88,5.609,101,0.241,106,1.169,118,1.842,132,2.046,150,0.989,151,3.013,169,0.842,170,1.177,195,2.495,241,3.697,242,1.145,252,1.995,253,1.779,254,1.199,255,1.058,296,1.265,377,1.265,592,1.265,659,1.265,664,2.536,665,1.456,666,5.617,667,1.456,668,1.456,669,1.456,670,5.617,671,2.776,672,4.713,673,1.456,674,1.456,675,2.536,676,2.587,677,1.456,678,1.456,679,1.456,680,1.456,681,0.786,682,0.786,683,0.786,684,0.786,685,1.456,686,1.456,687,1.456,688,4.689,689,1.456,690,1.456,691,1.456,692,1.456,693,1.456,694,2.346,695,1.456,696,1.456,697,3.117,698,1.456,699,3.78,700,1.456,701,2.536,702,1.456,703,1.456,704,3.231,705,1.456,706,1.456,707,1.456,708,2.536,709,1.456,710,1.456,711,1.456,712,5.399,713,3.37,714,1.456,715,2.536,716,1.456,717,1.456,718,2.536,719,1.456,720,1.456,721,1.456,722,2.536,723,1.456,724,1.456,725,1.456,726,1.456,727,1.456,728,1.456,729,2.536,730,1.456,731,1.456,732,1.456,733,1.456,734,1.456,735,1.456,736,3.37,737,1.456,738,1.456,739,1.456,740,1.456,741,3.37,742,3.37,743,2.536,744,1.456,745,2.536,746,2.536,747,1.456,748,1.456,749,1.456,750,3.37,751,1.456,752,1.456,753,1.456,754,2.536,755,1.456,756,1.456,757,1.456,758,1.456,759,1.456,760,3.972,761,1.456,762,1.456,763,1.456,764,1.456,765,1.456,766,1.456,767,1.456,768,1.456,769,1.456,770,1.456,771,1.456,772,1.456,773,1.456,774,1.456,775,2.346,776,1.456,777,1.456,778,2.755,779,1.456,780,1.456,781,1.456,782,1.456,783,1.456,784,1.456,785,1.456,786,2.536,787,2.536,788,2.536,789,1.456,790,1.456,791,1.456,792,2.536,793,1.456,794,1.456,795,1.456,796,1.456,797,3.37,798,1.456,799,3.37,800,1.456,801,2.536,802,1.456,803,7.87,804,6.459,805,1.456,806,1.456,807,2.536,808,1.456,809,1.456,810,1.456,811,3.37,812,1.456,813,1.456,814,2.536,815,1.456,816,1.456,817,2.536,818,1.456,819,3.37,820,2.536,821,1.456,822,4.033,823,2.536,824,1.456,825,1.456,826,1.456,827,1.456,828,1.456,829,1.456,830,1.456,831,1.456,832,1.456,833,1.456,834,1.456,835,1.456,836,1.456,837,1.456,838,1.456,839,1.456,840,1.456,841,3.37,842,4.033,843,1.456,844,2.536,845,1.456,846,1.456,847,2.536,848,1.456,849,1.456,850,1.456,851,1.456,852,1.456,853,1.456,854,1.456,855,1.456,856,1.456,857,1.456,858,1.456,859,1.456,860,1.456,861,1.456,862,1.456,863,1.456,864,1.456,865,2.536,866,1.456,867,1.456,868,1.456,869,2.536,870,2.536,871,1.456,872,2.536,873,1.456,874,1.456,875,1.456,876,1.456]],["title/math/queue-theory/chapter-12.html#_1",[3,0.446]],["text/math/queue-theory/chapter-12.html#_1",[3,0.784]],["title/math/queue-theory/chapter-12.html#_2",[3,0.446]],["text/math/queue-theory/chapter-12.html#_2",[]],["title/math/queue-theory/chapter-12.html#_3",[3,0.446]],["text/math/queue-theory/chapter-12.html#_3",[3,0.825,42,0.941,88,6.168,106,1.599,151,5.126,195,4.498,659,4.764,664,7.043,665,5.484,666,6.409,667,5.484,668,5.484,669,5.484,670,6.409,671,4.518,672,6.763,673,5.484,674,5.484,675,7.043,676,5.588,677,5.484,678,5.484,679,5.484,680,5.484]],["title/math/queue-theory/chapter-12.html#_4",[3,0.446]],["text/math/queue-theory/chapter-12.html#_4",[3,0.818,195,3.957,676,5.946,681,6.846,682,6.846,683,6.846]],["title/math/queue-theory/chapter-12.html#_5",[3,0.446]],["text/math/queue-theory/chapter-12.html#_5",[3,0.813,106,1.261,118,5.927,169,4.029,170,3.785,195,4.029,242,5.48,253,5.724,254,5.741,255,5.062,671,4.444,676,4.686,684,5.395,685,6.969,686,6.969,687,6.969,688,7.749,689,6.969]],["title/math/queue-theory/chapter-12.html#_6",[3,0.446]],["text/math/queue-theory/chapter-12.html#_6",[3,0.818,59,2.992,241,4.028,252,5.35,592,5.909,666,5.604,670,5.604,672,5.604,690,6.803,691,6.803,692,6.803,693,6.803,694,6.292,695,6.803,696,6.803,697,6.292,698,6.803,699,5.35,700,6.803,701,8.045,702,6.803,703,6.803]],["title/math/queue-theory/chapter-12.html#_7",[3,0.446]],["text/math/queue-theory/chapter-12.html#_7",[3,0.79,671,6.819,704,7.19]],["title/math/queue-theory/chapter-12.html#markov",[3,0.338,704,3.399]],["text/math/queue-theory/chapter-12.html#markov",[3,0.804,699,6.305,704,7.675,705,8.018,706,8.018]],["title/math/queue-theory/chapter-12.html#_8",[3,0.446]],["text/math/queue-theory/chapter-12.html#_8",[3,0.763,699,6.605]],["title/math/queue-theory/chapter-12.html#poisson",[3,0.338,671,3.223]],["text/math/queue-theory/chapter-12.html#poisson",[3,0.65]],["title/math/queue-theory/chapter-12.html#_9",[3,0.446]],["text/math/queue-theory/chapter-12.html#_9",[3,0.819,42,0.974,59,2.823,88,6.433,106,1.118,132,3.75,296,3.077,666,5.09,670,5.09,672,2.918,688,3.077,694,3.276,707,3.543,708,5.21,709,3.543,710,3.543,711,3.543,712,7.847,713,6.179,714,3.543,715,5.21,716,3.543,717,3.543,718,5.21,719,3.543,720,3.543,721,3.543,722,5.21,723,3.543,724,3.543,725,3.543,726,3.543,727,3.543,728,3.543,729,5.21,730,3.543,731,3.543,732,3.543,733,3.543,734,3.543,735,3.543,736,6.179,737,3.543,738,3.543,739,3.543,740,3.543,741,6.179,742,6.179,743,5.21,744,3.543,745,5.21,746,5.21,747,3.543,748,3.543,749,3.543,750,6.179,751,3.543,752,3.543,753,3.543,754,5.21,755,3.543,756,3.543,757,3.543,758,3.543,759,3.543,760,4.525,761,3.543,762,3.543,763,3.543,764,3.543,765,3.543,766,3.543,767,3.543,768,3.543,769,3.543,770,3.543,771,3.543,772,3.543,773,3.543,774,3.543,775,3.276,776,3.543,777,3.543]],["title/math/queue-theory/chapter-12.html#mm1",[778,4.771]],["text/math/queue-theory/chapter-12.html#mm1",[3,0.797,697,7.912,760,6.573,775,6.998,778,7.912,779,7.567,780,7.567,781,7.567,782,7.567,783,7.567,784,7.567,785,7.567]],["title/math/queue-theory/chapter-12.html#mms",[699,4.057]],["text/math/queue-theory/chapter-12.html#mms",[3,0.822,59,2.462,101,0.474,150,1.948,151,2.926,241,4.587,252,2.256,377,2.491,666,5.769,670,5.769,672,3.659,688,3.858,699,3.493,760,3.858,786,4.442,787,4.442,788,4.442,789,2.868,790,2.868,791,2.868,792,4.442,793,2.868,794,2.868,795,2.868,796,2.868,797,5.436,798,2.868,799,5.436,800,2.868,801,4.442,802,2.868,803,8.9,804,8.059,805,2.868,806,2.868,807,4.442,808,2.868,809,2.868,810,2.868,811,5.436,812,2.868,813,2.868,814,4.442,815,2.868,816,2.868,817,4.442,818,2.868,819,5.436,820,4.442,821,2.868,822,6.121,823,4.442,824,2.868,825,2.868,826,2.868,827,2.868,828,2.868,829,2.868,830,2.868,831,2.868,832,2.868,833,2.868,834,2.868,835,2.868,836,2.868,837,2.868,838,2.868,839,2.868,840,2.868,841,5.436,842,6.121,843,2.868,844,4.442,845,2.868,846,2.868,847,4.442,848,2.868,849,2.868,850,2.868,851,2.868,852,2.868,853,2.868,854,2.868,855,2.868,856,2.868,857,2.868,858,2.868,859,2.868,860,2.868,861,2.868,862,2.868,863,2.868,864,2.868,865,4.442,866,2.868,867,2.868,868,2.868,869,4.442,870,4.442,871,2.868,872,4.442,873,2.868,874,2.868,875,2.868,876,2.868]]],"fields":["title","text"],"invertedIndex":[["",{"_index":3,"text":{"about.html":{},"coding/dsa.html":{},"coding/dsa.html#_1":{},"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_1":{},"coding/dsa/vector-and-list.html#_2":{},"coding/dsa/vector-and-list.html#_3":{},"coding/index.html":{},"coding/index.html#_1":{},"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/1.html":{},"coding/leetcode/1.html#1":{},"coding/leetcode/1.html#_1":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/101.html":{},"coding/leetcode/101.html#101":{},"coding/leetcode/101.html#_1":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#102":{},"coding/leetcode/102.html#_1":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#118":{},"coding/leetcode/118.html#_1":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#119-ii":{},"coding/leetcode/119.html#_1":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#120":{},"coding/leetcode/120.html#_1":{},"coding/leetcode/120.html#_2":{},"coding/leetcode/121.html":{},"coding/leetcode/121.html#121":{},"coding/leetcode/121.html#_1":{},"coding/leetcode/121.html#_2":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#122-ii":{},"coding/leetcode/122.html#_1":{},"coding/leetcode/122.html#_2":{},"coding/leetcode/125.html":{},"coding/leetcode/125.html#125":{},"coding/leetcode/125.html#_1":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#13":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/136.html":{},"coding/leetcode/136.html#136":{},"coding/leetcode/136.html#_1":{},"coding/leetcode/136.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#14":{},"coding/leetcode/14.html#_1":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#155":{},"coding/leetcode/155.html#_1":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#189":{},"coding/leetcode/189.html#_1":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#19-n":{},"coding/leetcode/19.html#_1":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#198":{},"coding/leetcode/198.html#_1":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#204":{},"coding/leetcode/204.html#_1":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#206":{},"coding/leetcode/206.html#_1":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#21":{},"coding/leetcode/21.html#_1":{},"coding/leetcode/21.html#_2":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#217":{},"coding/leetcode/217.html#_1":{},"coding/leetcode/217.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#234":{},"coding/leetcode/234.html#_1":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#237":{},"coding/leetcode/237.html#_1":{},"coding/leetcode/237.html#_2":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#24":{},"coding/leetcode/24.html#_1":{},"coding/leetcode/24.html#_2":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#242":{},"coding/leetcode/242.html#_1":{},"coding/leetcode/242.html#_2":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#26":{},"coding/leetcode/26.html#_1":{},"coding/leetcode/26.html#_2":{},"coding/leetcode/28.html":{},"coding/leetcode/28.html#28-strstr":{},"coding/leetcode/28.html#_1":{},"coding/leetcode/28.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#315":{},"coding/leetcode/315.html#_1":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/344.html":{},"coding/leetcode/344.html#344":{},"coding/leetcode/344.html#_1":{},"coding/leetcode/344.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#350-ii":{},"coding/leetcode/350.html#_1":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#36":{},"coding/leetcode/36.html#_1":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#38":{},"coding/leetcode/38.html#_1":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#384":{},"coding/leetcode/384.html#_1":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/387.html":{},"coding/leetcode/387.html#387":{},"coding/leetcode/387.html#_1":{},"coding/leetcode/387.html#_2":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#48":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/48.html#_2":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#50-powx-n":{},"coding/leetcode/50.html#_1":{},"coding/leetcode/50.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#509":{},"coding/leetcode/509.html#_1":{},"coding/leetcode/509.html#_3":{},"coding/leetcode/509.html#_4":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#66":{},"coding/leetcode/66.html#_1":{},"coding/leetcode/66.html#_2":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#7":{},"coding/leetcode/7.html#_1":{},"coding/leetcode/7.html#_2":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#70":{},"coding/leetcode/70.html#_1":{},"coding/leetcode/70.html#_2":{},"coding/leetcode/779.html":{},"coding/leetcode/779.html#779-k":{},"coding/leetcode/779.html#_1":{},"coding/leetcode/779.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#8-atoi":{},"coding/leetcode/8.html#_1":{},"coding/leetcode/8.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#88":{},"coding/leetcode/88.html#_1":{},"coding/leetcode/88.html#_2":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#9":{},"coding/leetcode/9.html#_1":{},"coding/leetcode/9.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#98":{},"coding/leetcode/98.html#_1":{},"coding/leetcode/98.html#_2":{},"coding/python.html":{},"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{},"index.html":{},"index.html#project-layout":{},"index.html#welcome-to-mkdocs":{},"math/index.html":{},"math/index.html#_1":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_1":{},"math/queue-theory/chapter-12.html#_3":{},"math/queue-theory/chapter-12.html#_4":{},"math/queue-theory/chapter-12.html#_5":{},"math/queue-theory/chapter-12.html#_6":{},"math/queue-theory/chapter-12.html#_7":{},"math/queue-theory/chapter-12.html#_8":{},"math/queue-theory/chapter-12.html#_9":{},"math/queue-theory/chapter-12.html#markov":{},"math/queue-theory/chapter-12.html#mm1":{},"math/queue-theory/chapter-12.html#mms":{},"math/queue-theory/chapter-12.html#poisson":{},"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{},"weixin-2020.html":{},"weixin-2020.html#_1":{}},"title":{"coding/dsa.html":{},"coding/dsa.html#_1":{},"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_1":{},"coding/dsa/vector-and-list.html#_2":{},"coding/dsa/vector-and-list.html#_3":{},"coding/index.html":{},"coding/index.html#_1":{},"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/1.html":{},"coding/leetcode/1.html#1":{},"coding/leetcode/1.html#_1":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/101.html":{},"coding/leetcode/101.html#101":{},"coding/leetcode/101.html#_1":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#102":{},"coding/leetcode/102.html#_1":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#118":{},"coding/leetcode/118.html#_1":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#119-ii":{},"coding/leetcode/119.html#_1":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#120":{},"coding/leetcode/120.html#_1":{},"coding/leetcode/120.html#_2":{},"coding/leetcode/121.html":{},"coding/leetcode/121.html#121":{},"coding/leetcode/121.html#_1":{},"coding/leetcode/121.html#_2":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#122-ii":{},"coding/leetcode/122.html#_1":{},"coding/leetcode/122.html#_2":{},"coding/leetcode/125.html":{},"coding/leetcode/125.html#125":{},"coding/leetcode/125.html#_1":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#13":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/136.html":{},"coding/leetcode/136.html#136":{},"coding/leetcode/136.html#_1":{},"coding/leetcode/136.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#14":{},"coding/leetcode/14.html#_1":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#155":{},"coding/leetcode/155.html#_1":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#189":{},"coding/leetcode/189.html#_1":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/19.html#_1":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#198":{},"coding/leetcode/198.html#_1":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#204":{},"coding/leetcode/204.html#_1":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#206":{},"coding/leetcode/206.html#_1":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#21":{},"coding/leetcode/21.html#_1":{},"coding/leetcode/21.html#_2":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#217":{},"coding/leetcode/217.html#_1":{},"coding/leetcode/217.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#234":{},"coding/leetcode/234.html#_1":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#237":{},"coding/leetcode/237.html#_1":{},"coding/leetcode/237.html#_2":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#24":{},"coding/leetcode/24.html#_1":{},"coding/leetcode/24.html#_2":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#242":{},"coding/leetcode/242.html#_1":{},"coding/leetcode/242.html#_2":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#26":{},"coding/leetcode/26.html#_1":{},"coding/leetcode/26.html#_2":{},"coding/leetcode/28.html":{},"coding/leetcode/28.html#28-strstr":{},"coding/leetcode/28.html#_1":{},"coding/leetcode/28.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#315":{},"coding/leetcode/315.html#_1":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/344.html":{},"coding/leetcode/344.html#344":{},"coding/leetcode/344.html#_1":{},"coding/leetcode/344.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#350-ii":{},"coding/leetcode/350.html#_1":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#36":{},"coding/leetcode/36.html#_1":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#38":{},"coding/leetcode/38.html#_1":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#384":{},"coding/leetcode/384.html#_1":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/387.html":{},"coding/leetcode/387.html#387":{},"coding/leetcode/387.html#_1":{},"coding/leetcode/387.html#_2":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#48":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/48.html#_2":{},"coding/leetcode/50.html#_1":{},"coding/leetcode/50.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#509":{},"coding/leetcode/509.html#_1":{},"coding/leetcode/509.html#_2":{},"coding/leetcode/509.html#_3":{},"coding/leetcode/509.html#_4":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#66":{},"coding/leetcode/66.html#_1":{},"coding/leetcode/66.html#_2":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#7":{},"coding/leetcode/7.html#_1":{},"coding/leetcode/7.html#_2":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#70":{},"coding/leetcode/70.html#_1":{},"coding/leetcode/70.html#_2":{},"coding/leetcode/779.html#_1":{},"coding/leetcode/779.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#8-atoi":{},"coding/leetcode/8.html#_1":{},"coding/leetcode/8.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#88":{},"coding/leetcode/88.html#_1":{},"coding/leetcode/88.html#_2":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#9":{},"coding/leetcode/9.html#_1":{},"coding/leetcode/9.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#98":{},"coding/leetcode/98.html#_1":{},"coding/leetcode/98.html#_2":{},"coding/python.html":{},"coding/python.html#_1":{},"coding/python/killable-thread.html":{},"math/index.html":{},"math/index.html#_1":{},"math/queue-theory/chapter-12.html#_1":{},"math/queue-theory/chapter-12.html#_2":{},"math/queue-theory/chapter-12.html#_3":{},"math/queue-theory/chapter-12.html#_4":{},"math/queue-theory/chapter-12.html#_5":{},"math/queue-theory/chapter-12.html#_6":{},"math/queue-theory/chapter-12.html#_7":{},"math/queue-theory/chapter-12.html#_8":{},"math/queue-theory/chapter-12.html#_9":{},"math/queue-theory/chapter-12.html#markov":{},"math/queue-theory/chapter-12.html#poisson":{},"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{},"weixin-2020.html#_1":{}}}],["0",{"_index":106,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_1":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_2":{},"coding/leetcode/121.html":{},"coding/leetcode/121.html#_1":{},"coding/leetcode/121.html#_2":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{},"coding/leetcode/122.html#_2":{},"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/136.html":{},"coding/leetcode/136.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_2":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{},"coding/leetcode/26.html#_2":{},"coding/leetcode/28.html":{},"coding/leetcode/28.html#_1":{},"coding/leetcode/28.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/344.html":{},"coding/leetcode/344.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/387.html":{},"coding/leetcode/387.html#_1":{},"coding/leetcode/387.html#_2":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_2":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{},"coding/leetcode/509.html#_3":{},"coding/leetcode/509.html#_4":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_1":{},"coding/leetcode/66.html#_2":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_1":{},"coding/leetcode/7.html#_2":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#_2":{},"coding/leetcode/779.html":{},"coding/leetcode/779.html#_1":{},"coding/leetcode/779.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{},"coding/leetcode/8.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_2":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_2":{},"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{},"math/queue-theory/chapter-12.html#_5":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["0,0,1,1,1,2,2,3,3,4",{"_index":415,"text":{"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{}},"title":{}}],["0.25",{"_index":540,"text":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{}},"title":{}}],["0.25000",{"_index":537,"text":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{}},"title":{}}],["01",{"_index":578,"text":{"coding/leetcode/779.html":{},"coding/leetcode/779.html#_1":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_1":{}},"title":{}}],["0110",{"_index":579,"text":{"coding/leetcode/779.html":{},"coding/leetcode/779.html#_1":{}},"title":{}}],["01101001",{"_index":580,"text":{"coding/leetcode/779.html":{},"coding/leetcode/779.html#_1":{}},"title":{}}],["0\\leq",{"_index":554,"text":{"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{}},"title":{}}],["0\\sim\\infti",{"_index":774,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["0x51",{"_index":386,"text":{"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{}},"title":{}}],["0x55",{"_index":383,"text":{"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{}},"title":{}}],["1",{"_index":42,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/1.html":{},"coding/leetcode/1.html#_1":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/101.html":{},"coding/leetcode/101.html#_1":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_1":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_1":{},"coding/leetcode/120.html#_2":{},"coding/leetcode/121.html":{},"coding/leetcode/121.html#_1":{},"coding/leetcode/121.html#_2":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{},"coding/leetcode/122.html#_2":{},"coding/leetcode/125.html":{},"coding/leetcode/125.html#_1":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/136.html":{},"coding/leetcode/136.html#_1":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_1":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_1":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_1":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_1":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_1":{},"coding/leetcode/217.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_1":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#_1":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_1":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_1":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{},"coding/leetcode/26.html#_2":{},"coding/leetcode/28.html":{},"coding/leetcode/28.html#_1":{},"coding/leetcode/28.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/344.html":{},"coding/leetcode/344.html#_1":{},"coding/leetcode/344.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_1":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_1":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_1":{},"coding/leetcode/387.html":{},"coding/leetcode/387.html#_1":{},"coding/leetcode/387.html#_2":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/48.html#_2":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{},"coding/leetcode/50.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{},"coding/leetcode/509.html#_3":{},"coding/leetcode/509.html#_4":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_1":{},"coding/leetcode/66.html#_2":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_1":{},"coding/leetcode/7.html#_2":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#_1":{},"coding/leetcode/70.html#_2":{},"coding/leetcode/779.html":{},"coding/leetcode/779.html#_1":{},"coding/leetcode/779.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_2":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_1":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_1":{},"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{},"math/queue-theory/chapter-12.html#_9":{},"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{}},"title":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#1":{}}}],["1)!(",{"_index":803,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["1)!\\left(t+\\frac{\\rho_0^s}{(",{"_index":864,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["1)!}\\sum_{i=1}^\\infti",{"_index":846,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["1)!}p_0",{"_index":844,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["1)!}p_0+s\\sum_{i=s+1}^\\infti",{"_index":843,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["1)!}}{\\left(t+\\frac{\\rho_0^s}{(",{"_index":849,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["1)\\right",{"_index":373,"text":{"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{}},"title":{}}],["1,1",{"_index":185,"text":{"coding/leetcode/118.html":{},"coding/leetcode/118.html#_1":{}},"title":{}}],["1,1,1,3,3,4,3,2,4,2",{"_index":393,"text":{"coding/leetcode/217.html":{},"coding/leetcode/217.html#_1":{}},"title":{}}],["1,1,2",{"_index":414,"text":{"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{}},"title":{}}],["1,2,1",{"_index":186,"text":{"coding/leetcode/118.html":{},"coding/leetcode/118.html#_1":{}},"title":{}}],["1,2,2,1",{"_index":453,"text":{"coding/leetcode/350.html":{},"coding/leetcode/350.html#_1":{}},"title":{}}],["1,2,2,3,4,4,3",{"_index":140,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_1":{}},"title":{}}],["1,2,2,3,5,6",{"_index":599,"text":{"coding/leetcode/88.html":{},"coding/leetcode/88.html#_1":{}},"title":{}}],["1,2,2,null,3,null,3",{"_index":143,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_1":{}},"title":{}}],["1,2,3",{"_index":493,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_1":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_1":{}},"title":{}}],["1,2,3,0,0,0",{"_index":597,"text":{"coding/leetcode/88.html":{},"coding/leetcode/88.html#_1":{}},"title":{}}],["1,2,3,1",{"_index":365,"text":{"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_1":{}},"title":{}}],["1,2,3,4",{"_index":392,"text":{"coding/leetcode/217.html":{},"coding/leetcode/217.html#_1":{}},"title":{}}],["1,2,3,4,5",{"_index":224,"text":{"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{}},"title":{}}],["1,2,3,4,5,6,7",{"_index":344,"text":{"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{}},"title":{}}],["1,2,4",{"_index":561,"text":{"coding/leetcode/66.html":{},"coding/leetcode/66.html#_1":{}},"title":{}}],["1,3,3,1",{"_index":187,"text":{"coding/leetcode/118.html":{},"coding/leetcode/118.html#_1":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_1":{}},"title":{}}],["1,4,6,4,1",{"_index":188,"text":{"coding/leetcode/118.html":{},"coding/leetcode/118.html#_1":{}},"title":{}}],["1/2)^2",{"_index":538,"text":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{}},"title":{}}],["1/4",{"_index":539,"text":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{}},"title":{}}],["10",{"_index":226,"text":{"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_1":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_2":{},"coding/leetcode/779.html":{},"coding/leetcode/779.html#_1":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_2":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_1":{},"coding/leetcode/9.html#_2":{},"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{}},"title":{}}],["100",{"_index":256,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{}},"title":{}}],["100,3",{"_index":351,"text":{"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{}},"title":{}}],["100,3,99",{"_index":348,"text":{"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{}},"title":{}}],["100.0",{"_index":541,"text":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{}},"title":{}}],["1000",{"_index":258,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["10000",{"_index":324,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["101",{"_index":139,"text":{"coding/leetcode/101.html":{}},"title":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#101":{}}}],["102",{"_index":160,"text":{"coding/leetcode/102.html":{}},"title":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#102":{}}}],["1024.00000",{"_index":534,"text":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{}},"title":{}}],["10^4",{"_index":437,"text":{"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{}},"title":{}}],["10^5",{"_index":436,"text":{"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{}},"title":{}}],["10\uff0c\u800c\u6570\u5b57\u90e8\u5206\u4e0d\u4f1a\u8d85\u8fc710",{"_index":486,"text":{"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{}},"title":{}}],["11",{"_index":102,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_1":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_1":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_1":{},"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{}},"title":{}}],["111221",{"_index":485,"text":{"coding/leetcode/38.html":{},"coding/leetcode/38.html#_1":{}},"title":{}}],["118",{"_index":62,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/118.html":{}},"title":{"coding/leetcode/118.html":{},"coding/leetcode/118.html#118":{}}}],["119",{"_index":63,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/119.html":{}},"title":{"coding/leetcode/119.html":{},"coding/leetcode/119.html#119-ii":{}}}],["12",{"_index":367,"text":{"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_1":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{},"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{}},"title":{"math/queue-theory/chapter-12.html":{}}}],["120",{"_index":203,"text":{"coding/leetcode/120.html":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_1":{}},"title":{"coding/leetcode/120.html":{},"coding/leetcode/120.html#120":{}}}],["121",{"_index":214,"text":{"coding/leetcode/121.html":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_1":{}},"title":{"coding/leetcode/121.html":{},"coding/leetcode/121.html#121":{}}}],["1211",{"_index":484,"text":{"coding/leetcode/38.html":{},"coding/leetcode/38.html#_1":{}},"title":{}}],["122",{"_index":65,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/122.html":{}},"title":{"coding/leetcode/122.html":{},"coding/leetcode/122.html#122-ii":{}}}],["123",{"_index":562,"text":{"coding/leetcode/66.html":{},"coding/leetcode/66.html#_1":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_1":{}},"title":{}}],["125",{"_index":66,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/125.html":{}},"title":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#125":{}}}],["13",{"_index":47,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/13.html":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{}},"title":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#13":{}}}],["136",{"_index":67,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/136.html":{}},"title":{"coding/leetcode/136.html":{},"coding/leetcode/136.html#136":{}}}],["14",{"_index":48,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/14.html":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{}},"title":{"coding/leetcode/14.html":{},"coding/leetcode/14.html#14":{}}}],["15",{"_index":103,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_1":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_1":{}},"title":{}}],["15,13",{"_index":528,"text":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{}},"title":{}}],["15,14,12,16",{"_index":527,"text":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{}},"title":{}}],["15,7",{"_index":164,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_1":{}},"title":{}}],["155",{"_index":306,"text":{"coding/leetcode/155.html":{}},"title":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#155":{}}}],["16",{"_index":529,"text":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{}},"title":{}}],["189",{"_index":68,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/189.html":{}},"title":{"coding/leetcode/189.html":{},"coding/leetcode/189.html#189":{}}}],["19",{"_index":356,"text":{"coding/leetcode/19.html":{}},"title":{"coding/leetcode/19.html":{},"coding/leetcode/19.html#19-n":{}}}],["198",{"_index":364,"text":{"coding/leetcode/198.html":{}},"title":{"coding/leetcode/198.html":{},"coding/leetcode/198.html#198":{}}}],["1994",{"_index":276,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["1\\cdot",{"_index":790,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["1}(t)+(1",{"_index":732,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["1}(t)+\\mu_{j+1}p_{j+1}(t",{"_index":742,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["1}\\delta",{"_index":730,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["1}\\frac{\\rho_0^i}{i!}+\\frac{\\rho_0^s}{(",{"_index":802,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["1}\\frac{\\rho_0^i}{i!}+\\frac{\\rho_0^s}{s!}\\sum_{i=0}^\\infti",{"_index":800,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["1}\\frac{\\rho_0^i}{i!}+\\sum_{i=s}^\\infti",{"_index":798,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["1}\\frac{\\rho_0^i}{i!}=t",{"_index":806,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["1}^\\infti",{"_index":827,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["1}^{j}\\frac{\\lambda_{i",{"_index":772,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["1}p_{j",{"_index":741,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["1}}{(k",{"_index":680,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{}},"title":{}}],["1}}{\\mu_1\\mu_2\\cdots\\mu_i}p_0=\\left",{"_index":809,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["1}}{\\mu_1\\mu_2\\cdots\\mu_j}p_0=p_0\\prod_{i",{"_index":771,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["1}}{\\mu_i",{"_index":777,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["1}}{\\mu_j",{"_index":773,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["1}}{\\mu_{j+1}}p_{j",{"_index":757,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["1\u30012\uff0c\u5f02\u6216\u8fd0\u7b97\u7684\u7ed3\u679c\u4e0e\u53c2\u4e0e\u8fd0\u7b97\u7684\u6240\u6709\u6570\u503c\u7684\u6392\u5217\u987a\u5e8f\u65e0\u5173\u3002\u6839\u636e\u6027\u8d283\u30014\uff0c\u76f8\u540c\u6574\u6570\u7684\u5f02\u6216\u503c\u4e3a0\uff0c0",{"_index":291,"text":{"coding/leetcode/136.html":{},"coding/leetcode/136.html#_2":{}},"title":{}}],["1\u300212",{"_index":259,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["2",{"_index":101,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_1":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/101.html":{},"coding/leetcode/101.html#_1":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_1":{},"coding/leetcode/121.html":{},"coding/leetcode/121.html#_1":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{},"coding/leetcode/122.html#_2":{},"coding/leetcode/125.html":{},"coding/leetcode/125.html#_1":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/136.html":{},"coding/leetcode/136.html#_1":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_1":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_1":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_1":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_1":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_1":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_1":{},"coding/leetcode/217.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_1":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#_1":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_1":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_1":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{},"coding/leetcode/26.html#_2":{},"coding/leetcode/28.html":{},"coding/leetcode/28.html#_1":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{},"coding/leetcode/344.html":{},"coding/leetcode/344.html#_1":{},"coding/leetcode/344.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_1":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_1":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_1":{},"coding/leetcode/387.html":{},"coding/leetcode/387.html#_1":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/48.html#_2":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{},"coding/leetcode/50.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{},"coding/leetcode/509.html#_3":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_1":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_1":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#_1":{},"coding/leetcode/70.html#_2":{},"coding/leetcode/779.html":{},"coding/leetcode/779.html#_1":{},"coding/leetcode/779.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_1":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_1":{},"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{},"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{}},"title":{}}],["2,1,1,0",{"_index":435,"text":{"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{}},"title":{}}],["2,2",{"_index":455,"text":{"coding/leetcode/350.html":{},"coding/leetcode/350.html#_1":{}},"title":{}}],["2,2,1",{"_index":289,"text":{"coding/leetcode/136.html":{},"coding/leetcode/136.html#_1":{}},"title":{}}],["2,5,6",{"_index":598,"text":{"coding/leetcode/88.html":{},"coding/leetcode/88.html#_1":{}},"title":{}}],["2,7,9,3,1",{"_index":366,"text":{"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{}},"title":{}}],["2.00000",{"_index":533,"text":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{}},"title":{}}],["2.10000",{"_index":535,"text":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{}},"title":{}}],["20",{"_index":162,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_1":{}},"title":{}}],["2020",{"_index":39,"text":{},"title":{"weixin-2020.html":{}}}],["204",{"_index":376,"text":{"coding/leetcode/204.html":{}},"title":{"coding/leetcode/204.html":{},"coding/leetcode/204.html#204":{}}}],["206",{"_index":69,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/206.html":{}},"title":{"coding/leetcode/206.html":{},"coding/leetcode/206.html#206":{}}}],["21",{"_index":49,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/21.html":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_1":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_1":{}},"title":{"coding/leetcode/21.html":{},"coding/leetcode/21.html#21":{}}}],["2147483648",{"_index":543,"text":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#_2":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{}},"title":{}}],["217",{"_index":70,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/217.html":{}},"title":{"coding/leetcode/217.html":{},"coding/leetcode/217.html#217":{}}}],["231",{"_index":594,"text":{"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{}},"title":{}}],["234",{"_index":398,"text":{"coding/leetcode/234.html":{}},"title":{"coding/leetcode/234.html":{},"coding/leetcode/234.html#234":{}}}],["237",{"_index":71,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/237.html":{}},"title":{"coding/leetcode/237.html":{},"coding/leetcode/237.html#237":{}}}],["24",{"_index":50,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/24.html":{}},"title":{"coding/leetcode/24.html":{},"coding/leetcode/24.html#24":{}}}],["242",{"_index":72,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/242.html":{}},"title":{"coding/leetcode/242.html":{},"coding/leetcode/242.html#242":{}}}],["26",{"_index":51,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_2":{},"coding/leetcode/26.html":{},"coding/leetcode/387.html":{},"coding/leetcode/387.html#_2":{}},"title":{"coding/leetcode/26.html":{},"coding/leetcode/26.html#26":{}}}],["27",{"_index":261,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["28",{"_index":52,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/28.html":{}},"title":{"coding/leetcode/28.html":{},"coding/leetcode/28.html#28-strstr":{}}}],["2],[0",{"_index":313,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{}},"title":{}}],["2^(n",{"_index":581,"text":{"coding/leetcode/779.html":{},"coding/leetcode/779.html#_1":{}},"title":{}}],["2^{31",{"_index":542,"text":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_1":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{}},"title":{}}],["2\u7684\u500d\u6570\uff0c\u5269\u4e0b\u7684\u7b2c\u4e00\u4e2a\u6ca1\u6709\u88ab\u5212\u53bb\u7684\u6570\u5b573\u5373\u4e3a\u8d28\u6570\uff0c\u518d\u82b1\u65d7\u6240\u67093\u7684\u500d\u6570\uff0c\u5269\u4e0b\u7684\u7b2c\u4e00\u4e2a\u6ca1\u6709\u88ab\u5212\u53bb\u7684\u6570\u5b575",{"_index":378,"text":{"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{}},"title":{}}],["3",{"_index":141,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_1":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_1":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_1":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_1":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_1":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_1":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_1":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_1":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_1":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_1":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_1":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_1":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_1":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#_1":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_1":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_1":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_1":{},"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{}},"title":{}}],["3,4",{"_index":204,"text":{"coding/leetcode/120.html":{},"coding/leetcode/120.html#_1":{}},"title":{}}],["3,9,20,null,null,15,7",{"_index":161,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_1":{}},"title":{}}],["3,99",{"_index":349,"text":{"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{}},"title":{}}],["3,null,0",{"_index":315,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{}},"title":{}}],["30",{"_index":483,"text":{"coding/leetcode/38.html":{},"coding/leetcode/38.html#_1":{},"coding/leetcode/779.html":{},"coding/leetcode/779.html#_1":{}},"title":{}}],["31",{"_index":574,"text":{"coding/leetcode/7.html":{},"coding/leetcode/7.html#_2":{}},"title":{}}],["315",{"_index":73,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/315.html":{}},"title":{"coding/leetcode/315.html":{},"coding/leetcode/315.html#315":{}}}],["32",{"_index":246,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{},"coding/leetcode/50.html#_2":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_1":{},"coding/leetcode/7.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{}},"title":{}}],["321",{"_index":571,"text":{"coding/leetcode/7.html":{},"coding/leetcode/7.html#_1":{}},"title":{}}],["344",{"_index":74,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/344.html":{}},"title":{"coding/leetcode/344.html":{},"coding/leetcode/344.html#344":{}}}],["350",{"_index":451,"text":{"coding/leetcode/350.html":{}},"title":{"coding/leetcode/350.html":{},"coding/leetcode/350.html#350-ii":{}}}],["36",{"_index":54,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/36.html":{}},"title":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#36":{}}}],["38",{"_index":55,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/38.html":{}},"title":{"coding/leetcode/38.html":{},"coding/leetcode/38.html#38":{}}}],["384",{"_index":492,"text":{"coding/leetcode/384.html":{}},"title":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#384":{}}}],["387",{"_index":75,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/387.html":{}},"title":{"coding/leetcode/387.html":{},"coding/leetcode/387.html#387":{}}}],["3999",{"_index":271,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["3x3",{"_index":465,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{}},"title":{}}],["4",{"_index":142,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_1":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/136.html":{},"coding/leetcode/136.html#_1":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_1":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_1":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_1":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_1":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#_1":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_1":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_1":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{},"coding/leetcode/779.html":{},"coding/leetcode/779.html#_1":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_1":{},"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{}},"title":{}}],["4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1",{"_index":470,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{}},"title":{}}],["4\",\"1\",\"9\",\".\",\".\",\"5",{"_index":473,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{}},"title":{}}],["4,1,2,1,2",{"_index":290,"text":{"coding/leetcode/136.html":{},"coding/leetcode/136.html#_1":{}},"title":{}}],["4,1,8,3",{"_index":206,"text":{"coding/leetcode/120.html":{},"coding/leetcode/120.html#_1":{}},"title":{}}],["4,1,9",{"_index":401,"text":{"coding/leetcode/237.html":{},"coding/leetcode/237.html#_1":{}},"title":{}}],["4,3,2,1",{"_index":563,"text":{"coding/leetcode/66.html":{},"coding/leetcode/66.html#_1":{}},"title":{}}],["4,3,2,2",{"_index":564,"text":{"coding/leetcode/66.html":{},"coding/leetcode/66.html#_1":{}},"title":{}}],["4,5,1,9",{"_index":400,"text":{"coding/leetcode/237.html":{},"coding/leetcode/237.html#_1":{}},"title":{}}],["4,5,6",{"_index":520,"text":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{}},"title":{}}],["4,5,9",{"_index":402,"text":{"coding/leetcode/237.html":{},"coding/leetcode/237.html#_1":{}},"title":{}}],["4,9",{"_index":458,"text":{"coding/leetcode/350.html":{},"coding/leetcode/350.html#_1":{}},"title":{}}],["4,9,5",{"_index":456,"text":{"coding/leetcode/350.html":{},"coding/leetcode/350.html#_1":{}},"title":{}}],["40",{"_index":267,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["400",{"_index":269,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{}},"title":{}}],["4193",{"_index":589,"text":{"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{}},"title":{}}],["42",{"_index":588,"text":{"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{}},"title":{}}],["4321",{"_index":565,"text":{"coding/leetcode/66.html":{},"coding/leetcode/66.html#_1":{}},"title":{}}],["48",{"_index":56,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/48.html":{}},"title":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#48":{}}}],["49",{"_index":281,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["4\u4e2a\u7b49\u957f\u7684\u90e8\u5206\uff0c\u5176\u4e2d\u7b2c1\u30014\u90e8\u5206\u76f8\u540c\uff0c2\u30013",{"_index":582,"text":{"coding/leetcode/779.html":{},"coding/leetcode/779.html#_2":{}},"title":{}}],["5",{"_index":184,"text":{"coding/leetcode/118.html":{},"coding/leetcode/118.html#_1":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_1":{},"coding/leetcode/121.html":{},"coding/leetcode/121.html#_1":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_1":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_1":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_1":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#_1":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_1":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/779.html":{},"coding/leetcode/779.html#_1":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_1":{},"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{}},"title":{}}],["5\",\"3\",\".\",\".\",\"7",{"_index":466,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{}},"title":{}}],["5,1,4,null,null,3,6",{"_index":602,"text":{"coding/leetcode/98.html":{},"coding/leetcode/98.html#_1":{}},"title":{}}],["5,2,6,1",{"_index":434,"text":{"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{}},"title":{}}],["5,6,7,1,2,3,4",{"_index":345,"text":{"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{}},"title":{}}],["50",{"_index":57,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/50.html":{}},"title":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#50-powx-n":{}}}],["500",{"_index":257,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/13.html#_2":{}},"title":{}}],["509",{"_index":547,"text":{"coding/leetcode/509.html":{}},"title":{"coding/leetcode/509.html":{},"coding/leetcode/509.html#509":{}}}],["58",{"_index":274,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["6",{"_index":216,"text":{"coding/leetcode/121.html":{},"coding/leetcode/121.html#_1":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_1":{},"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{}},"title":{}}],["6\",\".\",\".\",\".\",\".\",\"2\",\"8",{"_index":472,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{}},"title":{}}],["6\",\".\",\".\",\"1\",\"9\",\"5",{"_index":467,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{}},"title":{}}],["6,5,7",{"_index":205,"text":{"coding/leetcode/120.html":{},"coding/leetcode/120.html#_1":{}},"title":{}}],["6,7,1,2,3,4,5",{"_index":347,"text":{"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{}},"title":{}}],["66",{"_index":60,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/66.html":{}},"title":{"coding/leetcode/66.html":{},"coding/leetcode/66.html#66":{}}}],["7",{"_index":43,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/1.html":{},"coding/leetcode/1.html#_1":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_1":{},"coding/leetcode/121.html":{},"coding/leetcode/121.html#_1":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_1":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/7.html":{},"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{}},"title":{"coding/leetcode/7.html":{},"coding/leetcode/7.html#7":{}}}],["7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6",{"_index":471,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{}},"title":{}}],["7,1,2,3,4,5,6",{"_index":346,"text":{"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{}},"title":{}}],["7,1,5,3,6,4",{"_index":215,"text":{"coding/leetcode/121.html":{},"coding/leetcode/121.html#_1":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{}},"title":{}}],["7,10,11",{"_index":530,"text":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{}},"title":{}}],["7,4,1",{"_index":522,"text":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{}},"title":{}}],["7,6,4,3,1",{"_index":217,"text":{"coding/leetcode/121.html":{},"coding/leetcode/121.html#_1":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{}},"title":{}}],["7,8,9",{"_index":521,"text":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{}},"title":{}}],["70",{"_index":61,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/70.html":{}},"title":{"coding/leetcode/70.html":{},"coding/leetcode/70.html#70":{}}}],["779",{"_index":577,"text":{"coding/leetcode/779.html":{}},"title":{"coding/leetcode/779.html":{},"coding/leetcode/779.html#779-k":{}}}],["8",{"_index":44,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/8.html":{},"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{}},"title":{"coding/leetcode/8.html":{},"coding/leetcode/8.html#8-atoi":{}}}],["8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3",{"_index":469,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{}},"title":{}}],["8\",\".\",\".\",\"7\",\"9",{"_index":474,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{}},"title":{}}],["8\",\"3\",\".\",\".\",\"7",{"_index":475,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{}},"title":{}}],["8,10",{"_index":526,"text":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{}},"title":{}}],["8,5,2",{"_index":523,"text":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{}},"title":{}}],["80",{"_index":238,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{}},"title":{}}],["88",{"_index":596,"text":{"coding/leetcode/88.html":{}},"title":{"coding/leetcode/88.html":{},"coding/leetcode/88.html#88":{}}}],["9",{"_index":46,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/1.html":{},"coding/leetcode/1.html#_1":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_1":{},"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#_1":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_2":{},"coding/leetcode/9.html":{},"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{}},"title":{"coding/leetcode/9.html":{},"coding/leetcode/9.html#9":{}}}],["9\",\"8\",\".\",\".\",\".\",\".\",\"6",{"_index":468,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{}},"title":{}}],["9,11",{"_index":525,"text":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{}},"title":{}}],["9,20",{"_index":163,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_1":{}},"title":{}}],["9,4,9,8,4",{"_index":457,"text":{"coding/leetcode/350.html":{},"coding/leetcode/350.html#_1":{}},"title":{}}],["9,6,3",{"_index":524,"text":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{}},"title":{}}],["9.26100",{"_index":536,"text":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{}},"title":{}}],["90",{"_index":268,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{}},"title":{}}],["900",{"_index":270,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["91283472332",{"_index":593,"text":{"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{}},"title":{}}],["98",{"_index":601,"text":{"coding/leetcode/98.html":{}},"title":{"coding/leetcode/98.html":{},"coding/leetcode/98.html#98":{}}}],["987",{"_index":591,"text":{"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{}},"title":{}}],["99",{"_index":350,"text":{"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{}},"title":{}}],["999",{"_index":283,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["9999+1",{"_index":566,"text":{"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{}},"title":{}}],["9x9",{"_index":464,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{}},"title":{}}],["_0}{\\mu_2}p_0",{"_index":763,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["__init__",{"_index":612,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["_activ",{"_index":624,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["_capac",{"_index":95,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{}},"title":{}}],["_elem",{"_index":96,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{}},"title":{}}],["_n",{"_index":707,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["_size",{"_index":93,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{}},"title":{}}],["_thread_id",{"_index":623,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["a_i",{"_index":218,"text":{"coding/leetcode/121.html":{},"coding/leetcode/121.html#_2":{}},"title":{}}],["a_j",{"_index":219,"text":{"coding/leetcode/121.html":{},"coding/leetcode/121.html#_2":{}},"title":{}}],["a_{i",{"_index":372,"text":{"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{}},"title":{}}],["aaaaa",{"_index":425,"text":{"coding/leetcode/28.html":{},"coding/leetcode/28.html#_1":{}},"title":{}}],["add",{"_index":570,"text":{"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{}},"title":{}}],["alpha",{"_index":669,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{}},"title":{}}],["alpha)=\\left",{"_index":665,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{}},"title":{}}],["anagram",{"_index":407,"text":{"coding/leetcode/242.html":{},"coding/leetcode/242.html#_1":{}},"title":{}}],["arg",{"_index":648,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["array",{"_index":110,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{}},"title":{}}],["ascii",{"_index":445,"text":{"coding/leetcode/344.html":{},"coding/leetcode/344.html#_1":{}},"title":{}}],["ascii\u6570\u503c\u76f8\u5dee32\uff0c\u4f46ascii\u6570\u503c\u76f8\u5dee32",{"_index":236,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{}},"title":{}}],["assum",{"_index":112,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{}},"title":{}}],["atoi",{"_index":585,"text":{"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{}},"title":{"coding/leetcode/8.html":{},"coding/leetcode/8.html#8-atoi":{}}}],["b",{"_index":118,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/136.html":{},"coding/leetcode/136.html#_2":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_5":{}},"title":{}}],["baseexcept",{"_index":658,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["bba",{"_index":426,"text":{"coding/leetcode/28.html":{},"coding/leetcode/28.html#_1":{}},"title":{}}],["begin{align",{"_index":666,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{},"math/queue-theory/chapter-12.html#_6":{},"math/queue-theory/chapter-12.html#_9":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["binari",{"_index":145,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["board",{"_index":477,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{}},"title":{}}],["boardcols",{"_index":479,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{}},"title":{}}],["boardsiz",{"_index":478,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{}},"title":{}}],["bool",{"_index":152,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_2":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["both",{"_index":166,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{}},"title":{}}],["break",{"_index":135,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_2":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["build",{"_index":20,"text":{"index.html":{},"index.html#commands":{}},"title":{}}],["c",{"_index":253,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/136.html":{},"coding/leetcode/136.html#_2":{},"coding/leetcode/28.html":{},"coding/leetcode/28.html#_1":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_5":{}},"title":{}}],["c++\u63d0\u4f9b\u4e86\u6a21\u677f\u7c7b\u7684\u529f\u80fd\u7528\u6765\u9488\u5bf9\u4e0d\u540c\u7c7b\u578b\u7684\u5143\u7d20\u63d0\u4f9b\u76f8\u540c\u7684\u529f\u80fd\u3002\u5bf9\u4e8e\u67d0\u4e2aadt",{"_index":85,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{}},"title":{}}],["c/c",{"_index":84,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{}},"title":{}}],["cach",{"_index":546,"text":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_3":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#_2":{}},"title":{}}],["call",{"_index":114,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{}},"title":{}}],["callabl",{"_index":647,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["caller",{"_index":113,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{}},"title":{}}],["canal",{"_index":232,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_1":{}},"title":{}}],["car",{"_index":235,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_1":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_1":{}},"title":{}}],["case",{"_index":288,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_2":{}},"title":{}}],["cdot",{"_index":377,"text":{"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["cell",{"_index":121,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{}},"title":{}}],["chapter",{"_index":663,"text":{"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{}},"title":{"math/queue-theory/chapter-12.html":{}}}],["char",{"_index":240,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_2":{},"coding/leetcode/28.html":{},"coding/leetcode/28.html#_2":{},"coding/leetcode/344.html":{},"coding/leetcode/344.html#_1":{},"coding/leetcode/344.html#_2":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/387.html":{},"coding/leetcode/387.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_2":{}},"title":{}}],["class",{"_index":89,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{},"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["climbstair",{"_index":576,"text":{"coding/leetcode/70.html":{},"coding/leetcode/70.html#_2":{}},"title":{}}],["climbstairs_cach",{"_index":575,"text":{"coding/leetcode/70.html":{},"coding/leetcode/70.html#_2":{}},"title":{}}],["cm",{"_index":277,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["cmxcix",{"_index":284,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["columns",{"_index":167,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{}},"title":{}}],["command",{"_index":8,"text":{"index.html":{}},"title":{"index.html#commands":{}}}],["comp",{"_index":394,"text":{"coding/leetcode/217.html":{},"coding/leetcode/217.html#_2":{}},"title":{}}],["comparetwo",{"_index":297,"text":{"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{}},"title":{}}],["configur",{"_index":29,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"index.html":{},"index.html#project-layout":{}},"title":{}}],["const",{"_index":395,"text":{"coding/leetcode/217.html":{},"coding/leetcode/217.html#_2":{}},"title":{}}],["containsdupl",{"_index":396,"text":{"coding/leetcode/217.html":{},"coding/leetcode/217.html#_2":{}},"title":{}}],["count",{"_index":432,"text":{"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{}},"title":{}}],["countandsay",{"_index":488,"text":{"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{}},"title":{}}],["counter",{"_index":490,"text":{"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{}},"title":{}}],["countprim",{"_index":380,"text":{"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{}},"title":{}}],["counts[i",{"_index":433,"text":{"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{}},"title":{}}],["countsmal",{"_index":443,"text":{"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{}},"title":{}}],["creat",{"_index":12,"text":{"index.html":{},"index.html#commands":{}},"title":{}}],["credit",{"_index":38,"text":{"about.html":{}},"title":{}}],["ctype",{"_index":608,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["cur",{"_index":128,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_2":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/387.html":{},"coding/leetcode/387.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["cur1",{"_index":300,"text":{"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/28.html":{},"coding/leetcode/28.html#_2":{}},"title":{}}],["cur2",{"_index":301,"text":{"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/28.html":{},"coding/leetcode/28.html#_2":{}},"title":{}}],["cur3",{"_index":388,"text":{"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/28.html":{},"coding/leetcode/28.html#_2":{}},"title":{}}],["curmin",{"_index":322,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["currentv",{"_index":228,"text":{"coding/leetcode/122.html":{},"coding/leetcode/122.html#_2":{}},"title":{}}],["d",{"_index":254,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/13.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_5":{}},"title":{}}],["data",{"_index":326,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["def",{"_index":611,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["defin",{"_index":116,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_2":{}},"title":{}}],["definit",{"_index":144,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["deletenod",{"_index":403,"text":{"coding/leetcode/237.html":{},"coding/leetcode/237.html#_2":{}},"title":{}}],["delta",{"_index":712,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["depth",{"_index":442,"text":{"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{}},"title":{}}],["dest",{"_index":440,"text":{"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{}},"title":{}}],["dict",{"_index":652,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["differ",{"_index":661,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["digit",{"_index":568,"text":{"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{}},"title":{}}],["digitss",{"_index":569,"text":{"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{}},"title":{}}],["dir",{"_index":10,"text":{"index.html":{},"index.html#commands":{}},"title":{}}],["doc",{"_index":18,"text":{"index.html":{},"index.html#commands":{},"index.html#project-layout":{}},"title":{}}],["document",{"_index":5,"text":{"index.html":{},"index.html#commands":{},"index.html#project-layout":{},"index.html#welcome-to-mkdocs":{}},"title":{}}],["dog\",\"racecar\",\"car",{"_index":295,"text":{"coding/leetcode/14.html":{},"coding/leetcode/14.html#_1":{}},"title":{}}],["doubl",{"_index":544,"text":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#_2":{}},"title":{}}],["dp",{"_index":375,"text":{"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{}},"title":{}}],["dp1",{"_index":213,"text":{"coding/leetcode/120.html":{},"coding/leetcode/120.html#_2":{}},"title":{}}],["dp_j(t)}{\\mathrm",{"_index":746,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["dt}=0",{"_index":752,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["dt}=\\lambda_{j",{"_index":747,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["e",{"_index":659,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{}},"title":{}}],["e_k",{"_index":686,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_5":{}},"title":{}}],["end",{"_index":618,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["end{align",{"_index":670,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{},"math/queue-theory/chapter-12.html#_6":{},"math/queue-theory/chapter-12.html#_9":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["erlang",{"_index":676,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{},"math/queue-theory/chapter-12.html#_4":{},"math/queue-theory/chapter-12.html#_5":{}},"title":{}}],["except",{"_index":632,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["execut",{"_index":657,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["exit",{"_index":26,"text":{"index.html":{},"index.html#commands":{}},"title":{}}],["extend",{"_index":639,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["f(0",{"_index":549,"text":{"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{}},"title":{}}],["f(1",{"_index":550,"text":{"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{}},"title":{}}],["f(2",{"_index":551,"text":{"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{}},"title":{}}],["f(3",{"_index":552,"text":{"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{}},"title":{}}],["f(4",{"_index":553,"text":{"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{}},"title":{}}],["f(i",{"_index":370,"text":{"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{}},"title":{}}],["f(n",{"_index":548,"text":{"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{}},"title":{}}],["f(t",{"_index":664,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{}},"title":{}}],["f_{\\xi_i}(t",{"_index":673,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{}},"title":{}}],["failur",{"_index":634,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["fals",{"_index":156,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/125.html":{},"coding/leetcode/125.html#_1":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_1":{},"coding/leetcode/217.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_1":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_1":{},"coding/leetcode/242.html#_2":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_1":{},"coding/leetcode/9.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_1":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["fcf",{"_index":681,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_4":{}},"title":{}}],["fib",{"_index":559,"text":{"coding/leetcode/509.html":{},"coding/leetcode/509.html#_3":{},"coding/leetcode/509.html#_4":{}},"title":{}}],["fib_cach",{"_index":556,"text":{"coding/leetcode/509.html":{},"coding/leetcode/509.html#_3":{}},"title":{}}],["file",{"_index":30,"text":{"index.html":{},"index.html#project-layout":{}},"title":{}}],["fill",{"_index":201,"text":{"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{}},"title":{}}],["final",{"_index":617,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["find",{"_index":81,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_2":{}},"title":{}}],["firstuniqchar",{"_index":518,"text":{"coding/leetcode/387.html":{},"coding/leetcode/387.html#_2":{}},"title":{}}],["fisher",{"_index":498,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["fl",{"_index":294,"text":{"coding/leetcode/14.html":{},"coding/leetcode/14.html#_1":{}},"title":{}}],["flag",{"_index":123,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_2":{}},"title":{}}],["flower\",\"flow\",\"flight",{"_index":293,"text":{"coding/leetcode/14.html":{},"coding/leetcode/14.html#_1":{}},"title":{}}],["frac{(",{"_index":856,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{(\\rho_0",{"_index":853,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{1}{1+\\sum_{n=1}^\\infti",{"_index":782,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mm1":{}},"title":{}}],["frac{1}{\\sum_{i=0}^{",{"_index":797,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\frac{t(",{"_index":868,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\lambda",{"_index":762,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["frac{\\lambda(\\lambda",{"_index":678,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{}},"title":{}}],["frac{\\lambda_0(\\mu_1+\\lambda_1)}{\\mu_1\\mu_2}p_0",{"_index":764,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["frac{\\lambda_0\\lambda_1\\cdots\\lambda_{j",{"_index":770,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["frac{\\lambda_0\\lambda_1}{\\mu_1\\mu_3}p_0=\\frac{\\lambda_0\\lambda_1\\lambda_2}{\\mu_1\\mu_2\\mu_3}p_0",{"_index":768,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["frac{\\lambda_0}{\\mu_2}p_0=\\frac{\\lambda_0\\lambda_1}{\\mu_1\\mu_2}p_0",{"_index":765,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["frac{\\lambda_1}{\\mu_3}p_1=\\frac{\\lambda_0\\lambda_1(\\mu_2+\\lambda_2)}{\\mu_1\\mu_2\\mu_3}p_0",{"_index":767,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["frac{\\lambda_{j",{"_index":756,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["frac{\\mathrm",{"_index":745,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["frac{\\rho^i_0}{s!s^{i",{"_index":818,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\rho^s_0p_0}{(",{"_index":820,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\rho^s_0p_0}{s!}\\sum_{i=0}^\\infti",{"_index":830,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\rho^s_0p_0}{s!}\\sum_{i=1}^\\infti",{"_index":832,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\rho^{s+1}_0p_0}{(",{"_index":836,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\rho_0",{"_index":850,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\rho_0^i}{(i",{"_index":842,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\rho_0^i}{i!}p_0=\\frac{\\rho_0^i}{i!\\left(t+\\frac{\\rho_0^s}{(",{"_index":810,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\rho_0^i}{s!s^{i",{"_index":799,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\rho_0^i}{s^i",{"_index":801,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\rho_0^sp_0}{(",{"_index":845,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\rho_0^{s+1}(",{"_index":871,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\rho_0^{s+1}p_0}{(",{"_index":847,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\rho_0^{s+1}}{(",{"_index":852,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\sum_{i=0}^",{"_index":848,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\sum_{i=0}^\\infti",{"_index":860,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\sum_{i=1}^",{"_index":862,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{i\\rho_0^i}{s^i",{"_index":831,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{p_j(t+\\delta",{"_index":738,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["frac{t(",{"_index":874,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["free",{"_index":115,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{}},"title":{}}],["full",{"_index":4,"text":{"index.html":{},"index.html#welcome-to-mkdocs":{}},"title":{}}],["fullcach",{"_index":558,"text":{"coding/leetcode/509.html":{},"coding/leetcode/509.html#_3":{}},"title":{}}],["func",{"_index":646,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["funcarg",{"_index":651,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["function",{"_index":615,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["functup",{"_index":653,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["g",{"_index":687,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_5":{}},"title":{}}],["gener",{"_index":189,"text":{"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{}},"title":{}}],["geq",{"_index":815,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["get_id",{"_index":619,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["getmin",{"_index":311,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{}},"title":{}}],["getnod",{"_index":399,"text":{"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{}},"title":{}}],["getresult",{"_index":645,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["getrow",{"_index":202,"text":{"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{}},"title":{}}],["guess",{"_index":36,"text":{"about.html":{}},"title":{}}],["h",{"_index":22,"text":{"index.html":{},"index.html#commands":{}},"title":{}}],["h\",\"a\",\"n\",\"n\",\"a\",\"h",{"_index":448,"text":{"coding/leetcode/344.html":{},"coding/leetcode/344.html#_1":{}},"title":{}}],["h\",\"e\",\"l\",\"l\",\"o",{"_index":446,"text":{"coding/leetcode/344.html":{},"coding/leetcode/344.html#_1":{}},"title":{}}],["hasattr",{"_index":622,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["hashmap",{"_index":133,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/387.html":{},"coding/leetcode/387.html#_2":{}},"title":{}}],["hashmap1",{"_index":412,"text":{"coding/leetcode/242.html":{},"coding/leetcode/242.html#_2":{}},"title":{}}],["hashmap2",{"_index":413,"text":{"coding/leetcode/242.html":{},"coding/leetcode/242.html#_2":{}},"title":{}}],["haystack",{"_index":421,"text":{"coding/leetcode/28.html":{},"coding/leetcode/28.html#_1":{},"coding/leetcode/28.html#_2":{}},"title":{}}],["head",{"_index":249,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#_1":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{}},"title":{}}],["hello",{"_index":423,"text":{"coding/leetcode/28.html":{},"coding/leetcode/28.html#_1":{}},"title":{}}],["help",{"_index":24,"text":{"index.html":{},"index.html#commands":{}},"title":{}}],["here",{"_index":37,"text":{"about.html":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["home",{"_index":0,"text":{},"title":{"index.html":{}}}],["homepag",{"_index":32,"text":{"index.html":{},"index.html#project-layout":{}},"title":{}}],["https://www.geeksforgeeks.org/python",{"_index":660,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["i+1",{"_index":722,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["i=0",{"_index":789,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["i=1",{"_index":793,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["i\\leq",{"_index":812,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["ic",{"_index":279,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["id",{"_index":620,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["ii",{"_index":64,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/119.html":{},"coding/leetcode/122.html":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/350.html":{}},"title":{"coding/leetcode/119.html":{},"coding/leetcode/119.html#119-ii":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#122-ii":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#350-ii":{}}}],["iii",{"_index":272,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["iiii",{"_index":264,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["im",{"_index":280,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["imag",{"_index":35,"text":{"index.html":{},"index.html#project-layout":{}},"title":{}}],["import",{"_index":606,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["increment",{"_index":385,"text":{"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{}},"title":{}}],["index.md",{"_index":31,"text":{"index.html":{},"index.html#project-layout":{}},"title":{}}],["indexof",{"_index":428,"text":{"coding/leetcode/28.html":{},"coding/leetcode/28.html#_1":{}},"title":{}}],["infti",{"_index":688,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_5":{},"math/queue-theory/chapter-12.html#_9":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["infty}p(n(t",{"_index":696,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{}},"title":{}}],["infty}p_j(t",{"_index":749,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["initi",{"_index":325,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["insert",{"_index":78,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["instanti",{"_index":335,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["int",{"_index":94,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{},"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_2":{},"coding/leetcode/121.html":{},"coding/leetcode/121.html#_2":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_2":{},"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/136.html":{},"coding/leetcode/136.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_2":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_2":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_2":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{},"coding/leetcode/26.html#_2":{},"coding/leetcode/28.html":{},"coding/leetcode/28.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/344.html":{},"coding/leetcode/344.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_1":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/387.html":{},"coding/leetcode/387.html#_2":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_2":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_3":{},"coding/leetcode/509.html#_4":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_2":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#_2":{},"coding/leetcode/779.html":{},"coding/leetcode/779.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_2":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["int_max",{"_index":586,"text":{"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{},"coding/leetcode/8.html#_2":{}},"title":{}}],["int_min",{"_index":587,"text":{"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{},"coding/leetcode/8.html#_2":{}},"title":{}}],["intersect",{"_index":461,"text":{"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{}},"title":{}}],["ip_i+\\sum_{i=s+1}^\\infti",{"_index":839,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["ip_i}{\\lambda",{"_index":861,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["isanagram",{"_index":411,"text":{"coding/leetcode/242.html":{},"coding/leetcode/242.html#_2":{}},"title":{}}],["ismirror",{"_index":153,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{}},"title":{}}],["ispalindrom",{"_index":247,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_2":{}},"title":{}}],["issam",{"_index":243,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{}},"title":{}}],["issymmetr",{"_index":157,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{}},"title":{}}],["istext",{"_index":239,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{}},"title":{}}],["isvalidbst",{"_index":604,"text":{"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["isvalidsudoku",{"_index":476,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{}},"title":{}}],["item",{"_index":625,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["iv",{"_index":265,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["ix",{"_index":266,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["j",{"_index":132,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_2":{},"coding/leetcode/121.html":{},"coding/leetcode/121.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["j)=\\lambda_j\\delta",{"_index":716,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["java",{"_index":427,"text":{"coding/leetcode/28.html":{},"coding/leetcode/28.html#_1":{}},"title":{}}],["join",{"_index":637,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["k",{"_index":195,"text":{"coding/leetcode/119.html":{},"coding/leetcode/119.html#_1":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/779.html":{},"coding/leetcode/779.html#_1":{},"coding/leetcode/779.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{},"math/queue-theory/chapter-12.html#_4":{},"math/queue-theory/chapter-12.html#_5":{}},"title":{"coding/leetcode/779.html":{},"coding/leetcode/779.html#779-k":{}}}],["k)=\\left",{"_index":677,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{}},"title":{}}],["k\\leq33",{"_index":196,"text":{"coding/leetcode/119.html":{},"coding/leetcode/119.html#_1":{}},"title":{}}],["kendal",{"_index":684,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_5":{}},"title":{}}],["kill",{"_index":642,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["killablethread",{"_index":638,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["kthgrammar",{"_index":583,"text":{"coding/leetcode/779.html":{},"coding/leetcode/779.html#_2":{}},"title":{}}],["kwarg",{"_index":649,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["l",{"_index":252,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/13.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["l1",{"_index":390,"text":{"coding/leetcode/21.html":{},"coding/leetcode/21.html#_2":{}},"title":{}}],["l2",{"_index":391,"text":{"coding/leetcode/21.html":{},"coding/leetcode/21.html#_2":{}},"title":{}}],["l_q",{"_index":702,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{}},"title":{}}],["l_q&=\\sum_{i=",{"_index":826,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["l_q&=\\sum_{i=0}^",{"_index":838,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["l_q=0",{"_index":824,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["lambda",{"_index":672,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{},"math/queue-theory/chapter-12.html#_6":{},"math/queue-theory/chapter-12.html#_9":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["lambda)=\\left",{"_index":674,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{}},"title":{}}],["lambda_",{"_index":701,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{}},"title":{}}],["lambda_0=\\lambda_1=\\cdots=\\lambda_n=\\lambda",{"_index":779,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mm1":{}},"title":{}}],["lambda_0\\delta",{"_index":724,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["lambda_i",{"_index":786,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["lambda_j+\\mu_j)\\delta",{"_index":720,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["lambda_j\\delta",{"_index":733,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["lambda_n",{"_index":709,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["lambda_{j",{"_index":729,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["layout",{"_index":27,"text":{"index.html":{}},"title":{"index.html#project-layout":{}}}],["lcf",{"_index":682,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_4":{}},"title":{}}],["leetcod",{"_index":40,"text":{"coding/index.html":{},"coding/index.html#_1":{},"coding/leetcode.html":{},"coding/leetcode/387.html":{},"coding/leetcode/387.html#_1":{}},"title":{"coding/leetcode.html#leetcode":{}}}],["leetcode/atoi",{"_index":45,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{}},"title":{}}],["left",{"_index":150,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["left(\\frac{\\mu_j+\\lambda_j}{\\mu{j+1}}\\right)p_j",{"_index":755,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["left(\\frac{\\rho_0^i}{(i",{"_index":863,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["left(\\frac{\\rho_0}{s}\\right)^i\\frac{s}{",{"_index":833,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["left(i\\frac{\\rho_0^i}{s!s^{i",{"_index":867,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["leftbranch",{"_index":172,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{}},"title":{}}],["leftbranchs",{"_index":178,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{}},"title":{}}],["leftcolumns",{"_index":179,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{}},"title":{}}],["leftsiz",{"_index":173,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{}},"title":{}}],["len",{"_index":229,"text":{"coding/leetcode/122.html":{},"coding/leetcode/122.html#_2":{},"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{}},"title":{}}],["len1",{"_index":429,"text":{"coding/leetcode/28.html":{},"coding/leetcode/28.html#_2":{}},"title":{}}],["len2",{"_index":430,"text":{"coding/leetcode/28.html":{},"coding/leetcode/28.html#_2":{}},"title":{}}],["lencach",{"_index":557,"text":{"coding/leetcode/509.html":{},"coding/leetcode/509.html#_3":{}},"title":{}}],["length",{"_index":363,"text":{"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{}},"title":{}}],["leq",{"_index":482,"text":{"coding/leetcode/38.html":{},"coding/leetcode/38.html#_1":{}},"title":{}}],["levelord",{"_index":177,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{}},"title":{}}],["lim_{\\delta",{"_index":737,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["lim_{t\\rightarrow",{"_index":748,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["lim_{t\\rightarrow\\infti",{"_index":751,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["link",{"_index":358,"text":{"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_2":{}},"title":{}}],["list",{"_index":359,"text":{"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["listnod",{"_index":360,"text":{"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#_2":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["live",{"_index":16,"text":{"index.html":{},"index.html#commands":{}},"title":{}}],["ll",{"_index":424,"text":{"coding/leetcode/28.html":{},"coding/leetcode/28.html#_1":{}},"title":{}}],["long",{"_index":572,"text":{"coding/leetcode/7.html":{},"coding/leetcode/7.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_2":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_2":{}},"title":{}}],["longestcommonprefix",{"_index":302,"text":{"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{}},"title":{}}],["loveleetcod",{"_index":517,"text":{"coding/leetcode/387.html":{},"coding/leetcode/387.html#_1":{}},"title":{}}],["lviii",{"_index":273,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["m",{"_index":255,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_1":{},"coding/leetcode/88.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_5":{}},"title":{}}],["m/m/",{"_index":699,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{},"math/queue-theory/chapter-12.html#_8":{},"math/queue-theory/chapter-12.html#markov":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{"math/queue-theory/chapter-12.html#mms":{}}}],["m/m/1",{"_index":778,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mm1":{}},"title":{"math/queue-theory/chapter-12.html#mm1":{}}}],["malloc",{"_index":111,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_3":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["man",{"_index":230,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_1":{}},"title":{}}],["map",{"_index":382,"text":{"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{}},"title":{}}],["mapsiz",{"_index":127,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{}},"title":{}}],["markdown",{"_index":33,"text":{"index.html":{},"index.html#project-layout":{}},"title":{}}],["markov",{"_index":704,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_7":{},"math/queue-theory/chapter-12.html#markov":{}},"title":{"math/queue-theory/chapter-12.html#markov":{}}}],["mathemat",{"_index":285,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["mathit{fcf",{"_index":689,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_5":{}},"title":{}}],["matrix",{"_index":519,"text":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/48.html#_2":{}},"title":{}}],["matrixcols",{"_index":532,"text":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#_2":{}},"title":{}}],["matrixs",{"_index":531,"text":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#_2":{}},"title":{}}],["max",{"_index":137,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/121.html":{},"coding/leetcode/121.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_2":{}},"title":{}}],["max(a",{"_index":117,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{}},"title":{}}],["max(x",{"_index":168,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_2":{}},"title":{}}],["max\\left\\{f(i",{"_index":371,"text":{"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{}},"title":{}}],["max\\{i",{"_index":791,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["maxprofit",{"_index":220,"text":{"coding/leetcode/121.html":{},"coding/leetcode/121.html#_2":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_2":{}},"title":{}}],["mcmxciv",{"_index":275,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["memcpi",{"_index":176,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_2":{}},"title":{}}],["memset",{"_index":134,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_3":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#_2":{}},"title":{}}],["merg",{"_index":171,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_2":{}},"title":{}}],["mergetwolist",{"_index":389,"text":{"coding/leetcode/21.html":{},"coding/leetcode/21.html#_2":{}},"title":{}}],["messag",{"_index":25,"text":{"index.html":{},"index.html#commands":{}},"title":{}}],["method",{"_index":643,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["min",{"_index":136,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["min(a",{"_index":119,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{}},"title":{}}],["min(x",{"_index":208,"text":{"coding/leetcode/120.html":{},"coding/leetcode/120.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{}},"title":{}}],["minimumtot",{"_index":209,"text":{"coding/leetcode/120.html":{},"coding/leetcode/120.html#_2":{}},"title":{}}],["minstack",{"_index":316,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["minstack\",\"push\",\"push\",\"push\",\"getmin\",\"pop\",\"top\",\"getmin",{"_index":312,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{}},"title":{}}],["minstack.getmin",{"_index":319,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{}},"title":{}}],["minstack.pop",{"_index":320,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{}},"title":{}}],["minstack.push",{"_index":317,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{}},"title":{}}],["minstack.push(0",{"_index":318,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{}},"title":{}}],["minstack.top",{"_index":321,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{}},"title":{}}],["minstackcr",{"_index":328,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["minstackfre",{"_index":334,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["minstackfree(obj",{"_index":343,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["minstackgetmin",{"_index":333,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["minstackgetmin(obj",{"_index":342,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["minstackpop",{"_index":331,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["minstackpop(obj",{"_index":338,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["minstackpush",{"_index":329,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["minstackpush(obj",{"_index":337,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["minstacktop",{"_index":332,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["minstacktop(obj",{"_index":340,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["mkdoc",{"_index":2,"text":{"index.html":{},"index.html#commands":{}},"title":{"index.html#welcome-to-mkdocs":{}}}],["mkdocs.org",{"_index":7,"text":{"index.html":{},"index.html#welcome-to-mkdocs":{}},"title":{}}],["mkdocs.yml",{"_index":28,"text":{"index.html":{},"index.html#project-layout":{}},"title":{}}],["mu",{"_index":700,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{}},"title":{}}],["mu_1=\\cdots=\\mu_n=\\mu",{"_index":780,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mm1":{}},"title":{}}],["mu_1\\delta",{"_index":726,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["mu_i",{"_index":787,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["mu_j+\\lambda_j)p_j(t",{"_index":743,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["mu_j+\\lambda_j)p_j(t)=0",{"_index":753,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["mu_j\\delta",{"_index":718,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["mu_n",{"_index":708,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["myatoi",{"_index":595,"text":{"coding/leetcode/8.html":{},"coding/leetcode/8.html#_2":{}},"title":{}}],["mypow",{"_index":545,"text":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#_2":{}},"title":{}}],["n",{"_index":59,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_1":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_1":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_1":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_1":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{},"coding/leetcode/50.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{},"coding/leetcode/509.html#_3":{},"coding/leetcode/509.html#_4":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#_1":{},"coding/leetcode/70.html#_2":{},"coding/leetcode/779.html":{},"coding/leetcode/779.html#_1":{},"coding/leetcode/779.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_1":{},"coding/leetcode/88.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{},"math/queue-theory/chapter-12.html#_9":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{"coding/leetcode/19.html":{},"coding/leetcode/19.html#19-n":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#50-powx-n":{}}}],["n(l",{"_index":690,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{}},"title":{}}],["n(t",{"_index":715,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["n(t)=j",{"_index":719,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["n+1",{"_index":296,"text":{"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["n>",{"_index":825,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["n>0",{"_index":711,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["n\\geq",{"_index":710,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["n\\leq",{"_index":823,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["n\\leq30",{"_index":555,"text":{"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{}},"title":{}}],["n_q(l_q",{"_index":691,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{}},"title":{}}],["nagaram",{"_index":408,"text":{"coding/leetcode/242.html":{},"coding/leetcode/242.html#_1":{}},"title":{}}],["name",{"_index":11,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{},"index.html":{},"index.html#commands":{}},"title":{}}],["needl",{"_index":422,"text":{"coding/leetcode/28.html":{},"coding/leetcode/28.html#_1":{},"coding/leetcode/28.html#_2":{}},"title":{}}],["new",{"_index":9,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_1":{},"index.html":{},"index.html#commands":{}},"title":{}}],["newretcols",{"_index":193,"text":{"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{}},"title":{}}],["next",{"_index":361,"text":{"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#_2":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_4":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["node",{"_index":147,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#_1":{},"coding/leetcode/237.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["none",{"_index":656,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["note",{"_index":108,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{}},"title":{}}],["null",{"_index":138,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_1":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_3":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["null,null,null,nul",{"_index":314,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{}},"title":{}}],["num",{"_index":99,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_1":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/136.html":{},"coding/leetcode/136.html#_2":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_2":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{},"coding/leetcode/26.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_1":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["numrow",{"_index":183,"text":{"coding/leetcode/118.html":{},"coding/leetcode/118.html#_1":{},"coding/leetcode/118.html#_2":{}},"title":{}}],["nums.length",{"_index":368,"text":{"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{}},"title":{}}],["nums1",{"_index":452,"text":{"coding/leetcode/350.html":{},"coding/leetcode/350.html#_1":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_1":{},"coding/leetcode/88.html#_2":{}},"title":{}}],["nums1siz",{"_index":462,"text":{"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_2":{}},"title":{}}],["nums2",{"_index":454,"text":{"coding/leetcode/350.html":{},"coding/leetcode/350.html#_1":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_1":{},"coding/leetcode/88.html#_2":{}},"title":{}}],["nums2siz",{"_index":463,"text":{"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_2":{}},"title":{}}],["nums[0",{"_index":104,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_1":{}},"title":{}}],["nums[1",{"_index":105,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_1":{}},"title":{}}],["nums[i",{"_index":369,"text":{"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{}},"title":{}}],["numssiz",{"_index":125,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/136.html":{},"coding/leetcode/136.html#_2":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_2":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["o\",\"l\",\"l\",\"e\",\"h",{"_index":447,"text":{"coding/leetcode/344.html":{},"coding/leetcode/344.html#_1":{}},"title":{}}],["o(1",{"_index":352,"text":{"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_1":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{},"coding/leetcode/344.html":{},"coding/leetcode/344.html#_1":{}},"title":{}}],["o(k",{"_index":197,"text":{"coding/leetcode/119.html":{},"coding/leetcode/119.html#_1":{}},"title":{}}],["o(n",{"_index":207,"text":{"coding/leetcode/120.html":{},"coding/leetcode/120.html#_1":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_1":{}},"title":{}}],["obj",{"_index":330,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["oldretcols",{"_index":191,"text":{"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{}},"title":{}}],["origin",{"_index":502,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_2":{}},"title":{}}],["p",{"_index":237,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{}},"title":{}}],["p(n(t+\\delta",{"_index":713,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["p(n=n)=\\rho^n(1",{"_index":785,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mm1":{}},"title":{}}],["p_0",{"_index":760,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{},"math/queue-theory/chapter-12.html#mm1":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["p_0&=\\frac{1}{1+\\sum_{n=1}^\\infti",{"_index":795,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["p_0(t+\\delta",{"_index":723,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["p_0=\\frac{1}{1+\\sum_{n=1}^\\infti",{"_index":775,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{},"math/queue-theory/chapter-12.html#mm1":{}},"title":{}}],["p_1",{"_index":758,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["p_1=\\frac{\\lambda_0}{\\mu_1}p_0",{"_index":759,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["p_2&=\\left(\\frac{\\mu_1+\\lambda_1}{\\mu_2}\\right)p_1",{"_index":761,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["p_3&=\\left(\\frac{\\mu_2+\\lambda_2}{\\mu_3}\\right)p_2",{"_index":766,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["p_d",{"_index":698,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{}},"title":{}}],["p_d=\\sum_{i=s}^\\infti",{"_index":816,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["p_i",{"_index":807,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["p_i=\\frac{\\lambda_0\\lambda_1\\cdots\\lambda_{i",{"_index":808,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["p_j",{"_index":750,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["p_j(t)}{\\delta",{"_index":739,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["p_j(t+\\delta",{"_index":728,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["p_n",{"_index":694,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["p_n=p(n=n)=\\lim_{t\\rightarrow",{"_index":695,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{}},"title":{}}],["p_{j+1",{"_index":754,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["page",{"_index":34,"text":{"index.html":{},"index.html#project-layout":{}},"title":{}}],["panama",{"_index":233,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_1":{}},"title":{}}],["param_1",{"_index":512,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["param_2",{"_index":514,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["param_3",{"_index":339,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["param_4",{"_index":341,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["plan",{"_index":231,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_1":{}},"title":{}}],["pluson",{"_index":567,"text":{"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{}},"title":{}}],["poisson",{"_index":671,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{},"math/queue-theory/chapter-12.html#_5":{},"math/queue-theory/chapter-12.html#_7":{}},"title":{"math/queue-theory/chapter-12.html#poisson":{}}}],["pop",{"_index":308,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{}},"title":{}}],["positions1",{"_index":480,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{}},"title":{}}],["positions2",{"_index":481,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{}},"title":{}}],["pow(x",{"_index":58,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{}},"title":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#50-powx-n":{}}}],["price",{"_index":221,"text":{"coding/leetcode/121.html":{},"coding/leetcode/121.html#_2":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_2":{}},"title":{}}],["prices.length",{"_index":225,"text":{"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{}},"title":{}}],["prices[i",{"_index":227,"text":{"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{}},"title":{}}],["pricess",{"_index":222,"text":{"coding/leetcode/121.html":{},"coding/leetcode/121.html#_2":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_2":{}},"title":{}}],["print",{"_index":23,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{},"index.html":{},"index.html#commands":{}},"title":{}}],["print(nums[i",{"_index":417,"text":{"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{}},"title":{}}],["privat",{"_index":91,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{}},"title":{}}],["prod_{i=0}^{n}\\frac{\\lambda_{i",{"_index":776,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["prod_{i=0}^{n}\\frac{\\lambda}{\\max\\{i",{"_index":796,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["prod_{i=0}^{n}\\frac{\\lambda}{\\mu",{"_index":781,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mm1":{}},"title":{}}],["profit",{"_index":223,"text":{"coding/leetcode/121.html":{},"coding/leetcode/121.html#_2":{}},"title":{}}],["project",{"_index":13,"text":{"index.html":{},"index.html#commands":{}},"title":{"index.html#project-layout":{}}}],["protect",{"_index":97,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{}},"title":{}}],["provid",{"_index":641,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["ps",{"_index":683,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_4":{}},"title":{}}],["public",{"_index":98,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{}},"title":{}}],["push",{"_index":307,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{}},"title":{}}],["push(x",{"_index":310,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{}},"title":{}}],["py_object",{"_index":630,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["python",{"_index":41,"text":{"coding/index.html":{},"coding/index.html#_1":{},"coding/python.html":{},"coding/python.html#_1":{},"coding/python/killable-thread.html":{}},"title":{"coding/python.html#python":{},"coding/python/killable-thread.html#python":{}}}],["pythonapi",{"_index":629,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["pythreadstate_setasyncexc",{"_index":605,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["qquad",{"_index":788,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["qsort",{"_index":397,"text":{"coding/leetcode/217.html":{},"coding/leetcode/217.html#_2":{}},"title":{}}],["race",{"_index":234,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_1":{}},"title":{}}],["rais",{"_index":633,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["raise_except",{"_index":626,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["rand",{"_index":509,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["random",{"_index":504,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["rank",{"_index":92,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{}},"title":{}}],["rat",{"_index":409,"text":{"coding/leetcode/242.html":{},"coding/leetcode/242.html#_1":{}},"title":{}}],["re",{"_index":628,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["rec",{"_index":192,"text":{"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["rec_siz",{"_index":305,"text":{"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{}},"title":{}}],["recur",{"_index":199,"text":{"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{}},"title":{}}],["refer",{"_index":107,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_1":{},"coding/leetcode/101.html":{},"coding/leetcode/101.html#_1":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_1":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_1":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_1":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_1":{},"coding/leetcode/121.html":{},"coding/leetcode/121.html#_1":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{},"coding/leetcode/125.html":{},"coding/leetcode/125.html#_1":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/136.html":{},"coding/leetcode/136.html#_1":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_1":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_1":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_1":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_1":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_1":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_1":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_1":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#_1":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_1":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_1":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{},"coding/leetcode/28.html":{},"coding/leetcode/28.html#_1":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{},"coding/leetcode/344.html":{},"coding/leetcode/344.html#_1":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_1":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_1":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_1":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/387.html":{},"coding/leetcode/387.html#_1":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_1":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_1":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#_1":{},"coding/leetcode/779.html":{},"coding/leetcode/779.html#_1":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_1":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_1":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_1":{}},"title":{}}],["reload",{"_index":17,"text":{"index.html":{},"index.html#commands":{}},"title":{}}],["remov",{"_index":79,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_2":{}},"title":{}}],["removedupl",{"_index":418,"text":{"coding/leetcode/26.html":{},"coding/leetcode/26.html#_2":{}},"title":{}}],["removeduplicates(num",{"_index":416,"text":{"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{}},"title":{}}],["removenthfromend",{"_index":362,"text":{"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{}},"title":{}}],["reset",{"_index":501,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["respect",{"_index":621,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["result",{"_index":655,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["ret",{"_index":129,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/136.html":{},"coding/leetcode/136.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_4":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["retcur",{"_index":489,"text":{"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{}},"title":{}}],["retsiz",{"_index":190,"text":{"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["return",{"_index":109,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_2":{},"coding/leetcode/121.html":{},"coding/leetcode/121.html#_2":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_2":{},"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/136.html":{},"coding/leetcode/136.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_2":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_2":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_2":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#_2":{},"coding/leetcode/28.html":{},"coding/leetcode/28.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/344.html":{},"coding/leetcode/344.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/387.html":{},"coding/leetcode/387.html#_2":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_3":{},"coding/leetcode/509.html#_4":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_2":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#_2":{},"coding/leetcode/779.html":{},"coding/leetcode/779.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_2":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{},"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["returncol",{"_index":182,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{}},"title":{}}],["returncolumns",{"_index":165,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{}},"title":{}}],["returns",{"_index":126,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{}},"title":{}}],["revers",{"_index":353,"text":{"coding/leetcode/189.html":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_2":{}},"title":{}}],["reverselist",{"_index":387,"text":{"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{}},"title":{}}],["reversestr",{"_index":449,"text":{"coding/leetcode/344.html":{},"coding/leetcode/344.html#_2":{}},"title":{}}],["rho",{"_index":697,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{},"math/queue-theory/chapter-12.html#mm1":{}},"title":{}}],["rho)}\\frac{\\rho_0/s}{1",{"_index":834,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho^n}=1",{"_index":784,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mm1":{}},"title":{}}],["rho^n}=\\frac{1}{\\sum_{n=0}^\\infti",{"_index":783,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mm1":{}},"title":{}}],["rho_0",{"_index":804,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0)^2",{"_index":837,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0)t+\\rho_0^",{"_index":822,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0)}=\\frac{\\rho^s_0}{(",{"_index":821,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0)}\\right",{"_index":811,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0)}\\right)}\\right",{"_index":865,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0)}{(",{"_index":857,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0)}{\\lambda(t(",{"_index":876,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0)}{t(",{"_index":869,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0+1)/(",{"_index":872,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0/",{"_index":835,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0=\\frac{\\lambda}{\\mu",{"_index":794,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0^",{"_index":870,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0^s}}{\\lambda",{"_index":873,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0^{s+1}(",{"_index":875,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0^{s+1}}{(",{"_index":855,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["right",{"_index":151,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rightarrow",{"_index":744,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["rightbranch",{"_index":174,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{}},"title":{}}],["rightbranchs",{"_index":180,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{}},"title":{}}],["rightcolumns",{"_index":181,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{}},"title":{}}],["rightsiz",{"_index":175,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{}},"title":{}}],["rob",{"_index":374,"text":{"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{}},"title":{}}],["romantoint",{"_index":286,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_2":{}},"title":{}}],["root",{"_index":158,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["root1",{"_index":154,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{}},"title":{}}],["root2",{"_index":155,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{}},"title":{}}],["rotat",{"_index":355,"text":{"coding/leetcode/189.html":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_2":{}},"title":{}}],["rowindex",{"_index":200,"text":{"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{}},"title":{}}],["run",{"_index":614,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["s",{"_index":241,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_1":{},"coding/leetcode/242.html#_2":{},"coding/leetcode/344.html":{},"coding/leetcode/344.html#_2":{},"coding/leetcode/387.html":{},"coding/leetcode/387.html#_1":{},"coding/leetcode/387.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["s)\\frac{\\rho^i_0}{s!s^{i",{"_index":829,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["s)p_i",{"_index":828,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["s1",{"_index":244,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{}},"title":{}}],["s2",{"_index":245,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{}},"title":{}}],["s\\}\\mu",{"_index":792,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["search",{"_index":82,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_2":{}},"title":{}}],["seed",{"_index":507,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["self",{"_index":613,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["serv",{"_index":14,"text":{"index.html":{},"index.html#commands":{}},"title":{}}],["server",{"_index":19,"text":{"index.html":{},"index.html#commands":{}},"title":{}}],["set",{"_index":77,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_2":{}},"title":{}}],["shuffl",{"_index":505,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["singlenumb",{"_index":292,"text":{"coding/leetcode/136.html":{},"coding/leetcode/136.html#_2":{}},"title":{}}],["singli",{"_index":357,"text":{"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_2":{}},"title":{}}],["site",{"_index":21,"text":{"index.html":{},"index.html#commands":{}},"title":{}}],["size",{"_index":76,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["sizeof",{"_index":130,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_3":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["sleep",{"_index":636,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["solut",{"_index":494,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_1":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["solution(num",{"_index":495,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_1":{}},"title":{}}],["solution.reset",{"_index":497,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_1":{}},"title":{}}],["solution.shuffl",{"_index":496,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_1":{}},"title":{}}],["solutioncr",{"_index":500,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["solutioncreate(num",{"_index":511,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["solutionfre",{"_index":510,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["solutionfree(obj",{"_index":516,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["solutionreset",{"_index":503,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["solutionreset(obj",{"_index":513,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["solutionshuffl",{"_index":506,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["solutionshuffle(obj",{"_index":515,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["sort",{"_index":83,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_2":{}},"title":{}}],["sp_i",{"_index":840,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["sq",{"_index":384,"text":{"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{}},"title":{}}],["sqrt",{"_index":379,"text":{"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{}},"title":{}}],["srand",{"_index":508,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["src",{"_index":441,"text":{"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{}},"title":{}}],["ssize",{"_index":450,"text":{"coding/leetcode/344.html":{},"coding/leetcode/344.html#_2":{}},"title":{}}],["start",{"_index":15,"text":{"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{},"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{},"index.html":{},"index.html#commands":{}},"title":{}}],["step",{"_index":419,"text":{"coding/leetcode/26.html":{},"coding/leetcode/26.html#_2":{}},"title":{}}],["stop",{"_index":644,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["str",{"_index":303,"text":{"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_2":{}},"title":{}}],["str1",{"_index":298,"text":{"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{}},"title":{}}],["str2",{"_index":299,"text":{"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{}},"title":{}}],["strcpi",{"_index":491,"text":{"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{}},"title":{}}],["strlen",{"_index":248,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/28.html":{},"coding/leetcode/28.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{}},"title":{}}],["strssize",{"_index":304,"text":{"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{}},"title":{}}],["strstr",{"_index":420,"text":{"coding/leetcode/28.html":{},"coding/leetcode/28.html#_1":{},"coding/leetcode/28.html#_2":{}},"title":{"coding/leetcode/28.html":{},"coding/leetcode/28.html#28-strstr":{}}}],["strstr(leetcod",{"_index":53,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{}},"title":{}}],["struct",{"_index":120,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#_2":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["structur",{"_index":327,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["sub",{"_index":439,"text":{"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{}},"title":{}}],["success",{"_index":431,"text":{"coding/leetcode/28.html":{},"coding/leetcode/28.html#_2":{}},"title":{}}],["such",{"_index":336,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["sum_{i=0}^",{"_index":841,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["sum_{i=0}^{",{"_index":805,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["sum_{i=s+1}^\\infti",{"_index":866,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["sum_{i=s}^\\infti",{"_index":817,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["super",{"_index":650,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["swappair",{"_index":404,"text":{"coding/leetcode/24.html":{},"coding/leetcode/24.html#_2":{}},"title":{}}],["switch",{"_index":287,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_2":{}},"title":{}}],["systemexit",{"_index":631,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["s}\\left(t+\\frac{\\rho_0^s}{(",{"_index":814,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["s}}p_0",{"_index":819,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["s}}p_0=\\frac{\\rho_0^i}{s!s^{i",{"_index":813,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["t",{"_index":88,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_1":{},"coding/leetcode/242.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["t(w",{"_index":692,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{}},"title":{}}],["t)=j",{"_index":717,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["t)=j+1",{"_index":714,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["t)^{k",{"_index":679,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{}},"title":{}}],["t)p_0(t",{"_index":725,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["t)p_j(t)+\\mu_{j+1}\\delta",{"_index":734,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["t+1)(",{"_index":854,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["t+1}{t+\\frac{\\rho_0^s}{(",{"_index":851,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["t+\\delta",{"_index":721,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["t1",{"_index":635,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["t<t_0",{"_index":706,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#markov":{}},"title":{}}],["t=\\alpha",{"_index":667,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{}},"title":{}}],["t\\geq",{"_index":675,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{}},"title":{}}],["t\\not",{"_index":668,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{}},"title":{}}],["t\\rightarrow",{"_index":736,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["t_0",{"_index":705,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#markov":{}},"title":{}}],["t_q(w_q",{"_index":693,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{}},"title":{}}],["tail",{"_index":250,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{}},"title":{}}],["target",{"_index":100,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_1":{},"coding/leetcode/1.html#_2":{},"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["targetv",{"_index":131,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{}},"title":{}}],["temp",{"_index":354,"text":{"coding/leetcode/189.html":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/344.html":{},"coding/leetcode/344.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_2":{}},"title":{}}],["temp1",{"_index":405,"text":{"coding/leetcode/24.html":{},"coding/leetcode/24.html#_2":{}},"title":{}}],["temp2",{"_index":406,"text":{"coding/leetcode/24.html":{},"coding/leetcode/24.html#_2":{}},"title":{}}],["temparray",{"_index":194,"text":{"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{}},"title":{}}],["templat",{"_index":86,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{}},"title":{}}],["temptre",{"_index":444,"text":{"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{}},"title":{}}],["testcas",{"_index":573,"text":{"coding/leetcode/7.html":{},"coding/leetcode/7.html#_2":{}},"title":{}}],["thread",{"_index":607,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["thread_id",{"_index":627,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["thread_with_except",{"_index":610,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["threading.thread",{"_index":640,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["time",{"_index":609,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["times1",{"_index":459,"text":{"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{}},"title":{}}],["times2",{"_index":460,"text":{"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{}},"title":{}}],["tmp",{"_index":560,"text":{"coding/leetcode/509.html":{},"coding/leetcode/509.html#_4":{}},"title":{}}],["tolist",{"_index":603,"text":{"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["top",{"_index":309,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["tostr",{"_index":487,"text":{"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{}},"title":{}}],["tp_1(t",{"_index":727,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["tp_{j",{"_index":731,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["tp_{j+1}(t",{"_index":735,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["transform",{"_index":600,"text":{"coding/leetcode/9.html":{},"coding/leetcode/9.html#_2":{}},"title":{}}],["travers",{"_index":80,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_2":{}},"title":{}}],["tree",{"_index":146,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["treenod",{"_index":148,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["treenode2",{"_index":438,"text":{"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{}},"title":{}}],["tri",{"_index":616,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["triangl",{"_index":210,"text":{"coding/leetcode/120.html":{},"coding/leetcode/120.html#_2":{}},"title":{}}],["trianglecols",{"_index":212,"text":{"coding/leetcode/120.html":{},"coding/leetcode/120.html#_2":{}},"title":{}}],["triangles",{"_index":211,"text":{"coding/leetcode/120.html":{},"coding/leetcode/120.html#_2":{}},"title":{}}],["true",{"_index":159,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/125.html":{},"coding/leetcode/125.html#_1":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_1":{},"coding/leetcode/217.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_1":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_1":{},"coding/leetcode/242.html#_2":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_1":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_1":{},"coding/leetcode/98.html#_2":{},"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["tupl",{"_index":654,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["twosum",{"_index":124,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{}},"title":{}}],["typedef",{"_index":323,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["typenam",{"_index":87,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{}},"title":{}}],["t}=\\lambda_{j",{"_index":740,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["unicod",{"_index":410,"text":{"coding/leetcode/242.html":{},"coding/leetcode/242.html#_1":{}},"title":{}}],["unit",{"_index":584,"text":{"coding/leetcode/779.html":{},"coding/leetcode/779.html#_2":{}},"title":{}}],["unsign",{"_index":381,"text":{"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["v",{"_index":251,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/13.html#_2":{}},"title":{}}],["val",{"_index":149,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#_2":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["valu",{"_index":122,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/121.html":{},"coding/leetcode/121.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["vdot",{"_index":769,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["vector",{"_index":90,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{}},"title":{}}],["visit",{"_index":6,"text":{"index.html":{},"index.html#welcome-to-mkdocs":{}},"title":{}}],["void",{"_index":198,"text":{"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_2":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#_2":{},"coding/leetcode/344.html":{},"coding/leetcode/344.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_2":{}},"title":{}}],["w",{"_index":592,"text":{"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{}},"title":{}}],["w&=\\frac{l}{\\lambda",{"_index":859,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["w=\\frac{l}{\\lambda",{"_index":858,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["w_q",{"_index":703,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{}},"title":{}}],["way",{"_index":662,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["welcom",{"_index":1,"text":{"index.html":{}},"title":{"index.html#welcome-to-mkdocs":{}}}],["word",{"_index":590,"text":{"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{}},"title":{}}],["x",{"_index":170,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_2":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{},"coding/leetcode/50.html#_2":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_2":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_5":{}},"title":{}}],["x/y/z/a/b/c",{"_index":685,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_5":{}},"title":{}}],["xc",{"_index":278,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["xii",{"_index":260,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["xlix",{"_index":282,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["xx",{"_index":263,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["xxvii",{"_index":262,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["y",{"_index":169,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_5":{}},"title":{}}],["yate",{"_index":499,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["z",{"_index":242,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_1":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_5":{}},"title":{}}]],"pipeline":["stemmer"],"version":"2.3.8"}}