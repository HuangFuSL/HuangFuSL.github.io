{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":true,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Customization \u00b6 \u70b9\u51fb\u4e0b\u9762\u7684\u989c\u8272\u6309\u94ae\u53ef\u4ee5\u5207\u6362\u4e3b\u9898\u989c\u8272\uff1a Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; localStorage.setItem(\"data-md-color-primary\",this.dataset.mdColorPrimary); }) }) \u70b9\u51fb\u4e0b\u9762\u7684\u6309\u94ae\u53ef\u4ee5\u5207\u6362\u5f3a\u8c03\u989c\u8272\uff1a Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; localStorage.setItem(\"data-md-color-accent\",this.dataset.mdColorAccent); }) }) document.getElementsByClassName('md-nav__title')[1].click() Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"index.html#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"index.html#customization","text":"\u70b9\u51fb\u4e0b\u9762\u7684\u989c\u8272\u6309\u94ae\u53ef\u4ee5\u5207\u6362\u4e3b\u9898\u989c\u8272\uff1a Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange Brown Grey Blue Grey White var buttons = document.querySelectorAll(\"button[data-md-color-primary]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorPrimary = this.dataset.mdColorPrimary; localStorage.setItem(\"data-md-color-primary\",this.dataset.mdColorPrimary); }) }) \u70b9\u51fb\u4e0b\u9762\u7684\u6309\u94ae\u53ef\u4ee5\u5207\u6362\u5f3a\u8c03\u989c\u8272\uff1a Red Pink Purple Deep Purple Indigo Blue Light Blue Cyan Teal Green Light Green Lime Yellow Amber Orange Deep Orange var buttons = document.querySelectorAll(\"button[data-md-color-accent]\"); Array.prototype.forEach.call(buttons, function(button) { button.addEventListener(\"click\", function() { document.body.dataset.mdColorAccent = this.dataset.mdColorAccent; localStorage.setItem(\"data-md-color-accent\",this.dataset.mdColorAccent); }) }) document.getElementsByClassName('md-nav__title')[1].click()","title":"Customization"},{"location":"index.html#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"index.html#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about.html","text":"Guess who is here? Credit: \u300a\u6628\u665a\u300b by \u8001\u9f20\u4ec0\u4e48\u90fd\u77e5\u9053","title":"About"},{"location":"weixin-2020.html","text":"\u4e00\u4e9b\u5f88\u559c\u6b22\u7684\u63a8\u9001 \u00b6 \u300a\u6628\u665a\u300b by \u8001\u9f20\u4ec0\u4e48\u90fd\u77e5\u9053 \u300a\u6740\u6b7b\u65e0\u804a\u7684\u540c\u65f6\uff0c\u4f60\u4e5f\u5728\u6740\u6b7b\u81ea\u5df1\u300b by \u4eba\u7269 \u300a\u75db\u82e6\u7684\u4e00\u767e\u5f20\u5e95\u7247\u300b by \u4eba\u7269 \u300a\u603b\u4e0d\u80fd\u4e27\u6c14\u592a\u4e45\u5427\u3002\u300b by \u6982\u7387\u8bba \u300a\u6211\u4eec\u628a\u8fd9\u573a\u521d\u96ea\u505a\u6210\u4e86\u7535\u5f71\u6d77\u62a5\u300b by \u6e05\u534e\u5927\u5b66\u6e05\u65b0\u65f6\u62a5","title":2020},{"location":"weixin-2020.html#_1","text":"\u300a\u6628\u665a\u300b by \u8001\u9f20\u4ec0\u4e48\u90fd\u77e5\u9053 \u300a\u6740\u6b7b\u65e0\u804a\u7684\u540c\u65f6\uff0c\u4f60\u4e5f\u5728\u6740\u6b7b\u81ea\u5df1\u300b by \u4eba\u7269 \u300a\u75db\u82e6\u7684\u4e00\u767e\u5f20\u5e95\u7247\u300b by \u4eba\u7269 \u300a\u603b\u4e0d\u80fd\u4e27\u6c14\u592a\u4e45\u5427\u3002\u300b by \u6982\u7387\u8bba \u300a\u6211\u4eec\u628a\u8fd9\u573a\u521d\u96ea\u505a\u6210\u4e86\u7535\u5f71\u6d77\u62a5\u300b by \u6e05\u534e\u5927\u5b66\u6e05\u65b0\u65f6\u62a5","title":"\u4e00\u4e9b\u5f88\u559c\u6b22\u7684\u63a8\u9001"},{"location":"coding/index.html","text":"\u5199\u4ee3\u7801 \u00b6 \u6536\u96c6\u4ece\u7f51\u4e0a\u627e\u6765\u7684\u5404\u79cd\u5404\u6837\u7684\u73a9\u610f Leetcode Python \u6570\u636e\u7ed3\u6784 \u6df1\u5ea6\u5b66\u4e60 \u673a\u5668\u5b66\u4e60 \u7cfb\u7edf\u914d\u7f6e","title":"\u76ee\u5f55"},{"location":"coding/index.html#_1","text":"\u6536\u96c6\u4ece\u7f51\u4e0a\u627e\u6765\u7684\u5404\u79cd\u5404\u6837\u7684\u73a9\u610f Leetcode Python \u6570\u636e\u7ed3\u6784 \u6df1\u5ea6\u5b66\u4e60 \u673a\u5668\u5b66\u4e60 \u7cfb\u7edf\u914d\u7f6e","title":"\u5199\u4ee3\u7801"},{"location":"coding/dsa.html","text":"\u6570\u636e\u7ed3\u6784 \u00b6 \u4ee5\u4e0b\u6574\u7406\u4e86\u9093\u4fca\u8f89\u8001\u5e08\u300a\u6570\u636e\u7ed3\u6784\u300b\u8bfe\u7a0b\u7684\u5185\u5bb9\uff1a \u5411\u91cf\u4e0e\u5217\u8868 \u6808\u4e0e\u961f\u5217 \u4e8c\u53c9\u6811 \u56fe \u4e8c\u53c9\u641c\u7d22\u6811 \u9ad8\u7ea7\u641c\u7d22\u6811 \u6563\u5217\u4e0e\u8bcd\u5178 \u4f18\u5148\u7ea7\u961f\u5217 \u5b57\u7b26\u4e32 \u6392\u5e8f\u7b97\u6cd5","title":"\u76ee\u5f55"},{"location":"coding/dsa.html#_1","text":"\u4ee5\u4e0b\u6574\u7406\u4e86\u9093\u4fca\u8f89\u8001\u5e08\u300a\u6570\u636e\u7ed3\u6784\u300b\u8bfe\u7a0b\u7684\u5185\u5bb9\uff1a \u5411\u91cf\u4e0e\u5217\u8868 \u6808\u4e0e\u961f\u5217 \u4e8c\u53c9\u6811 \u56fe \u4e8c\u53c9\u641c\u7d22\u6811 \u9ad8\u7ea7\u641c\u7d22\u6811 \u6563\u5217\u4e0e\u8bcd\u5178 \u4f18\u5148\u7ea7\u961f\u5217 \u5b57\u7b26\u4e32 \u6392\u5e8f\u7b97\u6cd5","title":"\u6570\u636e\u7ed3\u6784"},{"location":"coding/leetcode.html","text":"Leetcode \u9898\u89e3 \u00b6 1. \u4e24\u6570\u4e4b\u548c 7. \u6574\u6570\u53cd\u8f6c 8. \u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 (leetcode/atoi) 9. \u56de\u6587\u6570 13. \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570 14. \u6700\u957f\u516c\u5171\u524d\u7f00 21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868 24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9 26. \u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879 28. \u5b9e\u73b0 strStr(leetcode/) 36. \u6709\u6548\u7684\u6570\u72ec 38. \u5916\u89c2\u6570\u5217 48. \u65cb\u8f6c\u56fe\u50cf 50. Pow(x, n) 66. \u52a0\u4e00 70. \u722c\u697c\u68af 118. \u6768\u8f89\u4e09\u89d2 119. \u6768\u8f89\u4e09\u89d2 II 122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II 125. \u9a8c\u8bc1\u56de\u6587\u4e32 136. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 189. \u65cb\u8f6c\u6570\u7ec4 206. \u53cd\u8f6c\u94fe\u8868 217. \u5b58\u5728\u91cd\u590d\u5143\u7d20 237. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9 242. \u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd 315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570 344. \u53cd\u8f6c\u5b57\u7b26\u4e32 387. \u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u552f\u4e00\u5b57\u7b26","title":"\u76ee\u5f55"},{"location":"coding/leetcode.html#leetcode","text":"1. \u4e24\u6570\u4e4b\u548c 7. \u6574\u6570\u53cd\u8f6c 8. \u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 (leetcode/atoi) 9. \u56de\u6587\u6570 13. \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570 14. \u6700\u957f\u516c\u5171\u524d\u7f00 21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868 24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9 26. \u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879 28. \u5b9e\u73b0 strStr(leetcode/) 36. \u6709\u6548\u7684\u6570\u72ec 38. \u5916\u89c2\u6570\u5217 48. \u65cb\u8f6c\u56fe\u50cf 50. Pow(x, n) 66. \u52a0\u4e00 70. \u722c\u697c\u68af 118. \u6768\u8f89\u4e09\u89d2 119. \u6768\u8f89\u4e09\u89d2 II 122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II 125. \u9a8c\u8bc1\u56de\u6587\u4e32 136. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 189. \u65cb\u8f6c\u6570\u7ec4 206. \u53cd\u8f6c\u94fe\u8868 217. \u5b58\u5728\u91cd\u590d\u5143\u7d20 237. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9 242. \u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd 315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570 344. \u53cd\u8f6c\u5b57\u7b26\u4e32 387. \u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u552f\u4e00\u5b57\u7b26","title":"Leetcode \u9898\u89e3"},{"location":"coding/python.html","text":"Python \u00b6 \u591a\u7ebf\u7a0b/\u591a\u8fdb\u7a0b\u76f8\u5173 \u00b6 \u5173\u95edPython\u7ebf\u7a0b","title":"\u76ee\u5f55"},{"location":"coding/python.html#python","text":"","title":"Python"},{"location":"coding/python.html#_1","text":"\u5173\u95edPython\u7ebf\u7a0b","title":"\u591a\u7ebf\u7a0b/\u591a\u8fdb\u7a0b\u76f8\u5173"},{"location":"coding/dsa/vector-and-list.html","text":"\u5411\u91cf\u4e0e\u5217\u8868 \u00b6 \u4e3b\u8981\u7684\u57fa\u7840\u7ebf\u6027\u6570\u636e\u7ed3\u6784\u662f\u5411\u91cf\u4e0e\u5217\u8868\u3002\u5728\u672c\u5408\u96c6\u4e2d\uff0c\u5411\u91cf\u6307\u4ee5\u6570\u7ec4\u65b9\u5f0f\u7ec4\u5408\u5e76\u5c01\u88c5\u901a\u7528\u62bd\u8c61\u63a5\u53e3\u7684\u6570\u636e\u7c7b\u578b\uff1b\u5217\u8868\u6307\u4ee5\u94fe\u8868\u65b9\u5f0f\u7ec4\u5408\u5e76\u5c01\u88c5\u901a\u7528\u62bd\u8c61\u63a5\u53e3\u7684\u6570\u636e\u7c7b\u578b\u3002 \u8f83\u4e3a\u9ad8\u7ea7\u7684\u6570\u636e\u7ed3\u6784\u2014\u2014\u6808\u4e0e\u961f\u5217\u5efa\u7acb\u5728\u5411\u91cf\u4e0e\u5217\u8868\u7684\u57fa\u7840\u4e0a\u3002\u63d0\u4f9b\u4e86\u4e00\u4e9b\u53d7\u9650\u5236\u7684\u64cd\u4f5c\u63a5\u53e3\u3002 \u7ebf\u6027\u6570\u636e\u7ed3\u6784 \u00b6 \u5bf9\u4e8e\u57fa\u7840\u7684\u7ebf\u6027\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u4e0b\u7684\u63a5\u53e3\u53ef\u4ee5\u89c6\u4e3a\u901a\u7528\uff1a \u64cd\u4f5c \u63cf\u8ff0 \u901a\u7528\u6027 size() \u83b7\u53d6\u5bf9\u8c61\u4e2d\u5143\u7d20\u7684\u6570\u76ee get() \u83b7\u53d6\u5bf9\u8c61\u4e2d\u67d0\u4e2a\u5143\u7d20\u7684\u503c set() \u4fee\u6539\u5bf9\u8c61\u4e2d\u67d0\u4e2a\u5143\u7d20\u7684\u503c insert() \u5411\u5bf9\u8c61\u4e2d\u7684\u67d0\u4e2a\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20 remove() \u79fb\u9664\u5bf9\u8c61\u4e2d\u7684\u67d0\u4e2a\u5143\u7d20 traverse() \u904d\u5386\u5bf9\u8c61\u4e2d\u7684\u6240\u6709\u5143\u7d20\uff0c\u5e76\u6267\u884c\u67d0\u64cd\u4f5c find() \u5728\u5bf9\u8c61\u4e2d\u67e5\u627e\u67d0\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e search() \u5728\u6709\u5e8f\u7684\u7ed3\u6784\u4e2d\u67e5\u627e\u67d0\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e \u8981\u6c42\u6709\u5e8f sort() \u6392\u5e8f\u5bf9\u8c61\u4e2d\u7684\u5143\u7d20 \u8981\u6c42\u91cd\u8f7d < \u548c > \u8fd0\u7b97\u7b26 \u5411\u91cf \u00b6 C/C++\u8bed\u8a00\u4e2d\u7684\u6570\u7ec4\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u89c6\u4e3a\u7b80\u5355\u7684\u5411\u91cf\u3002\u4f46\u6570\u7ec4\u4e0d\u63d0\u4f9b\u63d2\u5165\u3001\u5220\u9664\u7b49\u5177\u4f53\u7684\u64cd\u4f5c\u63a5\u53e3\uff0c\u9700\u8981\u5728\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u624b\u52a8\u5b9e\u73b0\u3002\u5c06\u6570\u7ec4\u5c01\u88c5\u6210\u7c7b\u53ef\u4ee5\u63d0\u4f9b\u66f4\u591a\u7684\u64cd\u4f5c\u63a5\u53e3\uff0c\u5e76\u4e14\u4fdd\u8bc1\u6570\u636e\u88ab\u5408\u6cd5\u5730\u8bbf\u95ee\u53ca\u4fee\u6539\u3002 \u5411\u91cf\u662f\u6570\u7ec4\u7684\u62bd\u8c61\u6cdb\u5316\u3001\u652f\u6301\u6240\u6709\u6570\u7ec4\u7684\u529f\u80fd\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7c7b\u578b\u7684\u5143\u7d20\u63d0\u4f9b\u4e86\u7edf\u4e00\u7684\u64cd\u4f5c\u63a5\u53e3\u3002 C++\u63d0\u4f9b\u4e86\u6a21\u677f\u7c7b\u7684\u529f\u80fd\u7528\u6765\u9488\u5bf9\u4e0d\u540c\u7c7b\u578b\u7684\u5143\u7d20\u63d0\u4f9b\u76f8\u540c\u7684\u529f\u80fd\u3002\u5bf9\u4e8e\u67d0\u4e2aADT\uff08\u4ee5\u5411\u91cf\u4e3a\u4f8b\uff09\uff0c\u5176\u5c5e\u6027\u548c\u63a5\u53e3\u7684\u7ec4\u7ec7\u65b9\u5f0f\u53ef\u9075\u5faa\u5982\u4e0b\u89c4\u5219\uff1a template < typename T > class Vector { //\u5411\u91cf\u6a21\u677f\u7c7b private : Rank _size ; int _capacity ; T * _elem ; //\u89c4\u6a21\u3001\u5bb9\u91cf\u3001\u6570\u636e\u533a protected : /* ... \u5185\u90e8\u51fd\u6570 */ public : /* ... \u6784\u9020\u51fd\u6570 */ /* ... \u6790\u6784\u51fd\u6570 */ /* ... \u53ea\u8bfb\u63a5\u53e3 */ /* ... \u53ef\u5199\u63a5\u53e3 */ /* ... \u904d\u5386\u63a5\u53e3 */ };","title":"\u5411\u91cf\u4e0e\u5217\u8868"},{"location":"coding/dsa/vector-and-list.html#_1","text":"\u4e3b\u8981\u7684\u57fa\u7840\u7ebf\u6027\u6570\u636e\u7ed3\u6784\u662f\u5411\u91cf\u4e0e\u5217\u8868\u3002\u5728\u672c\u5408\u96c6\u4e2d\uff0c\u5411\u91cf\u6307\u4ee5\u6570\u7ec4\u65b9\u5f0f\u7ec4\u5408\u5e76\u5c01\u88c5\u901a\u7528\u62bd\u8c61\u63a5\u53e3\u7684\u6570\u636e\u7c7b\u578b\uff1b\u5217\u8868\u6307\u4ee5\u94fe\u8868\u65b9\u5f0f\u7ec4\u5408\u5e76\u5c01\u88c5\u901a\u7528\u62bd\u8c61\u63a5\u53e3\u7684\u6570\u636e\u7c7b\u578b\u3002 \u8f83\u4e3a\u9ad8\u7ea7\u7684\u6570\u636e\u7ed3\u6784\u2014\u2014\u6808\u4e0e\u961f\u5217\u5efa\u7acb\u5728\u5411\u91cf\u4e0e\u5217\u8868\u7684\u57fa\u7840\u4e0a\u3002\u63d0\u4f9b\u4e86\u4e00\u4e9b\u53d7\u9650\u5236\u7684\u64cd\u4f5c\u63a5\u53e3\u3002","title":"\u5411\u91cf\u4e0e\u5217\u8868"},{"location":"coding/dsa/vector-and-list.html#_2","text":"\u5bf9\u4e8e\u57fa\u7840\u7684\u7ebf\u6027\u6570\u636e\u7ed3\u6784\uff0c\u4ee5\u4e0b\u7684\u63a5\u53e3\u53ef\u4ee5\u89c6\u4e3a\u901a\u7528\uff1a \u64cd\u4f5c \u63cf\u8ff0 \u901a\u7528\u6027 size() \u83b7\u53d6\u5bf9\u8c61\u4e2d\u5143\u7d20\u7684\u6570\u76ee get() \u83b7\u53d6\u5bf9\u8c61\u4e2d\u67d0\u4e2a\u5143\u7d20\u7684\u503c set() \u4fee\u6539\u5bf9\u8c61\u4e2d\u67d0\u4e2a\u5143\u7d20\u7684\u503c insert() \u5411\u5bf9\u8c61\u4e2d\u7684\u67d0\u4e2a\u4f4d\u7f6e\u63d2\u5165\u5143\u7d20 remove() \u79fb\u9664\u5bf9\u8c61\u4e2d\u7684\u67d0\u4e2a\u5143\u7d20 traverse() \u904d\u5386\u5bf9\u8c61\u4e2d\u7684\u6240\u6709\u5143\u7d20\uff0c\u5e76\u6267\u884c\u67d0\u64cd\u4f5c find() \u5728\u5bf9\u8c61\u4e2d\u67e5\u627e\u67d0\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e search() \u5728\u6709\u5e8f\u7684\u7ed3\u6784\u4e2d\u67e5\u627e\u67d0\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e \u8981\u6c42\u6709\u5e8f sort() \u6392\u5e8f\u5bf9\u8c61\u4e2d\u7684\u5143\u7d20 \u8981\u6c42\u91cd\u8f7d < \u548c > \u8fd0\u7b97\u7b26","title":"\u7ebf\u6027\u6570\u636e\u7ed3\u6784"},{"location":"coding/dsa/vector-and-list.html#_3","text":"C/C++\u8bed\u8a00\u4e2d\u7684\u6570\u7ec4\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u89c6\u4e3a\u7b80\u5355\u7684\u5411\u91cf\u3002\u4f46\u6570\u7ec4\u4e0d\u63d0\u4f9b\u63d2\u5165\u3001\u5220\u9664\u7b49\u5177\u4f53\u7684\u64cd\u4f5c\u63a5\u53e3\uff0c\u9700\u8981\u5728\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u624b\u52a8\u5b9e\u73b0\u3002\u5c06\u6570\u7ec4\u5c01\u88c5\u6210\u7c7b\u53ef\u4ee5\u63d0\u4f9b\u66f4\u591a\u7684\u64cd\u4f5c\u63a5\u53e3\uff0c\u5e76\u4e14\u4fdd\u8bc1\u6570\u636e\u88ab\u5408\u6cd5\u5730\u8bbf\u95ee\u53ca\u4fee\u6539\u3002 \u5411\u91cf\u662f\u6570\u7ec4\u7684\u62bd\u8c61\u6cdb\u5316\u3001\u652f\u6301\u6240\u6709\u6570\u7ec4\u7684\u529f\u80fd\uff0c\u5bf9\u4e8e\u4e0d\u540c\u7c7b\u578b\u7684\u5143\u7d20\u63d0\u4f9b\u4e86\u7edf\u4e00\u7684\u64cd\u4f5c\u63a5\u53e3\u3002 C++\u63d0\u4f9b\u4e86\u6a21\u677f\u7c7b\u7684\u529f\u80fd\u7528\u6765\u9488\u5bf9\u4e0d\u540c\u7c7b\u578b\u7684\u5143\u7d20\u63d0\u4f9b\u76f8\u540c\u7684\u529f\u80fd\u3002\u5bf9\u4e8e\u67d0\u4e2aADT\uff08\u4ee5\u5411\u91cf\u4e3a\u4f8b\uff09\uff0c\u5176\u5c5e\u6027\u548c\u63a5\u53e3\u7684\u7ec4\u7ec7\u65b9\u5f0f\u53ef\u9075\u5faa\u5982\u4e0b\u89c4\u5219\uff1a template < typename T > class Vector { //\u5411\u91cf\u6a21\u677f\u7c7b private : Rank _size ; int _capacity ; T * _elem ; //\u89c4\u6a21\u3001\u5bb9\u91cf\u3001\u6570\u636e\u533a protected : /* ... \u5185\u90e8\u51fd\u6570 */ public : /* ... \u6784\u9020\u51fd\u6570 */ /* ... \u6790\u6784\u51fd\u6570 */ /* ... \u53ea\u8bfb\u63a5\u53e3 */ /* ... \u53ef\u5199\u63a5\u53e3 */ /* ... \u904d\u5386\u63a5\u53e3 */ };","title":"\u5411\u91cf"},{"location":"coding/leetcode/1.html","text":"1. \u4e24\u6570\u4e4b\u548c \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u76ee\u6807\u503c target \uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa\u548c\u4e3a\u76ee\u6807\u503c\u7684\u90a3 \u4e24\u4e2a \u6574\u6570\uff0c\u5e76\u8fd4\u56de\u4ed6\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u6570\u7ec4\u4e2d\u540c\u4e00\u4e2a\u5143\u7d20\u4e0d\u80fd\u4f7f\u7528\u4e24\u904d\u3002 \u793a\u4f8b: \u7ed9\u5b9a nums = [2, 7, 11, 15], target = 9 \u56e0\u4e3a nums[0] + nums[1] = 2 + 7 = 9 \u6240\u4ee5\u8fd4\u56de [0, 1] Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5c06\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u5b58\u50a8\u5728\u54c8\u5e0c\u8868\u4e2d\uff0c\u6bcf\u6b21\u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u76ee\u6807\u503c\u4e0e\u5f53\u524d\u503c\u4e4b\u5dee\u662f\u5426\u5728\u54c8\u5e0c\u8868\u4e2d\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Note: The returned array must be malloced, assume caller calls free(). */ #define MAX(a, b) (a > b ? a : b) #define MIN(a, b) (a < b ? a : b) struct cell { int value ; int flag ; }; int * twoSum ( int * nums , int numsSize , int target , int * returnSize ){ * returnSize = 2 ; int i = 0 , mapSize = numsSize * 2 , cur , * ret = malloc ( sizeof ( int ) * 2 ), targetval , j = 0 ; struct cell * hashMap = ( struct cell * ) memset ( malloc ( sizeof ( struct cell ) * mapSize ), 0 , sizeof ( struct cell ) * mapSize ); for ( i = 0 ; i < numsSize ; i ++ ) { cur = ( nums [ i ] > 0 ? nums [ i ] : - nums [ i ]) % mapSize ; while ( hashMap [ cur ]. flag != 0 && hashMap [ cur ]. value != nums [ i ]) { cur ++ ; cur = cur == mapSize ? 0 : cur ; } if ( hashMap [ cur ]. flag == 0 ) hashMap [ cur ]. value = nums [ i ]; hashMap [ cur ]. flag ++ ; } for ( i = 0 ; i < numsSize ; i ++ ) { targetval = target - nums [ i ]; cur = ( targetval > 0 ? targetval : - targetval ) % mapSize ; while ( hashMap [ cur ]. flag != 0 && hashMap [ cur ]. value != targetval ) { cur ++ ; cur = cur == mapSize ? 0 : cur ; } if ( hashMap [ cur ]. value == targetval ) { for ( j = 0 ; j < numsSize ; j ++ ) if ( nums [ j ] == targetval && j != i ) break ; if ( j != numsSize ) break ; } } ret [ 0 ] = MIN ( i , j ); ret [ 1 ] = MAX ( i , j ); if ( nums [ i ] + nums [ j ] == target ) return ret ; * returnSize = 0 ; return NULL ; }","title":"1. \u4e24\u6570\u4e4b\u548c"},{"location":"coding/leetcode/1.html#1","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"1. \u4e24\u6570\u4e4b\u548c"},{"location":"coding/leetcode/1.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u76ee\u6807\u503c target \uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa\u548c\u4e3a\u76ee\u6807\u503c\u7684\u90a3 \u4e24\u4e2a \u6574\u6570\uff0c\u5e76\u8fd4\u56de\u4ed6\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u6570\u7ec4\u4e2d\u540c\u4e00\u4e2a\u5143\u7d20\u4e0d\u80fd\u4f7f\u7528\u4e24\u904d\u3002 \u793a\u4f8b: \u7ed9\u5b9a nums = [2, 7, 11, 15], target = 9 \u56e0\u4e3a nums[0] + nums[1] = 2 + 7 = 9 \u6240\u4ee5\u8fd4\u56de [0, 1] Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/1.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5c06\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u5b58\u50a8\u5728\u54c8\u5e0c\u8868\u4e2d\uff0c\u6bcf\u6b21\u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u76ee\u6807\u503c\u4e0e\u5f53\u524d\u503c\u4e4b\u5dee\u662f\u5426\u5728\u54c8\u5e0c\u8868\u4e2d\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Note: The returned array must be malloced, assume caller calls free(). */ #define MAX(a, b) (a > b ? a : b) #define MIN(a, b) (a < b ? a : b) struct cell { int value ; int flag ; }; int * twoSum ( int * nums , int numsSize , int target , int * returnSize ){ * returnSize = 2 ; int i = 0 , mapSize = numsSize * 2 , cur , * ret = malloc ( sizeof ( int ) * 2 ), targetval , j = 0 ; struct cell * hashMap = ( struct cell * ) memset ( malloc ( sizeof ( struct cell ) * mapSize ), 0 , sizeof ( struct cell ) * mapSize ); for ( i = 0 ; i < numsSize ; i ++ ) { cur = ( nums [ i ] > 0 ? nums [ i ] : - nums [ i ]) % mapSize ; while ( hashMap [ cur ]. flag != 0 && hashMap [ cur ]. value != nums [ i ]) { cur ++ ; cur = cur == mapSize ? 0 : cur ; } if ( hashMap [ cur ]. flag == 0 ) hashMap [ cur ]. value = nums [ i ]; hashMap [ cur ]. flag ++ ; } for ( i = 0 ; i < numsSize ; i ++ ) { targetval = target - nums [ i ]; cur = ( targetval > 0 ? targetval : - targetval ) % mapSize ; while ( hashMap [ cur ]. flag != 0 && hashMap [ cur ]. value != targetval ) { cur ++ ; cur = cur == mapSize ? 0 : cur ; } if ( hashMap [ cur ]. value == targetval ) { for ( j = 0 ; j < numsSize ; j ++ ) if ( nums [ j ] == targetval && j != i ) break ; if ( j != numsSize ) break ; } } ret [ 0 ] = MIN ( i , j ); ret [ 1 ] = MAX ( i , j ); if ( nums [ i ] + nums [ j ] == target ) return ret ; * returnSize = 0 ; return NULL ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/101.html","text":"101. \u5bf9\u79f0\u4e8c\u53c9\u6811 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u68c0\u67e5\u5b83\u662f\u5426\u662f\u955c\u50cf\u5bf9\u79f0\u7684\u3002 \u4f8b\u5982\uff0c\u4e8c\u53c9\u6811 [1,2,2,3,4,4,3] \u662f\u5bf9\u79f0\u7684\u3002 1 / \\ 2 2 / \\ / \\ 3 4 4 3 \u4f46\u662f\u4e0b\u9762\u8fd9\u4e2a [1,2,2,null,3,null,3] \u5219\u4e0d\u662f\u955c\u50cf\u5bf9\u79f0\u7684: 1 / \\ 2 2 \\ \\ 3 3 \u8fdb\u9636\uff1a \u4f60\u53ef\u4ee5\u8fd0\u7528\u9012\u5f52\u548c\u8fed\u4ee3\u4e24\u79cd\u65b9\u6cd5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u9012\u5f52\u5224\u65ad\u4e24\u4e2a\u6839\u8282\u70b9\u662f\u5426\u6210\u955c\u50cf\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for a binary tree node. * struct TreeNode { * int val; * struct TreeNode *left; * struct TreeNode *right; * }; */ bool isMirrored ( struct TreeNode * root1 , struct TreeNode * root2 ) { if ( ! root1 || ! root2 ) return root1 == root2 ; if ( root1 -> val != root2 -> val ) return false ; return isMirrored ( root1 -> left , root2 -> right ) && isMirrored ( root2 -> left , root1 -> right ); } bool isSymmetric ( struct TreeNode * root ){ if ( root == NULL ) return true ; return isMirrored ( root -> left , root -> right ); }","title":"101. \u5bf9\u79f0\u4e8c\u53c9\u6811"},{"location":"coding/leetcode/101.html#101","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"101. \u5bf9\u79f0\u4e8c\u53c9\u6811"},{"location":"coding/leetcode/101.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u68c0\u67e5\u5b83\u662f\u5426\u662f\u955c\u50cf\u5bf9\u79f0\u7684\u3002 \u4f8b\u5982\uff0c\u4e8c\u53c9\u6811 [1,2,2,3,4,4,3] \u662f\u5bf9\u79f0\u7684\u3002 1 / \\ 2 2 / \\ / \\ 3 4 4 3 \u4f46\u662f\u4e0b\u9762\u8fd9\u4e2a [1,2,2,null,3,null,3] \u5219\u4e0d\u662f\u955c\u50cf\u5bf9\u79f0\u7684: 1 / \\ 2 2 \\ \\ 3 3 \u8fdb\u9636\uff1a \u4f60\u53ef\u4ee5\u8fd0\u7528\u9012\u5f52\u548c\u8fed\u4ee3\u4e24\u79cd\u65b9\u6cd5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/101.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u9012\u5f52\u5224\u65ad\u4e24\u4e2a\u6839\u8282\u70b9\u662f\u5426\u6210\u955c\u50cf\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for a binary tree node. * struct TreeNode { * int val; * struct TreeNode *left; * struct TreeNode *right; * }; */ bool isMirrored ( struct TreeNode * root1 , struct TreeNode * root2 ) { if ( ! root1 || ! root2 ) return root1 == root2 ; if ( root1 -> val != root2 -> val ) return false ; return isMirrored ( root1 -> left , root2 -> right ) && isMirrored ( root2 -> left , root1 -> right ); } bool isSymmetric ( struct TreeNode * root ){ if ( root == NULL ) return true ; return isMirrored ( root -> left , root -> right ); }","title":"\u9898\u89e3"},{"location":"coding/leetcode/102.html","text":"102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386 \u00b6 \u96be\u5ea6\uff1a \u4e2d\u7b49 \u9898\u76ee \u00b6 \u7ed9\u4f60\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8bf7\u4f60\u8fd4\u56de\u5176\u6309 \u5c42\u5e8f\u904d\u5386 \u5f97\u5230\u7684\u8282\u70b9\u503c\u3002 \uff08\u5373\u9010\u5c42\u5730\uff0c\u4ece\u5de6\u5230\u53f3\u8bbf\u95ee\u6240\u6709\u8282\u70b9\uff09\u3002 \u793a\u4f8b\uff1a \u4e8c\u53c9\u6811\uff1a [3,9,20,null,null,15,7] , 3 / \\ 9 20 / \\ 15 7 \u8fd4\u56de\u5176\u5c42\u6b21\u904d\u5386\u7ed3\u679c\uff1a [ [3], [9,20], [15,7] ] Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u7b2c\u4e00\u5c42\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u5373\u6839\u8282\u70b9\u7684\u503c\uff0c\u518d\u5c42\u5e8f\u904d\u5386\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\uff0c\u5408\u5e76\u540c\u5c42\u7684\u7ed3\u679c\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for a binary tree node. * struct TreeNode { * int val; * struct TreeNode *left; * struct TreeNode *right; * }; */ /** * Return an array of arrays of size *returnSize. * The sizes of the arrays are returned as *returnColumnSizes array. * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free(). */ #define MAX(x, y) (x > y ? x : y) int * merge ( int * leftBranch , int leftSize , int * rightBranch , int rightSize , int * returnSize ) { * returnSize = leftSize + rightSize ; int * ret = ( int * ) malloc ( sizeof ( int ) * ( leftSize + rightSize )); if ( leftSize != 0 ) { memcpy ( ret , leftBranch , sizeof ( int ) * leftSize ); free ( leftBranch ); } if ( rightSize != 0 ) { memcpy ( ret + leftSize , rightBranch , sizeof ( int ) * rightSize ); free ( rightBranch ); } return ret ; } int ** levelOrder ( struct TreeNode * root , int * returnSize , int ** returnColumnSizes ){ if ( root == NULL ) { * returnSize = 0 ; * returnColumnSizes = NULL ; return NULL ; } int leftBranchSize = 0 , * leftColumnSizes = NULL , ** leftBranch = levelOrder ( root -> left , & leftBranchSize , & leftColumnSizes ), rightBranchSize = 0 , * rightColumnSizes = NULL , ** rightBranch = levelOrder ( root -> right , & rightBranchSize , & rightColumnSizes ); * returnSize = 1 + MAX ( leftBranchSize , rightBranchSize ); int ** ret = ( int ** ) malloc ( sizeof ( int * ) * * returnSize ), * returnCols = ( int * ) malloc ( sizeof ( int ) * * returnSize ), i = 0 ; * returnColumnSizes = returnCols ; * returnCols = 1 ; * ret = malloc ( sizeof ( int )); ** ret = root -> val ; for ( i = 1 ; i < * returnSize ; i ++ ) { if ( i <= leftBranchSize && i <= rightBranchSize ) ret [ i ] = merge ( leftBranch [ i - 1 ], leftColumnSizes [ i - 1 ], rightBranch [ i - 1 ], rightColumnSizes [ i - 1 ], returnCols + i ); else if ( i <= leftBranchSize ) ret [ i ] = merge ( leftBranch [ i -1 ], leftColumnSizes [ i -1 ], NULL , 0 , returnCols + i ); else if ( i <= rightBranchSize ) ret [ i ] = merge ( NULL , 0 , rightBranch [ i -1 ], rightColumnSizes [ i -1 ], returnCols + i ); } free ( leftBranch ); free ( rightBranch ); free ( leftColumnSizes ); free ( rightColumnSizes ); return ret ; }","title":"102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386"},{"location":"coding/leetcode/102.html#102","text":"\u96be\u5ea6\uff1a \u4e2d\u7b49","title":"102. \u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386"},{"location":"coding/leetcode/102.html#_1","text":"\u7ed9\u4f60\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8bf7\u4f60\u8fd4\u56de\u5176\u6309 \u5c42\u5e8f\u904d\u5386 \u5f97\u5230\u7684\u8282\u70b9\u503c\u3002 \uff08\u5373\u9010\u5c42\u5730\uff0c\u4ece\u5de6\u5230\u53f3\u8bbf\u95ee\u6240\u6709\u8282\u70b9\uff09\u3002 \u793a\u4f8b\uff1a \u4e8c\u53c9\u6811\uff1a [3,9,20,null,null,15,7] , 3 / \\ 9 20 / \\ 15 7 \u8fd4\u56de\u5176\u5c42\u6b21\u904d\u5386\u7ed3\u679c\uff1a [ [3], [9,20], [15,7] ] Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/102.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u7b2c\u4e00\u5c42\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u5373\u6839\u8282\u70b9\u7684\u503c\uff0c\u518d\u5c42\u5e8f\u904d\u5386\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\uff0c\u5408\u5e76\u540c\u5c42\u7684\u7ed3\u679c\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for a binary tree node. * struct TreeNode { * int val; * struct TreeNode *left; * struct TreeNode *right; * }; */ /** * Return an array of arrays of size *returnSize. * The sizes of the arrays are returned as *returnColumnSizes array. * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free(). */ #define MAX(x, y) (x > y ? x : y) int * merge ( int * leftBranch , int leftSize , int * rightBranch , int rightSize , int * returnSize ) { * returnSize = leftSize + rightSize ; int * ret = ( int * ) malloc ( sizeof ( int ) * ( leftSize + rightSize )); if ( leftSize != 0 ) { memcpy ( ret , leftBranch , sizeof ( int ) * leftSize ); free ( leftBranch ); } if ( rightSize != 0 ) { memcpy ( ret + leftSize , rightBranch , sizeof ( int ) * rightSize ); free ( rightBranch ); } return ret ; } int ** levelOrder ( struct TreeNode * root , int * returnSize , int ** returnColumnSizes ){ if ( root == NULL ) { * returnSize = 0 ; * returnColumnSizes = NULL ; return NULL ; } int leftBranchSize = 0 , * leftColumnSizes = NULL , ** leftBranch = levelOrder ( root -> left , & leftBranchSize , & leftColumnSizes ), rightBranchSize = 0 , * rightColumnSizes = NULL , ** rightBranch = levelOrder ( root -> right , & rightBranchSize , & rightColumnSizes ); * returnSize = 1 + MAX ( leftBranchSize , rightBranchSize ); int ** ret = ( int ** ) malloc ( sizeof ( int * ) * * returnSize ), * returnCols = ( int * ) malloc ( sizeof ( int ) * * returnSize ), i = 0 ; * returnColumnSizes = returnCols ; * returnCols = 1 ; * ret = malloc ( sizeof ( int )); ** ret = root -> val ; for ( i = 1 ; i < * returnSize ; i ++ ) { if ( i <= leftBranchSize && i <= rightBranchSize ) ret [ i ] = merge ( leftBranch [ i - 1 ], leftColumnSizes [ i - 1 ], rightBranch [ i - 1 ], rightColumnSizes [ i - 1 ], returnCols + i ); else if ( i <= leftBranchSize ) ret [ i ] = merge ( leftBranch [ i -1 ], leftColumnSizes [ i -1 ], NULL , 0 , returnCols + i ); else if ( i <= rightBranchSize ) ret [ i ] = merge ( NULL , 0 , rightBranch [ i -1 ], rightColumnSizes [ i -1 ], returnCols + i ); } free ( leftBranch ); free ( rightBranch ); free ( leftColumnSizes ); free ( rightColumnSizes ); return ret ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/118.html","text":"118. \u6768\u8f89\u4e09\u89d2 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570 numRows \uff0c\u751f\u6210\u6768\u8f89\u4e09\u89d2\u7684\u524d numRows \u884c\u3002 \u5728\u6768\u8f89\u4e09\u89d2\u4e2d\uff0c\u6bcf\u4e2a\u6570\u662f\u5b83\u5de6\u4e0a\u65b9\u548c\u53f3\u4e0a\u65b9\u7684\u6570\u7684\u548c\u3002 \u793a\u4f8b\uff1a \u8f93\u5165: 5 \u8f93\u51fa: [ [1], [1,1], [1,2,1], [1,3,3,1], [1,4,6,4,1] ] Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u6839\u636e\u6768\u8f89\u4e09\u89d2\u7684\u5b9a\u4e49\uff0c\u901a\u8fc7\u9012\u5f52\u9010\u884c\u6784\u9020\u51fa\u6bcf\u4e00\u884c\u7684\u503c \u4ee3\u7801\u5982\u4e0b\uff1a /** * Return an array of arrays of size *returnSize. * The sizes of the arrays are returned as *returnColumnSizes array. * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free(). */ int ** generate ( int numRows , int * returnSize , int ** returnColumnSizes ) { * returnSize = numRows ; if ( numRows == 0 ) return NULL ; if ( numRows == 1 ) { * returnColumnSizes = ( int * ) malloc ( sizeof ( int )); ** returnColumnSizes = 1 ; int ** ret = ( int ** ) malloc ( sizeof ( int * )); * ret = ( int * ) malloc ( sizeof ( int )); ** ret = 1 ; return ret ; } int retSize = 0 , * oldRetColSizes = NULL , ** rec = generate ( numRows - 1 , & retSize , & oldRetColSizes ), i = 0 ; ** ret = ( int ** ) memcpy ( malloc ( sizeof ( int * ) * numRows ), rec , ( numRows - 1 ) * sizeof ( int * )); * newRetColSizes = memcpy (( int * ) malloc ( sizeof ( int ) * numRows ), oldRetColSizes , ( numRows - 1 ) * sizeof ( int )); * tempArray = ( int * ) malloc ( sizeof ( int ) * numRows ); free ( oldRetColSizes ); free ( rec ); newRetColSizes [ numRows - 1 ] = numRows ; for ( i = 1 ; i < numRows - 1 ; i ++ ) tempArray [ i ] = * ( ret [ numRows - 2 ] + i ) + * ( ret [ numRows - 2 ] + i - 1 ); tempArray [ 0 ] = 1 ; tempArray [ numRows - 1 ] = 1 ; ret [ numRows - 1 ] = tempArray ; * returnColumnSizes = newRetColSizes ; return ret ; }","title":"118. \u6768\u8f89\u4e09\u89d2"},{"location":"coding/leetcode/118.html#118","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"118. \u6768\u8f89\u4e09\u89d2"},{"location":"coding/leetcode/118.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570 numRows \uff0c\u751f\u6210\u6768\u8f89\u4e09\u89d2\u7684\u524d numRows \u884c\u3002 \u5728\u6768\u8f89\u4e09\u89d2\u4e2d\uff0c\u6bcf\u4e2a\u6570\u662f\u5b83\u5de6\u4e0a\u65b9\u548c\u53f3\u4e0a\u65b9\u7684\u6570\u7684\u548c\u3002 \u793a\u4f8b\uff1a \u8f93\u5165: 5 \u8f93\u51fa: [ [1], [1,1], [1,2,1], [1,3,3,1], [1,4,6,4,1] ] Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/118.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u6839\u636e\u6768\u8f89\u4e09\u89d2\u7684\u5b9a\u4e49\uff0c\u901a\u8fc7\u9012\u5f52\u9010\u884c\u6784\u9020\u51fa\u6bcf\u4e00\u884c\u7684\u503c \u4ee3\u7801\u5982\u4e0b\uff1a /** * Return an array of arrays of size *returnSize. * The sizes of the arrays are returned as *returnColumnSizes array. * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free(). */ int ** generate ( int numRows , int * returnSize , int ** returnColumnSizes ) { * returnSize = numRows ; if ( numRows == 0 ) return NULL ; if ( numRows == 1 ) { * returnColumnSizes = ( int * ) malloc ( sizeof ( int )); ** returnColumnSizes = 1 ; int ** ret = ( int ** ) malloc ( sizeof ( int * )); * ret = ( int * ) malloc ( sizeof ( int )); ** ret = 1 ; return ret ; } int retSize = 0 , * oldRetColSizes = NULL , ** rec = generate ( numRows - 1 , & retSize , & oldRetColSizes ), i = 0 ; ** ret = ( int ** ) memcpy ( malloc ( sizeof ( int * ) * numRows ), rec , ( numRows - 1 ) * sizeof ( int * )); * newRetColSizes = memcpy (( int * ) malloc ( sizeof ( int ) * numRows ), oldRetColSizes , ( numRows - 1 ) * sizeof ( int )); * tempArray = ( int * ) malloc ( sizeof ( int ) * numRows ); free ( oldRetColSizes ); free ( rec ); newRetColSizes [ numRows - 1 ] = numRows ; for ( i = 1 ; i < numRows - 1 ; i ++ ) tempArray [ i ] = * ( ret [ numRows - 2 ] + i ) + * ( ret [ numRows - 2 ] + i - 1 ); tempArray [ 0 ] = 1 ; tempArray [ numRows - 1 ] = 1 ; ret [ numRows - 1 ] = tempArray ; * returnColumnSizes = newRetColSizes ; return ret ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/119.html","text":"119. \u6768\u8f89\u4e09\u89d2 II \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u7d22\u5f15 k k \uff0c\u5176\u4e2d k\\leq33 k\\leq33 \uff0c\u8fd4\u56de\u6768\u8f89\u4e09\u89d2\u7684\u7b2c k k \u884c\u3002 \u5728\u6768\u8f89\u4e09\u89d2\u4e2d\uff0c\u6bcf\u4e2a\u6570\u662f\u5b83\u5de6\u4e0a\u65b9\u548c\u53f3\u4e0a\u65b9\u7684\u6570\u7684\u548c\u3002 \u793a\u4f8b\uff1a \u8f93\u5165: 3 \u8f93\u51fa: [1,3,3,1] \u8fdb\u9636\uff1a \u4f60\u53ef\u4ee5\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\u5230 O(k) O(k) \u7a7a\u95f4\u590d\u6742\u5ea6\u5417\uff1f Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5f53\u524d\u884c\u7684\u7ed3\u679c\u4ec5\u4f9d\u8d56\u4e8e\u4e0a\u4e00\u884c\u7684\u7ed3\u679c\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Note: The returned array must be malloced, assume caller calls free(). */ void recur ( int rowIndex , int * Filling ) { if ( rowIndex <= 1 ) return ; recur ( rowIndex - 1 , Filling ); for ( int i = rowIndex - 1 ; i > 0 ; i -- ) Filling [ i ] += Filling [ i - 1 ]; } int * getRow ( int rowIndex , int * returnSize ){ * returnSize = rowIndex + 1 ; int * ret = ( int * ) memset ( malloc ( sizeof ( int ) * * returnSize ), 0 , sizeof ( int ) * * returnSize ); ret [ 0 ] = 1 ; recur ( * returnSize , ret ); return ret ; }","title":"119. \u6768\u8f89\u4e09\u89d2 II"},{"location":"coding/leetcode/119.html#119-ii","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"119. \u6768\u8f89\u4e09\u89d2 II"},{"location":"coding/leetcode/119.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u7d22\u5f15 k k \uff0c\u5176\u4e2d k\\leq33 k\\leq33 \uff0c\u8fd4\u56de\u6768\u8f89\u4e09\u89d2\u7684\u7b2c k k \u884c\u3002 \u5728\u6768\u8f89\u4e09\u89d2\u4e2d\uff0c\u6bcf\u4e2a\u6570\u662f\u5b83\u5de6\u4e0a\u65b9\u548c\u53f3\u4e0a\u65b9\u7684\u6570\u7684\u548c\u3002 \u793a\u4f8b\uff1a \u8f93\u5165: 3 \u8f93\u51fa: [1,3,3,1] \u8fdb\u9636\uff1a \u4f60\u53ef\u4ee5\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\u5230 O(k) O(k) \u7a7a\u95f4\u590d\u6742\u5ea6\u5417\uff1f Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/119.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5f53\u524d\u884c\u7684\u7ed3\u679c\u4ec5\u4f9d\u8d56\u4e8e\u4e0a\u4e00\u884c\u7684\u7ed3\u679c\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u52a8\u6001\u89c4\u5212\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Note: The returned array must be malloced, assume caller calls free(). */ void recur ( int rowIndex , int * Filling ) { if ( rowIndex <= 1 ) return ; recur ( rowIndex - 1 , Filling ); for ( int i = rowIndex - 1 ; i > 0 ; i -- ) Filling [ i ] += Filling [ i - 1 ]; } int * getRow ( int rowIndex , int * returnSize ){ * returnSize = rowIndex + 1 ; int * ret = ( int * ) memset ( malloc ( sizeof ( int ) * * returnSize ), 0 , sizeof ( int ) * * returnSize ); ret [ 0 ] = 1 ; recur ( * returnSize , ret ); return ret ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/120.html","text":"120. \u4e09\u89d2\u5f62\u6700\u5c0f\u8def\u5f84\u548c \u00b6 \u96be\u5ea6\uff1a \u4e2d\u7b49 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u4e09\u89d2\u5f62\uff0c\u627e\u51fa\u81ea\u9876\u5411\u4e0b\u7684\u6700\u5c0f\u8def\u5f84\u548c\u3002\u6bcf\u4e00\u6b65\u53ea\u80fd\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\u4e2d\u76f8\u90bb\u7684\u7ed3\u70b9\u4e0a\u3002 \u76f8\u90bb\u7684\u7ed3\u70b9 \u5728\u8fd9\u91cc\u6307\u7684\u662f \u4e0b\u6807 \u4e0e \u4e0a\u4e00\u5c42\u7ed3\u70b9\u4e0b\u6807 \u76f8\u540c\u6216\u8005\u7b49\u4e8e \u4e0a\u4e00\u5c42\u7ed3\u70b9\u4e0b\u6807 + 1 \u7684\u4e24\u4e2a\u7ed3\u70b9\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e09\u89d2\u5f62\uff1a [ [2], [3,4], [6,5,7], [4,1,8,3] ] \u81ea\u9876\u5411\u4e0b\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a 11 \uff08\u5373\uff0c 2 + 3 + 5 + 1 = 11\uff09\u3002 \u8bf4\u660e\uff1a \u5982\u679c\u4f60\u53ef\u4ee5\u53ea\u4f7f\u7528 O(n) O(n) \u7684\u989d\u5916\u7a7a\u95f4\uff08 n n \u4e3a\u4e09\u89d2\u5f62\u7684\u603b\u884c\u6570\uff09\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u90a3\u4e48\u4f60\u7684\u7b97\u6cd5\u4f1a\u5f88\u52a0\u5206\u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u52a8\u6001\u89c4\u5212\uff0c\u4f7f\u7528\u4e09\u89d2\u5f62\u7684\u6700\u540e\u4e00\u884c\u5b58\u653e\u6700\u5c0f\u7684\u548c\uff0c\u4ece\u4e0b\u5f80\u4e0a\u8fdb\u884c\u8ba1\u7b97\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a #define MIN(x, y) (x < y ? x : y) int minimumTotal ( int ** triangle , int triangleSize , int * triangleColSize ) { if ( ! triangleSize ) return 0 ; int * dp1 = triangle [ triangleSize - 1 ], i = 0 , j = 0 ; for ( i = triangleSize - 1 ; i > 0 ; i -- ) for ( j = 0 ; j < triangleColSize [ i - 1 ]; j ++ ) dp1 [ j ] = triangle [ i - 1 ][ j ] + MIN ( dp1 [ j ], dp1 [ j + 1 ]); return dp1 [ 0 ]; }","title":"120. \u4e09\u89d2\u5f62\u6700\u5c0f\u8def\u5f84\u548c"},{"location":"coding/leetcode/120.html#120","text":"\u96be\u5ea6\uff1a \u4e2d\u7b49","title":"120. \u4e09\u89d2\u5f62\u6700\u5c0f\u8def\u5f84\u548c"},{"location":"coding/leetcode/120.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e09\u89d2\u5f62\uff0c\u627e\u51fa\u81ea\u9876\u5411\u4e0b\u7684\u6700\u5c0f\u8def\u5f84\u548c\u3002\u6bcf\u4e00\u6b65\u53ea\u80fd\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\u4e2d\u76f8\u90bb\u7684\u7ed3\u70b9\u4e0a\u3002 \u76f8\u90bb\u7684\u7ed3\u70b9 \u5728\u8fd9\u91cc\u6307\u7684\u662f \u4e0b\u6807 \u4e0e \u4e0a\u4e00\u5c42\u7ed3\u70b9\u4e0b\u6807 \u76f8\u540c\u6216\u8005\u7b49\u4e8e \u4e0a\u4e00\u5c42\u7ed3\u70b9\u4e0b\u6807 + 1 \u7684\u4e24\u4e2a\u7ed3\u70b9\u3002 \u4f8b\u5982\uff0c\u7ed9\u5b9a\u4e09\u89d2\u5f62\uff1a [ [2], [3,4], [6,5,7], [4,1,8,3] ] \u81ea\u9876\u5411\u4e0b\u7684\u6700\u5c0f\u8def\u5f84\u548c\u4e3a 11 \uff08\u5373\uff0c 2 + 3 + 5 + 1 = 11\uff09\u3002 \u8bf4\u660e\uff1a \u5982\u679c\u4f60\u53ef\u4ee5\u53ea\u4f7f\u7528 O(n) O(n) \u7684\u989d\u5916\u7a7a\u95f4\uff08 n n \u4e3a\u4e09\u89d2\u5f62\u7684\u603b\u884c\u6570\uff09\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u90a3\u4e48\u4f60\u7684\u7b97\u6cd5\u4f1a\u5f88\u52a0\u5206\u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/120.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u52a8\u6001\u89c4\u5212\uff0c\u4f7f\u7528\u4e09\u89d2\u5f62\u7684\u6700\u540e\u4e00\u884c\u5b58\u653e\u6700\u5c0f\u7684\u548c\uff0c\u4ece\u4e0b\u5f80\u4e0a\u8fdb\u884c\u8ba1\u7b97\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a #define MIN(x, y) (x < y ? x : y) int minimumTotal ( int ** triangle , int triangleSize , int * triangleColSize ) { if ( ! triangleSize ) return 0 ; int * dp1 = triangle [ triangleSize - 1 ], i = 0 , j = 0 ; for ( i = triangleSize - 1 ; i > 0 ; i -- ) for ( j = 0 ; j < triangleColSize [ i - 1 ]; j ++ ) dp1 [ j ] = triangle [ i - 1 ][ j ] + MIN ( dp1 [ j ], dp1 [ j + 1 ]); return dp1 [ 0 ]; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/121.html","text":"121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u5982\u679c\u4f60\u6700\u591a\u53ea\u5141\u8bb8\u5b8c\u6210\u4e00\u7b14\u4ea4\u6613\uff08\u5373\u4e70\u5165\u548c\u5356\u51fa\u4e00\u652f\u80a1\u7968\u4e00\u6b21\uff09\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002 \u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u5728\u4e70\u5165\u80a1\u7968\u524d\u5356\u51fa\u80a1\u7968\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [7,1,5,3,6,4] \u8f93\u51fa: 5 \u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u6700\u5927\u5229\u6da6 = 6-1 = 5 \u3002 \u6ce8\u610f\u5229\u6da6\u4e0d\u80fd\u662f 7-1 = 6, \u56e0\u4e3a\u5356\u51fa\u4ef7\u683c\u9700\u8981\u5927\u4e8e\u4e70\u5165\u4ef7\u683c\uff1b\u540c\u65f6\uff0c\u4f60\u4e0d\u80fd\u5728\u4e70\u5165\u524d\u5356\u51fa\u80a1\u7968\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u627e\u51fa\u76f8\u5dee\u6700\u5927\u7684\u6ee1\u8db3 a_i < a_j a_i < a_j \u4e14 i < j i < j \u7684\u4e24\u4e2a\u6570\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int maxProfit ( int * prices , int pricesSize ){ int max = 0 , i = pricesSize - 1 , value = 0 , profit = 0 ; for (; i >= 0 ; i -- ) { if ( prices [ i ] > value ) value = prices [ i ]; else profit = value - prices [ i ]; max = max > profit ? max : profit ; } return max ; }","title":"121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a"},{"location":"coding/leetcode/121.html#121","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"121. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a"},{"location":"coding/leetcode/121.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u5982\u679c\u4f60\u6700\u591a\u53ea\u5141\u8bb8\u5b8c\u6210\u4e00\u7b14\u4ea4\u6613\uff08\u5373\u4e70\u5165\u548c\u5356\u51fa\u4e00\u652f\u80a1\u7968\u4e00\u6b21\uff09\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002 \u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u5728\u4e70\u5165\u80a1\u7968\u524d\u5356\u51fa\u80a1\u7968\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [7,1,5,3,6,4] \u8f93\u51fa: 5 \u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa\uff0c\u6700\u5927\u5229\u6da6 = 6-1 = 5 \u3002 \u6ce8\u610f\u5229\u6da6\u4e0d\u80fd\u662f 7-1 = 6, \u56e0\u4e3a\u5356\u51fa\u4ef7\u683c\u9700\u8981\u5927\u4e8e\u4e70\u5165\u4ef7\u683c\uff1b\u540c\u65f6\uff0c\u4f60\u4e0d\u80fd\u5728\u4e70\u5165\u524d\u5356\u51fa\u80a1\u7968\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/121.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u627e\u51fa\u76f8\u5dee\u6700\u5927\u7684\u6ee1\u8db3 a_i < a_j a_i < a_j \u4e14 i < j i < j \u7684\u4e24\u4e2a\u6570\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int maxProfit ( int * prices , int pricesSize ){ int max = 0 , i = pricesSize - 1 , value = 0 , profit = 0 ; for (; i >= 0 ; i -- ) { if ( prices [ i ] > value ) value = prices [ i ]; else profit = value - prices [ i ]; max = max > profit ? max : profit ; } return max ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/122.html","text":"122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\u4e00\u652f\u80a1\u7968\uff09\u3002 \u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [7,1,5,3,6,4] \u8f93\u51fa: 7 \u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 3 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u968f\u540e\uff0c\u5728\u7b2c 4 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 3\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 6-3 = 3 \u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165: [1,2,3,4,5] \u8f93\u51fa: 4 \u89e3\u91ca: \u5728\u7b2c 1 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u7b2c 1 \u5929\u548c\u7b2c 2 \u5929\u63a5\u8fde\u8d2d\u4e70\u80a1\u7968\uff0c\u4e4b\u540e\u518d\u5c06\u5b83\u4eec\u5356\u51fa\u3002 \u56e0\u4e3a\u8fd9\u6837\u5c5e\u4e8e\u540c\u65f6\u53c2\u4e0e\u4e86\u591a\u7b14\u4ea4\u6613\uff0c\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\u3002 \u793a\u4f8b 3\uff1a \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002 \u63d0\u793a\uff1a 1 <= prices.length <= 3 * 10 ^ 4 0 <= prices[i] <= 10 ^ 4 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5f53\u6570\u7ec4\u957f\u5ea6\u4e3a1\u65f6\uff0c\u4e0d\u80fd\u83b7\u53d6\u4efb\u4f55\u5229\u6da6\uff0c\u8fd4\u56de 0 \uff1b \u4ece\u6570\u7ec4\u672b\u5c3e\u5f00\u59cb\u641c\u7d22\u7b2c\u4e00\u4e2a\u80fd\u76c8\u5229\u7684\u70b9\uff0c\u5219\u6700\u5927\u5229\u6da6\u4e3a\u672c\u6b21\u76c8\u5229\u4e0e\u4e4b\u524d\u6700\u5927\u76c8\u5229\u4e4b\u548c\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int maxProfit ( int * prices , int pricesSize ){ if ( pricesSize < 2 ) return 0 ; int * cur = prices + pricesSize - 1 , currentVal = * cur , len = pricesSize ; while ( cur > prices ) { if ( * cur < * ( cur - 1 )) break ; len -- ; cur -- ; } return ( currentVal - * cur ) + maxProfit ( prices , len - 1 ); }","title":"122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II"},{"location":"coding/leetcode/122.html#122-ii","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"122. \u4e70\u5356\u80a1\u7968\u7684\u6700\u4f73\u65f6\u673a II"},{"location":"coding/leetcode/122.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002 \u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\u4e00\u652f\u80a1\u7968\uff09\u3002 \u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [7,1,5,3,6,4] \u8f93\u51fa: 7 \u89e3\u91ca: \u5728\u7b2c 2 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 3 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u968f\u540e\uff0c\u5728\u7b2c 4 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 3\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 6\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 6-3 = 3 \u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165: [1,2,3,4,5] \u8f93\u51fa: 4 \u89e3\u91ca: \u5728\u7b2c 1 \u5929\uff08\u80a1\u7968\u4ef7\u683c = 1\uff09\u7684\u65f6\u5019\u4e70\u5165\uff0c\u5728\u7b2c 5 \u5929 \uff08\u80a1\u7968\u4ef7\u683c = 5\uff09\u7684\u65f6\u5019\u5356\u51fa, \u8fd9\u7b14\u4ea4\u6613\u6240\u80fd\u83b7\u5f97\u5229\u6da6 = 5-1 = 4 \u3002 \u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u7b2c 1 \u5929\u548c\u7b2c 2 \u5929\u63a5\u8fde\u8d2d\u4e70\u80a1\u7968\uff0c\u4e4b\u540e\u518d\u5c06\u5b83\u4eec\u5356\u51fa\u3002 \u56e0\u4e3a\u8fd9\u6837\u5c5e\u4e8e\u540c\u65f6\u53c2\u4e0e\u4e86\u591a\u7b14\u4ea4\u6613\uff0c\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\u3002 \u793a\u4f8b 3\uff1a \u8f93\u5165: [7,6,4,3,1] \u8f93\u51fa: 0 \u89e3\u91ca: \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b, \u6ca1\u6709\u4ea4\u6613\u5b8c\u6210, \u6240\u4ee5\u6700\u5927\u5229\u6da6\u4e3a 0\u3002 \u63d0\u793a\uff1a 1 <= prices.length <= 3 * 10 ^ 4 0 <= prices[i] <= 10 ^ 4 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/122.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5f53\u6570\u7ec4\u957f\u5ea6\u4e3a1\u65f6\uff0c\u4e0d\u80fd\u83b7\u53d6\u4efb\u4f55\u5229\u6da6\uff0c\u8fd4\u56de 0 \uff1b \u4ece\u6570\u7ec4\u672b\u5c3e\u5f00\u59cb\u641c\u7d22\u7b2c\u4e00\u4e2a\u80fd\u76c8\u5229\u7684\u70b9\uff0c\u5219\u6700\u5927\u5229\u6da6\u4e3a\u672c\u6b21\u76c8\u5229\u4e0e\u4e4b\u524d\u6700\u5927\u76c8\u5229\u4e4b\u548c\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int maxProfit ( int * prices , int pricesSize ){ if ( pricesSize < 2 ) return 0 ; int * cur = prices + pricesSize - 1 , currentVal = * cur , len = pricesSize ; while ( cur > prices ) { if ( * cur < * ( cur - 1 )) break ; len -- ; cur -- ; } return ( currentVal - * cur ) + maxProfit ( prices , len - 1 ); }","title":"\u9898\u89e3"},{"location":"coding/leetcode/125.html","text":"125. \u9a8c\u8bc1\u56de\u6587\u4e32 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u9a8c\u8bc1\u5b83\u662f\u5426\u662f\u56de\u6587\u4e32\uff0c\u53ea\u8003\u8651\u5b57\u6bcd\u548c\u6570\u5b57\u5b57\u7b26\uff0c\u53ef\u4ee5\u5ffd\u7565\u5b57\u6bcd\u7684\u5927\u5c0f\u5199\u3002 \u8bf4\u660e\uff1a \u672c\u9898\u4e2d\uff0c\u6211\u4eec\u5c06\u7a7a\u5b57\u7b26\u4e32\u5b9a\u4e49\u4e3a\u6709\u6548\u7684\u56de\u6587\u4e32\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: \"A man, a plan, a canal: Panama\" \u8f93\u51fa: true \u793a\u4f8b 2\uff1a \u8f93\u5165: \"race a car\" \u8f93\u51fa: false Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\u8fdb\u884c\u5904\u7406\uff0c\u9700\u8981\u6ce8\u610f\u5982\u4e0b\u7279\u6b8a\u60c5\u51b5 \u9700\u8981\u5ffd\u7565\u5b57\u7b26\u4e32\u4e2d\u7684\u7b26\u53f7\u800c\u53ea\u8003\u8651\u5b57\u6bcd\u548c\u6570\u5b57 \u5927\u5c0f\u5199\u7684ASCII\u6570\u503c\u76f8\u5dee32\uff0c\u4f46ASCII\u6570\u503c\u76f8\u5dee32\u7684\u4e24\u4e2a\u5b57\u7b26\u4e0d\u4e00\u5b9a\u662f\u5927\u5c0f\u5199\u5173\u7cfb\uff0c\u5982 '0' (48)\u4e0e 'P' (80) \u4ee3\u7801\u5982\u4e0b\uff1a bool isText ( char s ) { return ( s >= 'A' && s <= 'Z' ) || ( s >= 'a' && s <= 'z' ) || ( s >= '0' && s <= '9' ); } bool isSame ( char s1 , char s2 ) { return ( s1 == s2 ) || ( s2 >= 'A' && s1 - s2 == 32 ) || ( s1 >= 'A' && s2 - s1 == 32 ); } bool isPalindrome ( char * s ){ int len = strlen ( s ), head = 0 , tail = len - 1 ; while ( head < len && ! isText ( s [ head ])) head ++ ; while ( tail >= 0 && ! isText ( s [ tail ])) tail -- ; while ( tail > head && head < len && tail >= 0 ) { if ( ! isSame ( s [ head ], s [ tail ])) return false ; head ++ ; tail -- ; while ( ! isText ( s [ head ])) head ++ ; while ( ! isText ( s [ tail ])) tail -- ; } return true ; }","title":"125. \u9a8c\u8bc1\u56de\u6587\u4e32"},{"location":"coding/leetcode/125.html#125","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"125. \u9a8c\u8bc1\u56de\u6587\u4e32"},{"location":"coding/leetcode/125.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u9a8c\u8bc1\u5b83\u662f\u5426\u662f\u56de\u6587\u4e32\uff0c\u53ea\u8003\u8651\u5b57\u6bcd\u548c\u6570\u5b57\u5b57\u7b26\uff0c\u53ef\u4ee5\u5ffd\u7565\u5b57\u6bcd\u7684\u5927\u5c0f\u5199\u3002 \u8bf4\u660e\uff1a \u672c\u9898\u4e2d\uff0c\u6211\u4eec\u5c06\u7a7a\u5b57\u7b26\u4e32\u5b9a\u4e49\u4e3a\u6709\u6548\u7684\u56de\u6587\u4e32\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: \"A man, a plan, a canal: Panama\" \u8f93\u51fa: true \u793a\u4f8b 2\uff1a \u8f93\u5165: \"race a car\" \u8f93\u51fa: false Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/125.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\u8fdb\u884c\u5904\u7406\uff0c\u9700\u8981\u6ce8\u610f\u5982\u4e0b\u7279\u6b8a\u60c5\u51b5 \u9700\u8981\u5ffd\u7565\u5b57\u7b26\u4e32\u4e2d\u7684\u7b26\u53f7\u800c\u53ea\u8003\u8651\u5b57\u6bcd\u548c\u6570\u5b57 \u5927\u5c0f\u5199\u7684ASCII\u6570\u503c\u76f8\u5dee32\uff0c\u4f46ASCII\u6570\u503c\u76f8\u5dee32\u7684\u4e24\u4e2a\u5b57\u7b26\u4e0d\u4e00\u5b9a\u662f\u5927\u5c0f\u5199\u5173\u7cfb\uff0c\u5982 '0' (48)\u4e0e 'P' (80) \u4ee3\u7801\u5982\u4e0b\uff1a bool isText ( char s ) { return ( s >= 'A' && s <= 'Z' ) || ( s >= 'a' && s <= 'z' ) || ( s >= '0' && s <= '9' ); } bool isSame ( char s1 , char s2 ) { return ( s1 == s2 ) || ( s2 >= 'A' && s1 - s2 == 32 ) || ( s1 >= 'A' && s2 - s1 == 32 ); } bool isPalindrome ( char * s ){ int len = strlen ( s ), head = 0 , tail = len - 1 ; while ( head < len && ! isText ( s [ head ])) head ++ ; while ( tail >= 0 && ! isText ( s [ tail ])) tail -- ; while ( tail > head && head < len && tail >= 0 ) { if ( ! isSame ( s [ head ], s [ tail ])) return false ; head ++ ; tail -- ; while ( ! isText ( s [ head ])) head ++ ; while ( ! isText ( s [ tail ])) tail -- ; } return true ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/13.html","text":"13. \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7f57\u9a6c\u6570\u5b57\u5305\u542b\u4ee5\u4e0b\u4e03\u79cd\u5b57\u7b26: I \uff0c V \uff0c X \uff0c L \uff0c C \uff0c D \u548c M \u3002 \u5b57\u7b26 \u6570\u503c I 1 V 5 X 10 L 50 C 100 D 500 M 1000 \u4f8b\u5982\uff0c \u7f57\u9a6c\u6570\u5b57 2 \u5199\u505a II \uff0c\u5373\u4e3a\u4e24\u4e2a\u5e76\u5217\u7684 1\u300212 \u5199\u505a XII \uff0c\u5373\u4e3a X + II \u3002 27 \u5199\u505a XXVII , \u5373\u4e3a XX + V + II \u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7f57\u9a6c\u6570\u5b57\u4e2d\u5c0f\u7684\u6570\u5b57\u5728\u5927\u7684\u6570\u5b57\u7684\u53f3\u8fb9\u3002\u4f46\u4e5f\u5b58\u5728\u7279\u4f8b\uff0c\u4f8b\u5982 4 \u4e0d\u5199\u505a IIII \uff0c\u800c\u662f IV \u3002\u6570\u5b57 1 \u5728\u6570\u5b57 5 \u7684\u5de6\u8fb9\uff0c\u6240\u8868\u793a\u7684\u6570\u7b49\u4e8e\u5927\u6570 5 \u51cf\u5c0f\u6570 1 \u5f97\u5230\u7684\u6570\u503c 4 \u3002\u540c\u6837\u5730\uff0c\u6570\u5b57 9 \u8868\u793a\u4e3a IX \u3002\u8fd9\u4e2a\u7279\u6b8a\u7684\u89c4\u5219\u53ea\u9002\u7528\u4e8e\u4ee5\u4e0b\u516d\u79cd\u60c5\u51b5\uff1a I \u53ef\u4ee5\u653e\u5728 V (5) \u548c X (10) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 4 \u548c 9\u3002 X \u53ef\u4ee5\u653e\u5728 L (50) \u548c C (100) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 40 \u548c 90\u3002 C \u53ef\u4ee5\u653e\u5728 D (500) \u548c M (1000) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 400 \u548c 900\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u7f57\u9a6c\u6570\u5b57\uff0c\u5c06\u5176\u8f6c\u6362\u6210\u6574\u6570\u3002\u8f93\u5165\u786e\u4fdd\u5728 1 \u5230 3999 \u7684\u8303\u56f4\u5185\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: \"III\" \u8f93\u51fa: 3 \u793a\u4f8b 2\uff1a \u8f93\u5165: \"IV\" \u8f93\u51fa: 4 \u793a\u4f8b 3\uff1a \u8f93\u5165: \"IX\" \u8f93\u51fa: 9 \u793a\u4f8b 4\uff1a \u8f93\u5165: \"LVIII\" \u8f93\u51fa: 58 \u89e3\u91ca: L = 50, V= 5, III = 3. \u793a\u4f8b 5\uff1a \u8f93\u5165: \"MCMXCIV\" \u8f93\u51fa: 1994 \u89e3\u91ca: M = 1000, CM = 900, XC = 90, IV = 4. \u63d0\u793a\uff1a \u9898\u76ee\u6240\u7ed9\u6d4b\u8bd5\u7528\u4f8b\u7686\u7b26\u5408\u7f57\u9a6c\u6570\u5b57\u4e66\u5199\u89c4\u5219\uff0c\u4e0d\u4f1a\u51fa\u73b0\u8de8\u4f4d\u7b49\u60c5\u51b5\u3002 IC \u548c IM \u8fd9\u6837\u7684\u4f8b\u5b50\u5e76\u4e0d\u7b26\u5408\u9898\u76ee\u8981\u6c42\uff0c49 \u5e94\u8be5\u5199\u4f5c XLIX \uff0c999 \u5e94\u8be5\u5199\u4f5c CMXCIX \u3002 \u5173\u4e8e\u7f57\u9a6c\u6570\u5b57\u7684\u8be6\u5c3d\u4e66\u5199\u89c4\u5219\uff0c\u53ef\u4ee5\u53c2\u8003 \u7f57\u9a6c\u6570\u5b57 - Mathematics \u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u9010\u4f4d\u5904\u7406\u5373\u53ef\uff0c\u6ce8\u610f\u5c0f\u7684\u6570\u5b57\u5728\u5927\u7684\u6570\u5b57\u5de6\u8fb9\u7684\u7279\u6b8a\u60c5\u51b5 \u4ee3\u7801\u5982\u4e0b\uff1a int romanToInt ( char * s ){ char * cur = s ; int ret = 0 ; while ( * cur ) { switch ( * cur ) { case 'I' : if ( * ( cur + 1 ) == 'V' || * ( cur + 1 ) == 'X' ) ret -= 1 ; else ret += 1 ; break ; case 'V' : ret += 5 ; break ; case 'X' : if ( * ( cur + 1 ) == 'L' || * ( cur + 1 ) == 'C' ) ret -= 10 ; else ret += 10 ; break ; case 'L' : ret += 50 ; break ; case 'C' : if ( * ( cur + 1 ) == 'D' || * ( cur + 1 ) == 'M' ) ret -= 100 ; else ret += 100 ; break ; case 'M' : ret += 500 ; case 'D' : ret += 500 ; } cur ++ ; } return ret ; }","title":"13. \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570"},{"location":"coding/leetcode/13.html#13","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"13. \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570"},{"location":"coding/leetcode/13.html#_1","text":"\u7f57\u9a6c\u6570\u5b57\u5305\u542b\u4ee5\u4e0b\u4e03\u79cd\u5b57\u7b26: I \uff0c V \uff0c X \uff0c L \uff0c C \uff0c D \u548c M \u3002 \u5b57\u7b26 \u6570\u503c I 1 V 5 X 10 L 50 C 100 D 500 M 1000 \u4f8b\u5982\uff0c \u7f57\u9a6c\u6570\u5b57 2 \u5199\u505a II \uff0c\u5373\u4e3a\u4e24\u4e2a\u5e76\u5217\u7684 1\u300212 \u5199\u505a XII \uff0c\u5373\u4e3a X + II \u3002 27 \u5199\u505a XXVII , \u5373\u4e3a XX + V + II \u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7f57\u9a6c\u6570\u5b57\u4e2d\u5c0f\u7684\u6570\u5b57\u5728\u5927\u7684\u6570\u5b57\u7684\u53f3\u8fb9\u3002\u4f46\u4e5f\u5b58\u5728\u7279\u4f8b\uff0c\u4f8b\u5982 4 \u4e0d\u5199\u505a IIII \uff0c\u800c\u662f IV \u3002\u6570\u5b57 1 \u5728\u6570\u5b57 5 \u7684\u5de6\u8fb9\uff0c\u6240\u8868\u793a\u7684\u6570\u7b49\u4e8e\u5927\u6570 5 \u51cf\u5c0f\u6570 1 \u5f97\u5230\u7684\u6570\u503c 4 \u3002\u540c\u6837\u5730\uff0c\u6570\u5b57 9 \u8868\u793a\u4e3a IX \u3002\u8fd9\u4e2a\u7279\u6b8a\u7684\u89c4\u5219\u53ea\u9002\u7528\u4e8e\u4ee5\u4e0b\u516d\u79cd\u60c5\u51b5\uff1a I \u53ef\u4ee5\u653e\u5728 V (5) \u548c X (10) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 4 \u548c 9\u3002 X \u53ef\u4ee5\u653e\u5728 L (50) \u548c C (100) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 40 \u548c 90\u3002 C \u53ef\u4ee5\u653e\u5728 D (500) \u548c M (1000) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 400 \u548c 900\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u7f57\u9a6c\u6570\u5b57\uff0c\u5c06\u5176\u8f6c\u6362\u6210\u6574\u6570\u3002\u8f93\u5165\u786e\u4fdd\u5728 1 \u5230 3999 \u7684\u8303\u56f4\u5185\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: \"III\" \u8f93\u51fa: 3 \u793a\u4f8b 2\uff1a \u8f93\u5165: \"IV\" \u8f93\u51fa: 4 \u793a\u4f8b 3\uff1a \u8f93\u5165: \"IX\" \u8f93\u51fa: 9 \u793a\u4f8b 4\uff1a \u8f93\u5165: \"LVIII\" \u8f93\u51fa: 58 \u89e3\u91ca: L = 50, V= 5, III = 3. \u793a\u4f8b 5\uff1a \u8f93\u5165: \"MCMXCIV\" \u8f93\u51fa: 1994 \u89e3\u91ca: M = 1000, CM = 900, XC = 90, IV = 4. \u63d0\u793a\uff1a \u9898\u76ee\u6240\u7ed9\u6d4b\u8bd5\u7528\u4f8b\u7686\u7b26\u5408\u7f57\u9a6c\u6570\u5b57\u4e66\u5199\u89c4\u5219\uff0c\u4e0d\u4f1a\u51fa\u73b0\u8de8\u4f4d\u7b49\u60c5\u51b5\u3002 IC \u548c IM \u8fd9\u6837\u7684\u4f8b\u5b50\u5e76\u4e0d\u7b26\u5408\u9898\u76ee\u8981\u6c42\uff0c49 \u5e94\u8be5\u5199\u4f5c XLIX \uff0c999 \u5e94\u8be5\u5199\u4f5c CMXCIX \u3002 \u5173\u4e8e\u7f57\u9a6c\u6570\u5b57\u7684\u8be6\u5c3d\u4e66\u5199\u89c4\u5219\uff0c\u53ef\u4ee5\u53c2\u8003 \u7f57\u9a6c\u6570\u5b57 - Mathematics \u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/13.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u9010\u4f4d\u5904\u7406\u5373\u53ef\uff0c\u6ce8\u610f\u5c0f\u7684\u6570\u5b57\u5728\u5927\u7684\u6570\u5b57\u5de6\u8fb9\u7684\u7279\u6b8a\u60c5\u51b5 \u4ee3\u7801\u5982\u4e0b\uff1a int romanToInt ( char * s ){ char * cur = s ; int ret = 0 ; while ( * cur ) { switch ( * cur ) { case 'I' : if ( * ( cur + 1 ) == 'V' || * ( cur + 1 ) == 'X' ) ret -= 1 ; else ret += 1 ; break ; case 'V' : ret += 5 ; break ; case 'X' : if ( * ( cur + 1 ) == 'L' || * ( cur + 1 ) == 'C' ) ret -= 10 ; else ret += 10 ; break ; case 'L' : ret += 50 ; break ; case 'C' : if ( * ( cur + 1 ) == 'D' || * ( cur + 1 ) == 'M' ) ret -= 100 ; else ret += 100 ; break ; case 'M' : ret += 500 ; case 'D' : ret += 500 ; } cur ++ ; } return ret ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/136.html","text":"136. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u6574\u6570\u6570\u7ec4\uff0c\u9664\u4e86\u67d0\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u4ee5\u5916\uff0c\u5176\u4f59\u6bcf\u4e2a\u5143\u7d20\u5747\u51fa\u73b0\u4e24\u6b21\u3002\u627e\u51fa\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\u7684\u5143\u7d20\u3002 \u8bf4\u660e\uff1a \u4f60\u7684\u7b97\u6cd5\u5e94\u8be5\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u4f60\u53ef\u4ee5\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u6765\u5b9e\u73b0\u5417\uff1f \u793a\u4f8b 1\uff1a \u8f93\u5165: [2,2,1] \u8f93\u51fa: 1 \u793a\u4f8b 2\uff1a \u8f93\u5165: [4,1,2,1,2] \u8f93\u51fa: 4 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5f02\u6216\u8fd0\u7b97\u5177\u6709\u5982\u4e0b\u6027\u8d28\uff1a \u4ea4\u6362\u5f8b\uff1a a ^ b = b ^ a \u7ed3\u5408\u5f8b\uff1a (a ^ b) ^ c = a ^ (b ^ c) \u82e5 a ^ b = c \uff0c\u5219 a ^ c = b \u3001 b ^ c = a a ^ a = 0 \u6839\u636e\u6027\u8d281\u30012\uff0c\u5f02\u6216\u8fd0\u7b97\u7684\u7ed3\u679c\u4e0e\u53c2\u4e0e\u8fd0\u7b97\u7684\u6240\u6709\u6570\u503c\u7684\u6392\u5217\u987a\u5e8f\u65e0\u5173\u3002\u6839\u636e\u6027\u8d283\u30014\uff0c\u76f8\u540c\u6574\u6570\u7684\u5f02\u6216\u503c\u4e3a0\uff0c0\u4e0e\u4efb\u4f55\u6570\u5f02\u6216\u4ecd\u4e3a\u8be5\u6570\u3002\u56e0\u6b64\u5c06\u6570\u7ec4\u4e2d\u5404\u5143\u7d20\u8fdb\u884c\u6309\u4f4d\u5f02\u6216\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5373\u4e3a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u503c\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int singleNumber ( int * nums , int numsSize ){ int ret = 0 , i = 0 ; for ( i = 0 ; i < numsSize ; i ++ ) ret ^= nums [ i ]; return ret ; }","title":"136. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57"},{"location":"coding/leetcode/136.html#136","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"136. \u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57"},{"location":"coding/leetcode/136.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u6574\u6570\u6570\u7ec4\uff0c\u9664\u4e86\u67d0\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u4ee5\u5916\uff0c\u5176\u4f59\u6bcf\u4e2a\u5143\u7d20\u5747\u51fa\u73b0\u4e24\u6b21\u3002\u627e\u51fa\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\u7684\u5143\u7d20\u3002 \u8bf4\u660e\uff1a \u4f60\u7684\u7b97\u6cd5\u5e94\u8be5\u5177\u6709\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u3002 \u4f60\u53ef\u4ee5\u4e0d\u4f7f\u7528\u989d\u5916\u7a7a\u95f4\u6765\u5b9e\u73b0\u5417\uff1f \u793a\u4f8b 1\uff1a \u8f93\u5165: [2,2,1] \u8f93\u51fa: 1 \u793a\u4f8b 2\uff1a \u8f93\u5165: [4,1,2,1,2] \u8f93\u51fa: 4 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/136.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5f02\u6216\u8fd0\u7b97\u5177\u6709\u5982\u4e0b\u6027\u8d28\uff1a \u4ea4\u6362\u5f8b\uff1a a ^ b = b ^ a \u7ed3\u5408\u5f8b\uff1a (a ^ b) ^ c = a ^ (b ^ c) \u82e5 a ^ b = c \uff0c\u5219 a ^ c = b \u3001 b ^ c = a a ^ a = 0 \u6839\u636e\u6027\u8d281\u30012\uff0c\u5f02\u6216\u8fd0\u7b97\u7684\u7ed3\u679c\u4e0e\u53c2\u4e0e\u8fd0\u7b97\u7684\u6240\u6709\u6570\u503c\u7684\u6392\u5217\u987a\u5e8f\u65e0\u5173\u3002\u6839\u636e\u6027\u8d283\u30014\uff0c\u76f8\u540c\u6574\u6570\u7684\u5f02\u6216\u503c\u4e3a0\uff0c0\u4e0e\u4efb\u4f55\u6570\u5f02\u6216\u4ecd\u4e3a\u8be5\u6570\u3002\u56e0\u6b64\u5c06\u6570\u7ec4\u4e2d\u5404\u5143\u7d20\u8fdb\u884c\u6309\u4f4d\u5f02\u6216\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u5373\u4e3a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u503c\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int singleNumber ( int * nums , int numsSize ){ int ret = 0 , i = 0 ; for ( i = 0 ; i < numsSize ; i ++ ) ret ^= nums [ i ]; return ret ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/14.html","text":"14. \u6700\u957f\u516c\u5171\u524d\u7f00 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e\u5b57\u7b26\u4e32\u6570\u7ec4\u4e2d\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 \"\" \u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [\"flower\",\"flow\",\"flight\"] \u8f93\u51fa: \"fl\" \u793a\u4f8b 2\uff1a \u8f93\u5165: [\"dog\",\"racecar\",\"car\"] \u8f93\u51fa: \"\" \u89e3\u91ca: \u8f93\u5165\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\u3002 \u8bf4\u660e\uff1a \u6240\u6709\u8f93\u5165\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd a-z \u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5728\u6bd4\u8f83\u524d\u7f00\u65f6\u53ea\u9700\u8981\u5c06\u524d n \u4e2a\u5b57\u7b26\u4e32\u7684\u516c\u5171\u524d\u7f00\u4e0e\u7b2c n+1 \u4e2a\u5b57\u7b26\u4e32\u8fdb\u884c\u6bd4\u8f83\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a char * compareTwo ( char * str1 , char * str2 ) { char * cur1 = str1 , * cur2 = str2 , * ret = NULL ; int len = 0 ; while ( * cur1 && * cur2 ) { if ( * cur1 != * cur2 ) break ; else len ++ ; cur1 ++ ; cur2 ++ ; } ret = ( char * ) memset ( malloc ( sizeof ( char ) * ( len + 1 )), 0 , sizeof ( char ) * ( len + 1 )); return memcpy ( ret , str1 , sizeof ( char ) * len ); } char * longestCommonPrefix ( char ** strs , int strsSize ){ if ( strsSize == 0 ) return memset ( malloc ( sizeof ( char )), 0 , sizeof ( char )); if ( strsSize == 1 ) return strs [ 0 ]; if ( strsSize == 2 ) return compareTwo ( strs [ 0 ], strs [ 1 ]); int rec_size = ( strsSize + 1 ) >> 1 , i = 0 ; char ** rec = ( char ** ) memset ( malloc ( sizeof ( char * ) * rec_size ), 0 , sizeof ( char * ) * rec_size ); for ( i = 0 ; i < strsSize >> 1 ; i ++ ) rec [ i ] = compareTwo ( strs [ 2 * i ], strs [ 2 * i + 1 ]); if ( strsSize & 1 ) rec [ rec_size - 1 ] = strs [ strsSize - 1 ]; return longestCommonPrefix ( rec , rec_size ); }","title":"14. \u6700\u957f\u516c\u5171\u524d\u7f00"},{"location":"coding/leetcode/14.html#14","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"14. \u6700\u957f\u516c\u5171\u524d\u7f00"},{"location":"coding/leetcode/14.html#_1","text":"\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e\u5b57\u7b26\u4e32\u6570\u7ec4\u4e2d\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 \"\" \u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [\"flower\",\"flow\",\"flight\"] \u8f93\u51fa: \"fl\" \u793a\u4f8b 2\uff1a \u8f93\u5165: [\"dog\",\"racecar\",\"car\"] \u8f93\u51fa: \"\" \u89e3\u91ca: \u8f93\u5165\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\u3002 \u8bf4\u660e\uff1a \u6240\u6709\u8f93\u5165\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd a-z \u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/14.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5728\u6bd4\u8f83\u524d\u7f00\u65f6\u53ea\u9700\u8981\u5c06\u524d n \u4e2a\u5b57\u7b26\u4e32\u7684\u516c\u5171\u524d\u7f00\u4e0e\u7b2c n+1 \u4e2a\u5b57\u7b26\u4e32\u8fdb\u884c\u6bd4\u8f83\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a char * compareTwo ( char * str1 , char * str2 ) { char * cur1 = str1 , * cur2 = str2 , * ret = NULL ; int len = 0 ; while ( * cur1 && * cur2 ) { if ( * cur1 != * cur2 ) break ; else len ++ ; cur1 ++ ; cur2 ++ ; } ret = ( char * ) memset ( malloc ( sizeof ( char ) * ( len + 1 )), 0 , sizeof ( char ) * ( len + 1 )); return memcpy ( ret , str1 , sizeof ( char ) * len ); } char * longestCommonPrefix ( char ** strs , int strsSize ){ if ( strsSize == 0 ) return memset ( malloc ( sizeof ( char )), 0 , sizeof ( char )); if ( strsSize == 1 ) return strs [ 0 ]; if ( strsSize == 2 ) return compareTwo ( strs [ 0 ], strs [ 1 ]); int rec_size = ( strsSize + 1 ) >> 1 , i = 0 ; char ** rec = ( char ** ) memset ( malloc ( sizeof ( char * ) * rec_size ), 0 , sizeof ( char * ) * rec_size ); for ( i = 0 ; i < strsSize >> 1 ; i ++ ) rec [ i ] = compareTwo ( strs [ 2 * i ], strs [ 2 * i + 1 ]); if ( strsSize & 1 ) rec [ rec_size - 1 ] = strs [ strsSize - 1 ]; return longestCommonPrefix ( rec , rec_size ); }","title":"\u9898\u89e3"},{"location":"coding/leetcode/155.html","text":"155. \u6700\u5c0f\u6808 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301 push \uff0c pop \uff0c top \u64cd\u4f5c\uff0c\u5e76\u80fd\u5728\u5e38\u6570\u65f6\u95f4\u5185\u68c0\u7d22\u5230\u6700\u5c0f\u5143\u7d20\u7684\u6808\u3002 push(x) \u2014\u2014 \u5c06\u5143\u7d20 x \u63a8\u5165\u6808\u4e2d\u3002 pop() \u2014\u2014 \u5220\u9664\u6808\u9876\u7684\u5143\u7d20\u3002 top() \u2014\u2014 \u83b7\u53d6\u6808\u9876\u5143\u7d20\u3002 getMin() \u2014\u2014 \u68c0\u7d22\u6808\u4e2d\u7684\u6700\u5c0f\u5143\u7d20\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a [\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"] [[],[-2],[0],[-3],[],[],[],[]] \u8f93\u51fa\uff1a [null,null,null,null,-3,null,0,-2] \u89e3\u91ca\uff1a MinStack minStack = new MinStack(); minStack.push(-2); minStack.push(0); minStack.push(-3); minStack.getMin(); --> \u8fd4\u56de -3. minStack.pop(); minStack.top(); --> \u8fd4\u56de 0. minStack.getMin(); --> \u8fd4\u56de -2. \u63d0\u793a\uff1a pop \u3001 top \u548c getMin \u64cd\u4f5c\u603b\u662f\u5728 \u975e\u7a7a\u6808 \u4e0a\u8c03\u7528\u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u4f7f\u7528\u4e24\u4e2a\u57df\u5206\u522b\u5b58\u50a8\u5f53\u524d\u6570\u503c\u548c\u5f53\u524d\u6808\u4e2d\u7684\u6700\u5c0f\u503c\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a #define MIN(x, y) (x < y ? x : y) struct cell { int val ; int curMin ; }; typedef struct { struct cell values [ 10000 ]; int top ; } MinStack ; /** initialize your data structure here. */ MinStack * minStackCreate () { return ( MinStack * ) memset ( malloc ( sizeof ( MinStack )), 0 , sizeof ( MinStack )); } void minStackPush ( MinStack * obj , int x ) { obj -> values [ obj -> top ]. val = x ; obj -> values [ obj -> top ]. curMin = obj -> top > 0 ? MIN ( x , obj -> values [ obj -> top - 1 ]. curMin ) : x ; obj -> top ++ ; } void minStackPop ( MinStack * obj ) { obj -> top -- ; } int minStackTop ( MinStack * obj ) { return obj -> values [ obj -> top - 1 ]. val ; } int minStackGetMin ( MinStack * obj ) { return obj -> values [ obj -> top - 1 ]. curMin ; } void minStackFree ( MinStack * obj ) { free ( obj ); } /** * Your MinStack struct will be instantiated and called as such: * MinStack* obj = minStackCreate(); * minStackPush(obj, x); * minStackPop(obj); * int param_3 = minStackTop(obj); * int param_4 = minStackGetMin(obj); * minStackFree(obj); */","title":"155. \u6700\u5c0f\u6808"},{"location":"coding/leetcode/155.html#155","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"155. \u6700\u5c0f\u6808"},{"location":"coding/leetcode/155.html#_1","text":"\u8bbe\u8ba1\u4e00\u4e2a\u652f\u6301 push \uff0c pop \uff0c top \u64cd\u4f5c\uff0c\u5e76\u80fd\u5728\u5e38\u6570\u65f6\u95f4\u5185\u68c0\u7d22\u5230\u6700\u5c0f\u5143\u7d20\u7684\u6808\u3002 push(x) \u2014\u2014 \u5c06\u5143\u7d20 x \u63a8\u5165\u6808\u4e2d\u3002 pop() \u2014\u2014 \u5220\u9664\u6808\u9876\u7684\u5143\u7d20\u3002 top() \u2014\u2014 \u83b7\u53d6\u6808\u9876\u5143\u7d20\u3002 getMin() \u2014\u2014 \u68c0\u7d22\u6808\u4e2d\u7684\u6700\u5c0f\u5143\u7d20\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a [\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"] [[],[-2],[0],[-3],[],[],[],[]] \u8f93\u51fa\uff1a [null,null,null,null,-3,null,0,-2] \u89e3\u91ca\uff1a MinStack minStack = new MinStack(); minStack.push(-2); minStack.push(0); minStack.push(-3); minStack.getMin(); --> \u8fd4\u56de -3. minStack.pop(); minStack.top(); --> \u8fd4\u56de 0. minStack.getMin(); --> \u8fd4\u56de -2. \u63d0\u793a\uff1a pop \u3001 top \u548c getMin \u64cd\u4f5c\u603b\u662f\u5728 \u975e\u7a7a\u6808 \u4e0a\u8c03\u7528\u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/155.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u4f7f\u7528\u4e24\u4e2a\u57df\u5206\u522b\u5b58\u50a8\u5f53\u524d\u6570\u503c\u548c\u5f53\u524d\u6808\u4e2d\u7684\u6700\u5c0f\u503c\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a #define MIN(x, y) (x < y ? x : y) struct cell { int val ; int curMin ; }; typedef struct { struct cell values [ 10000 ]; int top ; } MinStack ; /** initialize your data structure here. */ MinStack * minStackCreate () { return ( MinStack * ) memset ( malloc ( sizeof ( MinStack )), 0 , sizeof ( MinStack )); } void minStackPush ( MinStack * obj , int x ) { obj -> values [ obj -> top ]. val = x ; obj -> values [ obj -> top ]. curMin = obj -> top > 0 ? MIN ( x , obj -> values [ obj -> top - 1 ]. curMin ) : x ; obj -> top ++ ; } void minStackPop ( MinStack * obj ) { obj -> top -- ; } int minStackTop ( MinStack * obj ) { return obj -> values [ obj -> top - 1 ]. val ; } int minStackGetMin ( MinStack * obj ) { return obj -> values [ obj -> top - 1 ]. curMin ; } void minStackFree ( MinStack * obj ) { free ( obj ); } /** * Your MinStack struct will be instantiated and called as such: * MinStack* obj = minStackCreate(); * minStackPush(obj, x); * minStackPop(obj); * int param_3 = minStackTop(obj); * int param_4 = minStackGetMin(obj); * minStackFree(obj); */","title":"\u9898\u89e3"},{"location":"coding/leetcode/189.html","text":"189. \u65cb\u8f6c\u6570\u7ec4 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5c06\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u5411\u53f3\u79fb\u52a8 k \u4e2a\u4f4d\u7f6e\uff0c\u5176\u4e2d k \u662f\u975e\u8d1f\u6570\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [1,2,3,4,5,6,7] \u548c k = 3 \u8f93\u51fa: [5,6,7,1,2,3,4] \u89e3\u91ca: \u5411\u53f3\u65cb\u8f6c 1 \u6b65: [7,1,2,3,4,5,6] \u5411\u53f3\u65cb\u8f6c 2 \u6b65: [6,7,1,2,3,4,5] \u5411\u53f3\u65cb\u8f6c 3 \u6b65: [5,6,7,1,2,3,4] \u793a\u4f8b 2\uff1a \u8f93\u5165: [-1,-100,3,99] \u548c k = 2 \u8f93\u51fa: [3,99,-1,-100] \u89e3\u91ca: \u5411\u53f3\u65cb\u8f6c 1 \u6b65: [99,-1,-100,3] \u5411\u53f3\u65cb\u8f6c 2 \u6b65: [3,99,-1,-100] \u8bf4\u660e\uff1a \u5c3d\u53ef\u80fd\u60f3\u51fa\u66f4\u591a\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u81f3\u5c11\u6709\u4e09\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u8981\u6c42\u4f7f\u7528\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(1) O(1) \u7684 \u539f\u5730 \u7b97\u6cd5\u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5148\u53cd\u8f6c\u6574\u4e2a\u6570\u7ec4\uff0c\u518d\u4ee5\u7b2c k k \u4e2a\u5143\u7d20\u4e3a\u754c\uff0c\u5206\u522b\u53cd\u8f6c k k \u4e4b\u524d\u7684\u90e8\u5206\u4e0e k k \u53ca k k \u4e4b\u540e\u7684\u90e8\u5206\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a void Reverse ( int * nums , int numsSize ) { int head = 0 , tail = numsSize - 1 , temp = 0 ; while ( tail > head ) { temp = nums [ head ]; nums [ head ] = nums [ tail ]; nums [ tail ] = temp ; tail -- ; head ++ ; } } void rotate ( int * nums , int numsSize , int k ){ if ( numsSize < 2 ) return ; k %= numsSize ; Reverse ( nums , numsSize ); Reverse ( nums , k ); Reverse ( nums + k , numsSize - k ); }","title":"189. \u65cb\u8f6c\u6570\u7ec4"},{"location":"coding/leetcode/189.html#189","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"189. \u65cb\u8f6c\u6570\u7ec4"},{"location":"coding/leetcode/189.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5c06\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u5411\u53f3\u79fb\u52a8 k \u4e2a\u4f4d\u7f6e\uff0c\u5176\u4e2d k \u662f\u975e\u8d1f\u6570\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [1,2,3,4,5,6,7] \u548c k = 3 \u8f93\u51fa: [5,6,7,1,2,3,4] \u89e3\u91ca: \u5411\u53f3\u65cb\u8f6c 1 \u6b65: [7,1,2,3,4,5,6] \u5411\u53f3\u65cb\u8f6c 2 \u6b65: [6,7,1,2,3,4,5] \u5411\u53f3\u65cb\u8f6c 3 \u6b65: [5,6,7,1,2,3,4] \u793a\u4f8b 2\uff1a \u8f93\u5165: [-1,-100,3,99] \u548c k = 2 \u8f93\u51fa: [3,99,-1,-100] \u89e3\u91ca: \u5411\u53f3\u65cb\u8f6c 1 \u6b65: [99,-1,-100,3] \u5411\u53f3\u65cb\u8f6c 2 \u6b65: [3,99,-1,-100] \u8bf4\u660e\uff1a \u5c3d\u53ef\u80fd\u60f3\u51fa\u66f4\u591a\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u81f3\u5c11\u6709\u4e09\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002 \u8981\u6c42\u4f7f\u7528\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a O(1) O(1) \u7684 \u539f\u5730 \u7b97\u6cd5\u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/189.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5148\u53cd\u8f6c\u6574\u4e2a\u6570\u7ec4\uff0c\u518d\u4ee5\u7b2c k k \u4e2a\u5143\u7d20\u4e3a\u754c\uff0c\u5206\u522b\u53cd\u8f6c k k \u4e4b\u524d\u7684\u90e8\u5206\u4e0e k k \u53ca k k \u4e4b\u540e\u7684\u90e8\u5206\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a void Reverse ( int * nums , int numsSize ) { int head = 0 , tail = numsSize - 1 , temp = 0 ; while ( tail > head ) { temp = nums [ head ]; nums [ head ] = nums [ tail ]; nums [ tail ] = temp ; tail -- ; head ++ ; } } void rotate ( int * nums , int numsSize , int k ){ if ( numsSize < 2 ) return ; k %= numsSize ; Reverse ( nums , numsSize ); Reverse ( nums , k ); Reverse ( nums + k , numsSize - k ); }","title":"\u9898\u89e3"},{"location":"coding/leetcode/19.html","text":"19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9 \u00b6 \u96be\u5ea6\uff1a \u4e2d\u7b49 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c n \u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002 \u793a\u4f8b\uff1a `` \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868: 1->2->3->4->5, \u548c n = 2. \u5f53\u5220\u9664\u4e86\u5012\u6570\u7b2c\u4e8c\u4e2a\u8282\u70b9\u540e\uff0c\u94fe\u8868\u53d8\u4e3a 1->2->3->5. `` \u8bf4\u660e\uff1a \u7ed9\u5b9a\u7684 n \u4fdd\u8bc1\u662f\u6709\u6548\u7684\u3002 \u8fdb\u9636\uff1a \u4f60\u80fd\u5c1d\u8bd5\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b9e\u73b0\u5417\uff1f Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5148\u627e\u5230\u5012\u6570\u7b2c n \u4e2a\u8282\u70b9\uff0c\u518d\u8fdb\u884c\u5220\u9664 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for singly-linked list. * struct ListNode { * int val; * struct ListNode *next; * }; */ struct ListNode * removeNthFromEnd ( struct ListNode * head , int n ){ struct ListNode * cur = head , * temp = NULL ; int length = 1 , i = 0 ; while ( cur -> next != NULL ) { cur = cur -> next ; length ++ ; } cur = head ; for ( i = 0 ; i < length - n - 1 ; i ++ ) cur = cur -> next ; if ( n == length ) return cur -> next ; if ( cur -> next ) { cur -> next = cur -> next -> next ; return head ; } return NULL ; }","title":"19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9"},{"location":"coding/leetcode/19.html#19-n","text":"\u96be\u5ea6\uff1a \u4e2d\u7b49","title":"19. \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9"},{"location":"coding/leetcode/19.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c n \u4e2a\u8282\u70b9\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002 \u793a\u4f8b\uff1a `` \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868: 1->2->3->4->5, \u548c n = 2. \u5f53\u5220\u9664\u4e86\u5012\u6570\u7b2c\u4e8c\u4e2a\u8282\u70b9\u540e\uff0c\u94fe\u8868\u53d8\u4e3a 1->2->3->5. `` \u8bf4\u660e\uff1a \u7ed9\u5b9a\u7684 n \u4fdd\u8bc1\u662f\u6709\u6548\u7684\u3002 \u8fdb\u9636\uff1a \u4f60\u80fd\u5c1d\u8bd5\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b9e\u73b0\u5417\uff1f Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/19.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5148\u627e\u5230\u5012\u6570\u7b2c n \u4e2a\u8282\u70b9\uff0c\u518d\u8fdb\u884c\u5220\u9664 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for singly-linked list. * struct ListNode { * int val; * struct ListNode *next; * }; */ struct ListNode * removeNthFromEnd ( struct ListNode * head , int n ){ struct ListNode * cur = head , * temp = NULL ; int length = 1 , i = 0 ; while ( cur -> next != NULL ) { cur = cur -> next ; length ++ ; } cur = head ; for ( i = 0 ; i < length - n - 1 ; i ++ ) cur = cur -> next ; if ( n == length ) return cur -> next ; if ( cur -> next ) { cur -> next = cur -> next -> next ; return head ; } return NULL ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/198.html","text":"198. \u6253\u5bb6\u52ab\u820d \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u4f60\u662f\u4e00\u4e2a\u4e13\u4e1a\u7684\u5c0f\u5077\uff0c\u8ba1\u5212\u5077\u7a83\u6cbf\u8857\u7684\u623f\u5c4b\u3002\u6bcf\u95f4\u623f\u5185\u90fd\u85cf\u6709\u4e00\u5b9a\u7684\u73b0\u91d1\uff0c\u5f71\u54cd\u4f60\u5077\u7a83\u7684\u552f\u4e00\u5236\u7ea6\u56e0\u7d20\u5c31\u662f\u76f8\u90bb\u7684\u623f\u5c4b\u88c5\u6709\u76f8\u4e92\u8fde\u901a\u7684\u9632\u76d7\u7cfb\u7edf\uff0c\u5982\u679c\u4e24\u95f4\u76f8\u90bb\u7684\u623f\u5c4b\u5728\u540c\u4e00\u665a\u4e0a\u88ab\u5c0f\u5077\u95ef\u5165\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u62a5\u8b66\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u4ee3\u8868\u6bcf\u4e2a\u623f\u5c4b\u5b58\u653e\u91d1\u989d\u7684\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u8ba1\u7b97\u4f60 \u4e0d\u89e6\u52a8\u8b66\u62a5\u88c5\u7f6e\u7684\u60c5\u51b5\u4e0b \uff0c\u4e00\u591c\u4e4b\u5185\u80fd\u591f\u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a[1,2,3,1] \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u5077\u7a83 1 \u53f7\u623f\u5c4b (\u91d1\u989d = 1) \uff0c\u7136\u540e\u5077\u7a83 3 \u53f7\u623f\u5c4b (\u91d1\u989d = 3)\u3002 \u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d = 1 + 3 = 4 \u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a[2,7,9,3,1] \u8f93\u51fa\uff1a12 \u89e3\u91ca\uff1a\u5077\u7a83 1 \u53f7\u623f\u5c4b (\u91d1\u989d = 2), \u5077\u7a83 3 \u53f7\u623f\u5c4b (\u91d1\u989d = 9)\uff0c\u63a5\u7740\u5077\u7a83 5 \u53f7\u623f\u5c4b (\u91d1\u989d = 1)\u3002 \u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d = 2 + 9 + 1 = 12 \u3002 \u63d0\u793a\uff1a 0 <= nums.length <= 100 0 <= nums[i] <= 400 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u52a8\u6001\u89c4\u5212\uff0c\u4ee4 f(i) f(i) \u8868\u793a\u524d i i \u4e2a\u623f\u95f4\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u91d1\u989d\uff0c\u5219\u6709\uff1a f(i + 1) = \\max\\left\\{f(i), a_{i + 1} + f(i - 1)\\right\\} f(i + 1) = \\max\\left\\{f(i), a_{i + 1} + f(i - 1)\\right\\} \u4ee3\u7801\u5982\u4e0b\uff1a #define MAX(x, y) (x > y ? x : y) int rob ( int * nums , int numsSize ){ if ( numsSize < 2 ) return numsSize ? * nums : 0 ; int * dp = ( int * ) memset ( malloc ( sizeof ( int ) * ( numsSize )), 0 , sizeof ( int ) * ( numsSize )), i = 0 ; dp [ 0 ] = * nums ; dp [ 1 ] = MAX ( nums [ 0 ], nums [ 1 ]); for ( i = 2 ; i < numsSize ; i ++ ) dp [ i ] = MAX ( dp [ i -2 ] + nums [ i ], dp [ i -1 ]); return dp [ numsSize -1 ]; }","title":"198. \u6253\u5bb6\u52ab\u820d"},{"location":"coding/leetcode/198.html#198","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"198. \u6253\u5bb6\u52ab\u820d"},{"location":"coding/leetcode/198.html#_1","text":"\u4f60\u662f\u4e00\u4e2a\u4e13\u4e1a\u7684\u5c0f\u5077\uff0c\u8ba1\u5212\u5077\u7a83\u6cbf\u8857\u7684\u623f\u5c4b\u3002\u6bcf\u95f4\u623f\u5185\u90fd\u85cf\u6709\u4e00\u5b9a\u7684\u73b0\u91d1\uff0c\u5f71\u54cd\u4f60\u5077\u7a83\u7684\u552f\u4e00\u5236\u7ea6\u56e0\u7d20\u5c31\u662f\u76f8\u90bb\u7684\u623f\u5c4b\u88c5\u6709\u76f8\u4e92\u8fde\u901a\u7684\u9632\u76d7\u7cfb\u7edf\uff0c\u5982\u679c\u4e24\u95f4\u76f8\u90bb\u7684\u623f\u5c4b\u5728\u540c\u4e00\u665a\u4e0a\u88ab\u5c0f\u5077\u95ef\u5165\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u62a5\u8b66\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u4ee3\u8868\u6bcf\u4e2a\u623f\u5c4b\u5b58\u653e\u91d1\u989d\u7684\u975e\u8d1f\u6574\u6570\u6570\u7ec4\uff0c\u8ba1\u7b97\u4f60 \u4e0d\u89e6\u52a8\u8b66\u62a5\u88c5\u7f6e\u7684\u60c5\u51b5\u4e0b \uff0c\u4e00\u591c\u4e4b\u5185\u80fd\u591f\u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a[1,2,3,1] \u8f93\u51fa\uff1a4 \u89e3\u91ca\uff1a\u5077\u7a83 1 \u53f7\u623f\u5c4b (\u91d1\u989d = 1) \uff0c\u7136\u540e\u5077\u7a83 3 \u53f7\u623f\u5c4b (\u91d1\u989d = 3)\u3002 \u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d = 1 + 3 = 4 \u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a[2,7,9,3,1] \u8f93\u51fa\uff1a12 \u89e3\u91ca\uff1a\u5077\u7a83 1 \u53f7\u623f\u5c4b (\u91d1\u989d = 2), \u5077\u7a83 3 \u53f7\u623f\u5c4b (\u91d1\u989d = 9)\uff0c\u63a5\u7740\u5077\u7a83 5 \u53f7\u623f\u5c4b (\u91d1\u989d = 1)\u3002 \u5077\u7a83\u5230\u7684\u6700\u9ad8\u91d1\u989d = 2 + 9 + 1 = 12 \u3002 \u63d0\u793a\uff1a 0 <= nums.length <= 100 0 <= nums[i] <= 400 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/198.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u52a8\u6001\u89c4\u5212\uff0c\u4ee4 f(i) f(i) \u8868\u793a\u524d i i \u4e2a\u623f\u95f4\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u91d1\u989d\uff0c\u5219\u6709\uff1a f(i + 1) = \\max\\left\\{f(i), a_{i + 1} + f(i - 1)\\right\\} f(i + 1) = \\max\\left\\{f(i), a_{i + 1} + f(i - 1)\\right\\} \u4ee3\u7801\u5982\u4e0b\uff1a #define MAX(x, y) (x > y ? x : y) int rob ( int * nums , int numsSize ){ if ( numsSize < 2 ) return numsSize ? * nums : 0 ; int * dp = ( int * ) memset ( malloc ( sizeof ( int ) * ( numsSize )), 0 , sizeof ( int ) * ( numsSize )), i = 0 ; dp [ 0 ] = * nums ; dp [ 1 ] = MAX ( nums [ 0 ], nums [ 1 ]); for ( i = 2 ; i < numsSize ; i ++ ) dp [ i ] = MAX ( dp [ i -2 ] + nums [ i ], dp [ i -1 ]); return dp [ numsSize -1 ]; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/204.html","text":"204. \u8ba1\u6570\u8d28\u6570 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7edf\u8ba1\u6240\u6709\u5c0f\u4e8e\u975e\u8d1f\u6574\u6570 n \u7684\u8d28\u6570\u7684\u6570\u91cf\u3002 \u793a\u4f8b\uff1a \u8f93\u5165: 10 \u8f93\u51fa: 4 \u89e3\u91ca: \u5c0f\u4e8e 10 \u7684\u8d28\u6570\u4e00\u5171\u6709 4 \u4e2a, \u5b83\u4eec\u662f 2, 3, 5, 7 \u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u4ece2\u5f00\u59cb\uff0c\u5728\u6570\u5217 2, 3, \\cdots, n 2, 3, \\cdots, n \u4e2d\u5212\u53bb\u6240\u67092\u7684\u500d\u6570\uff0c\u5269\u4e0b\u7684\u7b2c\u4e00\u4e2a\u6ca1\u6709\u88ab\u5212\u53bb\u7684\u6570\u5b573\u5373\u4e3a\u8d28\u6570\uff0c\u518d\u82b1\u65d7\u6240\u67093\u7684\u500d\u6570\uff0c\u5269\u4e0b\u7684\u7b2c\u4e00\u4e2a\u6ca1\u6709\u88ab\u5212\u53bb\u7684\u6570\u5b575\u5373\u4e3a\u8d28\u6570\u3002\u91cd\u590d\u5982\u4e0a\u64cd\u4f5c\uff0c\u76f4\u5230\u68c0\u67e5\u5b8c\u6240\u6709\u5c0f\u4e8e\u7b49\u4e8e \\sqrt n \\sqrt n \u7684\u6574\u6570\uff0c\u5373\u5b8c\u6210\u3002 \u6570\u5b57\u662f\u5426\u5212\u53bb\u7684\u72b6\u6001\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u63a7\u5236\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e00\u4e2a\u7c7b\u578b\u4e2d\u76841\u4f4d\u8868\u793a\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int countPrimes ( int n ) { unsigned char * map = memset ( malloc ( sizeof ( unsigned char ) * (( n + 1 >> 3 ) + 1 )), 0x55 , sizeof ( unsigned char ) * (( n + 1 >> 3 ) + 1 )); int i = 0 , j , ret = 0 , sq = ( int ) sqrt ( n ), increment = 1 , start = 2 ; * map = 0x51 ; for ( i = 3 ; i <= sq ; i ++ ) if ( ! ( map [ i >> 3 ] & ( unsigned char ) 1 << ( i & 7 ))) for ( j = i * 3 ; j <= n ; j += i << 1 ) map [ j >> 3 ] |= ( unsigned char ) 1 << ( j & 7 ); for ( i = 2 ; i < n ; i ++ ) if ( ! ( map [ i >> 3 ] & ( unsigned char ) 1 << ( i & 7 ))) ret ++ ; return ret ; }","title":"204. \u8ba1\u6570\u8d28\u6570"},{"location":"coding/leetcode/204.html#204","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"204. \u8ba1\u6570\u8d28\u6570"},{"location":"coding/leetcode/204.html#_1","text":"\u7edf\u8ba1\u6240\u6709\u5c0f\u4e8e\u975e\u8d1f\u6574\u6570 n \u7684\u8d28\u6570\u7684\u6570\u91cf\u3002 \u793a\u4f8b\uff1a \u8f93\u5165: 10 \u8f93\u51fa: 4 \u89e3\u91ca: \u5c0f\u4e8e 10 \u7684\u8d28\u6570\u4e00\u5171\u6709 4 \u4e2a, \u5b83\u4eec\u662f 2, 3, 5, 7 \u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/204.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u4ece2\u5f00\u59cb\uff0c\u5728\u6570\u5217 2, 3, \\cdots, n 2, 3, \\cdots, n \u4e2d\u5212\u53bb\u6240\u67092\u7684\u500d\u6570\uff0c\u5269\u4e0b\u7684\u7b2c\u4e00\u4e2a\u6ca1\u6709\u88ab\u5212\u53bb\u7684\u6570\u5b573\u5373\u4e3a\u8d28\u6570\uff0c\u518d\u82b1\u65d7\u6240\u67093\u7684\u500d\u6570\uff0c\u5269\u4e0b\u7684\u7b2c\u4e00\u4e2a\u6ca1\u6709\u88ab\u5212\u53bb\u7684\u6570\u5b575\u5373\u4e3a\u8d28\u6570\u3002\u91cd\u590d\u5982\u4e0a\u64cd\u4f5c\uff0c\u76f4\u5230\u68c0\u67e5\u5b8c\u6240\u6709\u5c0f\u4e8e\u7b49\u4e8e \\sqrt n \\sqrt n \u7684\u6574\u6570\uff0c\u5373\u5b8c\u6210\u3002 \u6570\u5b57\u662f\u5426\u5212\u53bb\u7684\u72b6\u6001\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u63a7\u5236\uff0c\u4e5f\u53ef\u4ee5\u7528\u4e00\u4e2a\u7c7b\u578b\u4e2d\u76841\u4f4d\u8868\u793a\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int countPrimes ( int n ) { unsigned char * map = memset ( malloc ( sizeof ( unsigned char ) * (( n + 1 >> 3 ) + 1 )), 0x55 , sizeof ( unsigned char ) * (( n + 1 >> 3 ) + 1 )); int i = 0 , j , ret = 0 , sq = ( int ) sqrt ( n ), increment = 1 , start = 2 ; * map = 0x51 ; for ( i = 3 ; i <= sq ; i ++ ) if ( ! ( map [ i >> 3 ] & ( unsigned char ) 1 << ( i & 7 ))) for ( j = i * 3 ; j <= n ; j += i << 1 ) map [ j >> 3 ] |= ( unsigned char ) 1 << ( j & 7 ); for ( i = 2 ; i < n ; i ++ ) if ( ! ( map [ i >> 3 ] & ( unsigned char ) 1 << ( i & 7 ))) ret ++ ; return ret ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/206.html","text":"206. \u53cd\u8f6c\u94fe\u8868 \u00b6 \u96be\u5ea6\uff1a \u4e2d\u7b49 \u9898\u76ee \u00b6 \u53cd\u8f6c\u4e00\u4e2a\u5355\u94fe\u8868\u3002 \u793a\u4f8b\uff1a \u8f93\u5165: 1->2->3->4->5->NULL \u8f93\u51fa: 5->4->3->2->1->NULL \u8fdb\u9636\uff1a \u4f60\u53ef\u4ee5\u8fed\u4ee3\u6216\u9012\u5f52\u5730\u53cd\u8f6c\u94fe\u8868\u3002\u4f60\u80fd\u5426\u7528\u4e24\u79cd\u65b9\u6cd5\u89e3\u51b3\u8fd9\u9053\u9898\uff1f Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u53ea\u9700\u8981\u5c06\u94fe\u8868\u7ed3\u6784\u4e2d\u7684\u6240\u6709\u6307\u9488\u53cd\u8f6c\uff0c\u5373\u6307\u5411\u524d\u4e00\u8282\u70b9\u7684\u6307\u9488\u73b0\u5728\u6307\u5411\u540e\u4e00\u8282\u70b9\u3002\u5b9a\u4e49\u4e24\u4e2a\u6307\u9488\u6307\u5411\u9700\u8981\u53cd\u8f6c\u90e8\u5206\u7684\u4e24\u4e2a\u8282\u70b9\uff0c\u5c06\u540e\u4e00\u6307\u9488\u7684 next \u57df\u6307\u5411\u524d\u4e00\u6307\u9488\u3002\u6539\u53cd\u8f6c\u64cd\u4f5c\u7834\u574f\u4e86\u540e\u4e00\u6307\u9488\u539f\u6709\u7684 next \u57df\uff0c\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684\u6307\u9488\u7528\u4e8e\u5411\u524d\u79fb\u52a8\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for singly-linked list. * struct ListNode { * int val; * struct ListNode *next; * }; */ struct ListNode * reverseList ( struct ListNode * head ){ if ( ! head || ! ( head -> next )) return head ; struct ListNode * cur1 = head , * cur2 = head -> next , * cur3 = cur2 -> next ; head -> next = NULL ; while ( cur3 ) { cur2 -> next = cur1 ; cur1 = cur2 ; cur2 = cur3 ; cur3 = cur3 -> next ; } cur2 -> next = cur1 ; return cur2 ; }","title":"206. \u53cd\u8f6c\u94fe\u8868"},{"location":"coding/leetcode/206.html#206","text":"\u96be\u5ea6\uff1a \u4e2d\u7b49","title":"206. \u53cd\u8f6c\u94fe\u8868"},{"location":"coding/leetcode/206.html#_1","text":"\u53cd\u8f6c\u4e00\u4e2a\u5355\u94fe\u8868\u3002 \u793a\u4f8b\uff1a \u8f93\u5165: 1->2->3->4->5->NULL \u8f93\u51fa: 5->4->3->2->1->NULL \u8fdb\u9636\uff1a \u4f60\u53ef\u4ee5\u8fed\u4ee3\u6216\u9012\u5f52\u5730\u53cd\u8f6c\u94fe\u8868\u3002\u4f60\u80fd\u5426\u7528\u4e24\u79cd\u65b9\u6cd5\u89e3\u51b3\u8fd9\u9053\u9898\uff1f Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/206.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u53ea\u9700\u8981\u5c06\u94fe\u8868\u7ed3\u6784\u4e2d\u7684\u6240\u6709\u6307\u9488\u53cd\u8f6c\uff0c\u5373\u6307\u5411\u524d\u4e00\u8282\u70b9\u7684\u6307\u9488\u73b0\u5728\u6307\u5411\u540e\u4e00\u8282\u70b9\u3002\u5b9a\u4e49\u4e24\u4e2a\u6307\u9488\u6307\u5411\u9700\u8981\u53cd\u8f6c\u90e8\u5206\u7684\u4e24\u4e2a\u8282\u70b9\uff0c\u5c06\u540e\u4e00\u6307\u9488\u7684 next \u57df\u6307\u5411\u524d\u4e00\u6307\u9488\u3002\u6539\u53cd\u8f6c\u64cd\u4f5c\u7834\u574f\u4e86\u540e\u4e00\u6307\u9488\u539f\u6709\u7684 next \u57df\uff0c\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684\u6307\u9488\u7528\u4e8e\u5411\u524d\u79fb\u52a8\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for singly-linked list. * struct ListNode { * int val; * struct ListNode *next; * }; */ struct ListNode * reverseList ( struct ListNode * head ){ if ( ! head || ! ( head -> next )) return head ; struct ListNode * cur1 = head , * cur2 = head -> next , * cur3 = cur2 -> next ; head -> next = NULL ; while ( cur3 ) { cur2 -> next = cur1 ; cur1 = cur2 ; cur2 = cur3 ; cur3 = cur3 -> next ; } cur2 -> next = cur1 ; return cur2 ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/21.html","text":"21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u5c06\u4e24\u4e2a\u5347\u5e8f\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684 \u5347\u5e8f \u94fe\u8868\u5e76\u8fd4\u56de\u3002\u65b0\u94fe\u8868\u662f\u901a\u8fc7\u62fc\u63a5\u7ed9\u5b9a\u7684\u4e24\u4e2a\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u7ec4\u6210\u7684\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a1->2->4, 1->3->4 \u8f93\u51fa\uff1a1->1->2->3->4->4 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u6bd4\u8f83\u4e24\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9\uff0c\u5c06\u66f4\u5c0f\u7684\u8282\u70b9\u5e76\u5165\u7ed3\u679c\u94fe\u8868\u4e2d\uff0c\u540c\u65f6\u94fe\u8868\u5934\u540e\u79fb\uff0c\u9012\u5f52\u5904\u7406\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for singly-linked list. * struct ListNode { * int val; * struct ListNode *next; * }; */ struct ListNode * mergeTwoLists ( struct ListNode * l1 , struct ListNode * l2 ){ if ( ! l1 ) return l2 ; if ( ! l2 ) return l1 ; if ( l1 -> val < l2 -> val ) { l1 -> next = mergeTwoLists ( l1 -> next , l2 ); return l1 ; } else { l2 -> next = mergeTwoLists ( l1 , l2 -> next ); return l2 ; } }","title":"21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868"},{"location":"coding/leetcode/21.html#21","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"21. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u94fe\u8868"},{"location":"coding/leetcode/21.html#_1","text":"\u5c06\u4e24\u4e2a\u5347\u5e8f\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684 \u5347\u5e8f \u94fe\u8868\u5e76\u8fd4\u56de\u3002\u65b0\u94fe\u8868\u662f\u901a\u8fc7\u62fc\u63a5\u7ed9\u5b9a\u7684\u4e24\u4e2a\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u7ec4\u6210\u7684\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1a1->2->4, 1->3->4 \u8f93\u51fa\uff1a1->1->2->3->4->4 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/21.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u6bd4\u8f83\u4e24\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9\uff0c\u5c06\u66f4\u5c0f\u7684\u8282\u70b9\u5e76\u5165\u7ed3\u679c\u94fe\u8868\u4e2d\uff0c\u540c\u65f6\u94fe\u8868\u5934\u540e\u79fb\uff0c\u9012\u5f52\u5904\u7406\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for singly-linked list. * struct ListNode { * int val; * struct ListNode *next; * }; */ struct ListNode * mergeTwoLists ( struct ListNode * l1 , struct ListNode * l2 ){ if ( ! l1 ) return l2 ; if ( ! l2 ) return l1 ; if ( l1 -> val < l2 -> val ) { l1 -> next = mergeTwoLists ( l1 -> next , l2 ); return l1 ; } else { l2 -> next = mergeTwoLists ( l1 , l2 -> next ); return l2 ; } }","title":"\u9898\u89e3"},{"location":"coding/leetcode/217.html","text":"217. \u5b58\u5728\u91cd\u590d\u5143\u7d20 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u91cd\u590d\u5143\u7d20\u3002 \u5982\u679c\u4efb\u610f\u4e00\u503c\u5728\u6570\u7ec4\u4e2d\u51fa\u73b0\u81f3\u5c11\u4e24\u6b21\uff0c\u51fd\u6570\u8fd4\u56de true \u3002\u5982\u679c\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4e0d\u76f8\u540c\uff0c\u5219\u8fd4\u56de false \u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [1,2,3,1] \u8f93\u51fa: true \u793a\u4f8b 2\uff1a \u8f93\u5165: [1,2,3,4] \u8f93\u51fa: false \u793a\u4f8b 3\uff1a \u8f93\u5165: [1,1,1,3,3,4,3,2,4,2] \u8f93\u51fa: true Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5c06\u6570\u7ec4\u6392\u5e8f\u540e\u68c0\u67e5\u662f\u5426\u6709\u91cd\u590d\u5143\u7d20\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int comp ( const void * a , const void * b ) { return * ( int * ) a - * ( int * ) b ; } bool containsDuplicate ( int * nums , int numsSize ){ if ( numsSize < 2 ) return false ; qsort ( nums , numsSize , sizeof ( int ), comp ); int i = 0 ; for ( i = 1 ; i < numsSize ; i ++ ) if ( nums [ i ] == nums [ i - 1 ]) return true ; return false ; }","title":"217. \u5b58\u5728\u91cd\u590d\u5143\u7d20"},{"location":"coding/leetcode/217.html#217","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"217. \u5b58\u5728\u91cd\u590d\u5143\u7d20"},{"location":"coding/leetcode/217.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u5224\u65ad\u662f\u5426\u5b58\u5728\u91cd\u590d\u5143\u7d20\u3002 \u5982\u679c\u4efb\u610f\u4e00\u503c\u5728\u6570\u7ec4\u4e2d\u51fa\u73b0\u81f3\u5c11\u4e24\u6b21\uff0c\u51fd\u6570\u8fd4\u56de true \u3002\u5982\u679c\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4e0d\u76f8\u540c\uff0c\u5219\u8fd4\u56de false \u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [1,2,3,1] \u8f93\u51fa: true \u793a\u4f8b 2\uff1a \u8f93\u5165: [1,2,3,4] \u8f93\u51fa: false \u793a\u4f8b 3\uff1a \u8f93\u5165: [1,1,1,3,3,4,3,2,4,2] \u8f93\u51fa: true Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/217.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5c06\u6570\u7ec4\u6392\u5e8f\u540e\u68c0\u67e5\u662f\u5426\u6709\u91cd\u590d\u5143\u7d20\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int comp ( const void * a , const void * b ) { return * ( int * ) a - * ( int * ) b ; } bool containsDuplicate ( int * nums , int numsSize ){ if ( numsSize < 2 ) return false ; qsort ( nums , numsSize , sizeof ( int ), comp ); int i = 0 ; for ( i = 1 ; i < numsSize ; i ++ ) if ( nums [ i ] == nums [ i - 1 ]) return true ; return false ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/234.html","text":"234. \u56de\u6587\u94fe\u8868 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u8bf7\u5224\u65ad\u4e00\u4e2a\u94fe\u8868\u662f\u5426\u4e3a\u56de\u6587\u94fe\u8868\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 1->2 \u8f93\u51fa: false \u793a\u4f8b 2\uff1a \u8f93\u5165: 1->2->2->1 \u8f93\u51fa: true \u8fdb\u9636\uff1a \u4f60\u80fd\u5426\u7528 O(n) O(n) \u65f6\u95f4\u590d\u6742\u5ea6\u548c O(1) O(1) \u7a7a\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u6b64\u9898\uff1f Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u53cd\u5e8f\u6784\u5efa\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\uff0c\u6bd4\u8f83\u4e24\u4e2a\u94fe\u8868\u662f\u5426\u76f8\u540c \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for singly-linked list. * struct ListNode { * int val; * struct ListNode *next; * }; */ struct ListNode * getNode ( int val , struct ListNode * next ) { struct ListNode * ret = ( struct ListNode * ) malloc ( sizeof ( struct ListNode )); ret -> val = val ; ret -> next = next ; return ret ; } bool isPalindrome ( struct ListNode * head ){ int len = 0 ; struct ListNode * reversed = NULL , * cur1 = head , * cur2 = NULL ; while ( cur1 != NULL ) { reversed = getNode ( cur1 -> val , reversed ); cur1 = cur1 -> next ; len ++ ; } cur1 = head ; cur2 = reversed ; for ( int i = 0 ; i < len / 2 ; i ++ ) { if ( cur1 -> val != cur2 -> val ) return false ; cur1 = cur1 -> next ; cur2 = cur2 -> next ; } return true ; }","title":"234. \u56de\u6587\u94fe\u8868"},{"location":"coding/leetcode/234.html#234","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"234. \u56de\u6587\u94fe\u8868"},{"location":"coding/leetcode/234.html#_1","text":"\u8bf7\u5224\u65ad\u4e00\u4e2a\u94fe\u8868\u662f\u5426\u4e3a\u56de\u6587\u94fe\u8868\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 1->2 \u8f93\u51fa: false \u793a\u4f8b 2\uff1a \u8f93\u5165: 1->2->2->1 \u8f93\u51fa: true \u8fdb\u9636\uff1a \u4f60\u80fd\u5426\u7528 O(n) O(n) \u65f6\u95f4\u590d\u6742\u5ea6\u548c O(1) O(1) \u7a7a\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u6b64\u9898\uff1f Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/234.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u53cd\u5e8f\u6784\u5efa\u4e00\u4e2a\u65b0\u7684\u94fe\u8868\uff0c\u6bd4\u8f83\u4e24\u4e2a\u94fe\u8868\u662f\u5426\u76f8\u540c \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for singly-linked list. * struct ListNode { * int val; * struct ListNode *next; * }; */ struct ListNode * getNode ( int val , struct ListNode * next ) { struct ListNode * ret = ( struct ListNode * ) malloc ( sizeof ( struct ListNode )); ret -> val = val ; ret -> next = next ; return ret ; } bool isPalindrome ( struct ListNode * head ){ int len = 0 ; struct ListNode * reversed = NULL , * cur1 = head , * cur2 = NULL ; while ( cur1 != NULL ) { reversed = getNode ( cur1 -> val , reversed ); cur1 = cur1 -> next ; len ++ ; } cur1 = head ; cur2 = reversed ; for ( int i = 0 ; i < len / 2 ; i ++ ) { if ( cur1 -> val != cur2 -> val ) return false ; cur1 = cur1 -> next ; cur2 = cur2 -> next ; } return true ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/237.html","text":"237. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u8bf7\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u4f7f\u5176\u53ef\u4ee5\u5220\u9664\u67d0\u4e2a\u94fe\u8868\u4e2d\u7ed9\u5b9a\u7684\uff08\u975e\u672b\u5c3e\uff09\u8282\u70b9\u3002\u4f20\u5165\u51fd\u6570\u7684\u552f\u4e00\u53c2\u6570\u4e3a \u8981\u88ab\u5220\u9664\u7684\u8282\u70b9 \u3002 \u73b0\u6709\u4e00\u4e2a\u94fe\u8868 -- head = [4,5,1,9]\uff0c\u5b83\u53ef\u4ee5\u8868\u793a\u4e3a: \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1ahead = [4,5,1,9], node = 5 \u8f93\u51fa\uff1a[4,1,9] \u89e3\u91ca\uff1a\u7ed9\u5b9a\u4f60\u94fe\u8868\u4e2d\u503c\u4e3a 5 \u7684\u7b2c\u4e8c\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5728\u8c03\u7528\u4e86\u4f60\u7684\u51fd\u6570\u4e4b\u540e\uff0c\u8be5\u94fe\u8868\u5e94\u53d8\u4e3a 4 -> 1 -> 9. \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1ahead = [4,5,1,9], node = 1 \u8f93\u51fa\uff1a[4,5,9] \u89e3\u91ca\uff1a\u7ed9\u5b9a\u4f60\u94fe\u8868\u4e2d\u503c\u4e3a 1 \u7684\u7b2c\u4e09\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5728\u8c03\u7528\u4e86\u4f60\u7684\u51fd\u6570\u4e4b\u540e\uff0c\u8be5\u94fe\u8868\u5e94\u53d8\u4e3a 4 -> 5 -> 9. \u63d0\u793a\uff1a \u94fe\u8868\u81f3\u5c11\u5305\u542b\u4e24\u4e2a\u8282\u70b9\u3002 \u94fe\u8868\u4e2d\u6240\u6709\u8282\u70b9\u7684\u503c\u90fd\u662f\u552f\u4e00\u7684\u3002 \u7ed9\u5b9a\u7684\u8282\u70b9\u4e3a\u975e\u672b\u5c3e\u8282\u70b9\u5e76\u4e14\u4e00\u5b9a\u662f\u94fe\u8868\u4e2d\u7684\u4e00\u4e2a\u6709\u6548\u8282\u70b9\u3002 \u4e0d\u8981\u4ece\u4f60\u7684\u51fd\u6570\u4e2d\u8fd4\u56de\u4efb\u4f55\u7ed3\u679c\u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5c06\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u503c\u590d\u5236\u5230\u5f53\u524d\u8282\u70b9\uff0c\u7136\u540e\u5220\u53bb\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002\uff08\u5df2\u77e5\u5f53\u524d\u8282\u70b9\u4e00\u5b9a\u4e0d\u662f\u672b\u5c3e\u8282\u70b9\uff09 \u4ee3\u7801\u5982\u4e0b\uff1a void deleteNode ( struct ListNode * node ) { node -> val = node -> next -> val ; node -> next = node -> next -> next ; }","title":"237. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9"},{"location":"coding/leetcode/237.html#237","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"237. \u5220\u9664\u94fe\u8868\u4e2d\u7684\u8282\u70b9"},{"location":"coding/leetcode/237.html#_1","text":"\u8bf7\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u4f7f\u5176\u53ef\u4ee5\u5220\u9664\u67d0\u4e2a\u94fe\u8868\u4e2d\u7ed9\u5b9a\u7684\uff08\u975e\u672b\u5c3e\uff09\u8282\u70b9\u3002\u4f20\u5165\u51fd\u6570\u7684\u552f\u4e00\u53c2\u6570\u4e3a \u8981\u88ab\u5220\u9664\u7684\u8282\u70b9 \u3002 \u73b0\u6709\u4e00\u4e2a\u94fe\u8868 -- head = [4,5,1,9]\uff0c\u5b83\u53ef\u4ee5\u8868\u793a\u4e3a: \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1ahead = [4,5,1,9], node = 5 \u8f93\u51fa\uff1a[4,1,9] \u89e3\u91ca\uff1a\u7ed9\u5b9a\u4f60\u94fe\u8868\u4e2d\u503c\u4e3a 5 \u7684\u7b2c\u4e8c\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5728\u8c03\u7528\u4e86\u4f60\u7684\u51fd\u6570\u4e4b\u540e\uff0c\u8be5\u94fe\u8868\u5e94\u53d8\u4e3a 4 -> 1 -> 9. \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1ahead = [4,5,1,9], node = 1 \u8f93\u51fa\uff1a[4,5,9] \u89e3\u91ca\uff1a\u7ed9\u5b9a\u4f60\u94fe\u8868\u4e2d\u503c\u4e3a 1 \u7684\u7b2c\u4e09\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u5728\u8c03\u7528\u4e86\u4f60\u7684\u51fd\u6570\u4e4b\u540e\uff0c\u8be5\u94fe\u8868\u5e94\u53d8\u4e3a 4 -> 5 -> 9. \u63d0\u793a\uff1a \u94fe\u8868\u81f3\u5c11\u5305\u542b\u4e24\u4e2a\u8282\u70b9\u3002 \u94fe\u8868\u4e2d\u6240\u6709\u8282\u70b9\u7684\u503c\u90fd\u662f\u552f\u4e00\u7684\u3002 \u7ed9\u5b9a\u7684\u8282\u70b9\u4e3a\u975e\u672b\u5c3e\u8282\u70b9\u5e76\u4e14\u4e00\u5b9a\u662f\u94fe\u8868\u4e2d\u7684\u4e00\u4e2a\u6709\u6548\u8282\u70b9\u3002 \u4e0d\u8981\u4ece\u4f60\u7684\u51fd\u6570\u4e2d\u8fd4\u56de\u4efb\u4f55\u7ed3\u679c\u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/237.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5c06\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u503c\u590d\u5236\u5230\u5f53\u524d\u8282\u70b9\uff0c\u7136\u540e\u5220\u53bb\u4e0b\u4e00\u4e2a\u8282\u70b9\u3002\uff08\u5df2\u77e5\u5f53\u524d\u8282\u70b9\u4e00\u5b9a\u4e0d\u662f\u672b\u5c3e\u8282\u70b9\uff09 \u4ee3\u7801\u5982\u4e0b\uff1a void deleteNode ( struct ListNode * node ) { node -> val = node -> next -> val ; node -> next = node -> next -> next ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/24.html","text":"24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9 \u00b6 \u96be\u5ea6\uff1a \u4e2d\u7b49 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u4e24\u4e24\u4ea4\u6362\u5176\u4e2d\u76f8\u90bb\u7684\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u4ea4\u6362\u540e\u7684\u94fe\u8868\u3002 \u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002 \u793a\u4f8b\uff1a \u7ed9\u5b9a 1->2->3->4, \u4f60\u5e94\u8be5\u8fd4\u56de 2->1->4->3. Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5148\u4ea4\u6362\u524d\u4e24\u4e2a\u8282\u70b9\uff0c\u518d\u9012\u5f52\u5904\u7406\u540e\u9762\u7684\u8282\u70b9\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for singly-linked list. * struct ListNode { * int val; * struct ListNode *next; * }; */ struct ListNode * swapPairs ( struct ListNode * head ){ if ( ! head || ! ( head -> next )) return head ; struct ListNode * temp1 = head -> next , * temp2 = temp1 -> next ; temp1 -> next = head ; head -> next = swapPairs ( temp2 ); return temp1 ; }","title":"24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9"},{"location":"coding/leetcode/24.html#24","text":"\u96be\u5ea6\uff1a \u4e2d\u7b49","title":"24. \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9"},{"location":"coding/leetcode/24.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u4e24\u4e24\u4ea4\u6362\u5176\u4e2d\u76f8\u90bb\u7684\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u4ea4\u6362\u540e\u7684\u94fe\u8868\u3002 \u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002 \u793a\u4f8b\uff1a \u7ed9\u5b9a 1->2->3->4, \u4f60\u5e94\u8be5\u8fd4\u56de 2->1->4->3. Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/24.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5148\u4ea4\u6362\u524d\u4e24\u4e2a\u8282\u70b9\uff0c\u518d\u9012\u5f52\u5904\u7406\u540e\u9762\u7684\u8282\u70b9\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for singly-linked list. * struct ListNode { * int val; * struct ListNode *next; * }; */ struct ListNode * swapPairs ( struct ListNode * head ){ if ( ! head || ! ( head -> next )) return head ; struct ListNode * temp1 = head -> next , * temp2 = temp1 -> next ; temp1 -> next = head ; head -> next = swapPairs ( temp2 ); return temp1 ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/242.html","text":"242. \u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 s \u548c t \uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad t \u662f\u5426\u662f s \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: s = \"anagram\", t = \"nagaram\" \u8f93\u51fa: true \u793a\u4f8b 2\uff1a \u8f93\u5165: s = \"rat\", t = \"car\" \u8f93\u51fa: false \u8bf4\u660e\uff1a \u4f60\u53ef\u4ee5\u5047\u8bbe\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002 \u8fdb\u9636\uff1a \u5982\u679c\u8f93\u5165\u5b57\u7b26\u4e32\u5305\u542b unicode \u5b57\u7b26\u600e\u4e48\u529e\uff1f\u4f60\u80fd\u5426\u8c03\u6574\u4f60\u7684\u89e3\u6cd5\u6765\u5e94\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff1f Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u7edf\u8ba1\u5e76\u6bd4\u8f83\u4e24\u4e2a\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u5404\u5b57\u7b26\u7684\u51fa\u73b0\u6b21\u6570\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a bool isAnagram ( char * s , char * t ){ int hashMap1 [ 26 ] = { 0 }, hashMap2 [ 26 ] = { 0 }; char * cur = s ; while ( * cur ) { hashMap1 [ * cur - 'a' ] ++ ; cur ++ ; } cur = t ; while ( * cur ) { hashMap2 [ * cur - 'a' ] ++ ; cur ++ ; } int i = 0 ; for ( i = 0 ; i < 26 ; i ++ ) if ( hashMap1 [ i ] != hashMap2 [ i ]) return false ; return true ; }","title":"242. \u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd"},{"location":"coding/leetcode/242.html#242","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"242. \u6709\u6548\u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd"},{"location":"coding/leetcode/242.html#_1","text":"\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32 s \u548c t \uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u5224\u65ad t \u662f\u5426\u662f s \u7684\u5b57\u6bcd\u5f02\u4f4d\u8bcd\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: s = \"anagram\", t = \"nagaram\" \u8f93\u51fa: true \u793a\u4f8b 2\uff1a \u8f93\u5165: s = \"rat\", t = \"car\" \u8f93\u51fa: false \u8bf4\u660e\uff1a \u4f60\u53ef\u4ee5\u5047\u8bbe\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002 \u8fdb\u9636\uff1a \u5982\u679c\u8f93\u5165\u5b57\u7b26\u4e32\u5305\u542b unicode \u5b57\u7b26\u600e\u4e48\u529e\uff1f\u4f60\u80fd\u5426\u8c03\u6574\u4f60\u7684\u89e3\u6cd5\u6765\u5e94\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff1f Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/242.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u7edf\u8ba1\u5e76\u6bd4\u8f83\u4e24\u4e2a\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u5404\u5b57\u7b26\u7684\u51fa\u73b0\u6b21\u6570\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a bool isAnagram ( char * s , char * t ){ int hashMap1 [ 26 ] = { 0 }, hashMap2 [ 26 ] = { 0 }; char * cur = s ; while ( * cur ) { hashMap1 [ * cur - 'a' ] ++ ; cur ++ ; } cur = t ; while ( * cur ) { hashMap2 [ * cur - 'a' ] ++ ; cur ++ ; } int i = 0 ; for ( i = 0 ; i < 26 ; i ++ ) if ( hashMap1 [ i ] != hashMap2 [ i ]) return false ; return true ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/26.html","text":"26. \u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5728 \u539f\u5730 \u5220\u9664\u91cd\u590d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002 \u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728 \u539f\u5730 \u4fee\u6539\u8f93\u5165\u6570\u7ec4 \u5e76\u5728\u4f7f\u7528 O(1) O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002 \u793a\u4f8b 1\uff1a \u7ed9\u5b9a\u6570\u7ec4 nums = [1,1,2], \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 2, \u5e76\u4e14\u539f\u6570\u7ec4 nums \u7684\u524d\u4e24\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a 1, 2\u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u793a\u4f8b 2\uff1a \u7ed9\u5b9a nums = [0,0,1,1,1,2,2,3,3,4], \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 5, \u5e76\u4e14\u539f\u6570\u7ec4 nums \u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a 0, 1, 2, 3, 4\u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u8bf4\u660e\uff1a \u4e3a\u4ec0\u4e48\u8fd4\u56de\u6570\u503c\u662f\u6574\u6570\uff0c\u4f46\u8f93\u51fa\u7684\u7b54\u6848\u662f\u6570\u7ec4\u5462? \u8bf7\u6ce8\u610f\uff0c\u8f93\u5165\u6570\u7ec4\u662f\u4ee5 \u300c\u5f15\u7528\u300d \u65b9\u5f0f\u4f20\u9012\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002 \u4f60\u53ef\u4ee5\u60f3\u8c61\u5185\u90e8\u64cd\u4f5c\u5982\u4e0b: // nums \u662f\u4ee5\u201c\u5f15\u7528\u201d\u65b9\u5f0f\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5bf9\u5b9e\u53c2\u505a\u4efb\u4f55\u62f7\u8d1d int len = removeDuplicates(nums); // \u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002 // \u6839\u636e\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u7684\u957f\u5ea6, \u5b83\u4f1a\u6253\u5370\u51fa\u6570\u7ec4\u4e2d\u8be5\u957f\u5ea6\u8303\u56f4\u5185\u7684\u6240\u6709\u5143\u7d20\u3002 for (int i = 0; i < len; i++) { print(nums[i]); } Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5f53\u6570\u7ec4\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u4e0d\u5b58\u5728\u91cd\u590d\u5143\u7d20\uff1b \u4f7f\u7528\u4e00\u4e2a\u6307\u9488\u5206\u522b\u6307\u5411\u5220\u9664\u91cd\u590d\u503c\u540e\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\uff0c\u53e6\u4e00\u4e2a\u6570\u503c\u8868\u793a\u5220\u53bb\u5143\u7d20\u7684\u4e2a\u6570\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int removeDuplicates ( int * nums , int numsSize ){ if ( numsSize < 2 ) return numsSize ; int steps = 0 , i = 0 ; while ( i < numsSize - steps - 1 ) { if ( steps ) nums [ i + 1 ] = nums [ i + steps + 1 ]; if ( nums [ i ] == nums [ i + steps + 1 ]) steps ++ ; else i ++ ; } return numsSize - steps ; }","title":"26. \u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879"},{"location":"coding/leetcode/26.html#26","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"26. \u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879"},{"location":"coding/leetcode/26.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5728 \u539f\u5730 \u5220\u9664\u91cd\u590d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002 \u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728 \u539f\u5730 \u4fee\u6539\u8f93\u5165\u6570\u7ec4 \u5e76\u5728\u4f7f\u7528 O(1) O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002 \u793a\u4f8b 1\uff1a \u7ed9\u5b9a\u6570\u7ec4 nums = [1,1,2], \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 2, \u5e76\u4e14\u539f\u6570\u7ec4 nums \u7684\u524d\u4e24\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a 1, 2\u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u793a\u4f8b 2\uff1a \u7ed9\u5b9a nums = [0,0,1,1,1,2,2,3,3,4], \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 5, \u5e76\u4e14\u539f\u6570\u7ec4 nums \u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a 0, 1, 2, 3, 4\u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u8bf4\u660e\uff1a \u4e3a\u4ec0\u4e48\u8fd4\u56de\u6570\u503c\u662f\u6574\u6570\uff0c\u4f46\u8f93\u51fa\u7684\u7b54\u6848\u662f\u6570\u7ec4\u5462? \u8bf7\u6ce8\u610f\uff0c\u8f93\u5165\u6570\u7ec4\u662f\u4ee5 \u300c\u5f15\u7528\u300d \u65b9\u5f0f\u4f20\u9012\u7684\uff0c\u8fd9\u610f\u5473\u7740\u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002 \u4f60\u53ef\u4ee5\u60f3\u8c61\u5185\u90e8\u64cd\u4f5c\u5982\u4e0b: // nums \u662f\u4ee5\u201c\u5f15\u7528\u201d\u65b9\u5f0f\u4f20\u9012\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5bf9\u5b9e\u53c2\u505a\u4efb\u4f55\u62f7\u8d1d int len = removeDuplicates(nums); // \u5728\u51fd\u6570\u91cc\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u5bf9\u4e8e\u8c03\u7528\u8005\u662f\u53ef\u89c1\u7684\u3002 // \u6839\u636e\u4f60\u7684\u51fd\u6570\u8fd4\u56de\u7684\u957f\u5ea6, \u5b83\u4f1a\u6253\u5370\u51fa\u6570\u7ec4\u4e2d\u8be5\u957f\u5ea6\u8303\u56f4\u5185\u7684\u6240\u6709\u5143\u7d20\u3002 for (int i = 0; i < len; i++) { print(nums[i]); } Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/26.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5f53\u6570\u7ec4\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u65f6\uff0c\u4e0d\u5b58\u5728\u91cd\u590d\u5143\u7d20\uff1b \u4f7f\u7528\u4e00\u4e2a\u6307\u9488\u5206\u522b\u6307\u5411\u5220\u9664\u91cd\u590d\u503c\u540e\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\uff0c\u53e6\u4e00\u4e2a\u6570\u503c\u8868\u793a\u5220\u53bb\u5143\u7d20\u7684\u4e2a\u6570\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int removeDuplicates ( int * nums , int numsSize ){ if ( numsSize < 2 ) return numsSize ; int steps = 0 , i = 0 ; while ( i < numsSize - steps - 1 ) { if ( steps ) nums [ i + 1 ] = nums [ i + steps + 1 ]; if ( nums [ i ] == nums [ i + steps + 1 ]) steps ++ ; else i ++ ; } return numsSize - steps ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/28.html","text":"28. \u5b9e\u73b0 strStr() \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u5b9e\u73b0 strStr() \u51fd\u6570\u3002 \u7ed9\u5b9a\u4e00\u4e2a haystack \u5b57\u7b26\u4e32\u548c\u4e00\u4e2a needle \u5b57\u7b26\u4e32\uff0c\u5728 haystack \u5b57\u7b26\u4e32\u4e2d\u627e\u51fa needle \u5b57\u7b26\u4e32\u51fa\u73b0\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e (\u4ece0\u5f00\u59cb)\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de -1 \u3002 \u793a\u4f8b 1: \u8f93\u5165: haystack = \"hello\", needle = \"ll\" \u8f93\u51fa: 2 \u793a\u4f8b 2: \u8f93\u5165: haystack = \"aaaaa\", needle = \"bba\" \u8f93\u51fa: -1 \u8bf4\u660e: \u5f53 needle \u662f\u7a7a\u5b57\u7b26\u4e32\u65f6\uff0c\u6211\u4eec\u5e94\u5f53\u8fd4\u56de\u4ec0\u4e48\u503c\u5462\uff1f\u8fd9\u662f\u4e00\u4e2a\u5728\u9762\u8bd5\u4e2d\u5f88\u597d\u7684\u95ee\u9898\u3002 \u5bf9\u4e8e\u672c\u9898\u800c\u8a00\uff0c\u5f53 needle \u662f\u7a7a\u5b57\u7b26\u4e32\u65f6\u6211\u4eec\u5e94\u5f53\u8fd4\u56de 0 \u3002\u8fd9\u4e0eC\u8bed\u8a00\u7684 strstr() \u4ee5\u53caJava\u7684 indexOf() \u5b9a\u4e49\u76f8\u7b26\u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u66b4\u529b\u6309\u4f4d\u5339\u914d \u4ee3\u7801\u5982\u4e0b\uff1a int strStr ( char * haystack , char * needle ){ int len1 = strlen ( haystack ), len2 = strlen ( needle ), cur1 = 0 , cur2 = 0 , cur3 = 0 , success = 1 ; if ( ! len2 ) return 0 ; if ( len1 < len2 ) return -1 ; do { success = 1 ; if ( haystack [ cur1 ] == needle [ 0 ]) { cur2 = 0 ; cur3 = 0 ; while ( cur2 < len2 && cur3 + cur1 < len1 && success ) { if ( haystack [ cur1 + cur3 ] != needle [ cur2 ]) success = 0 ; cur3 ++ ; cur2 ++ ; } if ( success ) return cur1 ; } cur1 ++ ; } while ( haystack [ cur1 + len2 - 1 ]); return -1 ; }","title":"28. \u5b9e\u73b0 strStr()"},{"location":"coding/leetcode/28.html#28-strstr","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"28. \u5b9e\u73b0 strStr()"},{"location":"coding/leetcode/28.html#_1","text":"\u5b9e\u73b0 strStr() \u51fd\u6570\u3002 \u7ed9\u5b9a\u4e00\u4e2a haystack \u5b57\u7b26\u4e32\u548c\u4e00\u4e2a needle \u5b57\u7b26\u4e32\uff0c\u5728 haystack \u5b57\u7b26\u4e32\u4e2d\u627e\u51fa needle \u5b57\u7b26\u4e32\u51fa\u73b0\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e (\u4ece0\u5f00\u59cb)\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de -1 \u3002 \u793a\u4f8b 1: \u8f93\u5165: haystack = \"hello\", needle = \"ll\" \u8f93\u51fa: 2 \u793a\u4f8b 2: \u8f93\u5165: haystack = \"aaaaa\", needle = \"bba\" \u8f93\u51fa: -1 \u8bf4\u660e: \u5f53 needle \u662f\u7a7a\u5b57\u7b26\u4e32\u65f6\uff0c\u6211\u4eec\u5e94\u5f53\u8fd4\u56de\u4ec0\u4e48\u503c\u5462\uff1f\u8fd9\u662f\u4e00\u4e2a\u5728\u9762\u8bd5\u4e2d\u5f88\u597d\u7684\u95ee\u9898\u3002 \u5bf9\u4e8e\u672c\u9898\u800c\u8a00\uff0c\u5f53 needle \u662f\u7a7a\u5b57\u7b26\u4e32\u65f6\u6211\u4eec\u5e94\u5f53\u8fd4\u56de 0 \u3002\u8fd9\u4e0eC\u8bed\u8a00\u7684 strstr() \u4ee5\u53caJava\u7684 indexOf() \u5b9a\u4e49\u76f8\u7b26\u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/28.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u66b4\u529b\u6309\u4f4d\u5339\u914d \u4ee3\u7801\u5982\u4e0b\uff1a int strStr ( char * haystack , char * needle ){ int len1 = strlen ( haystack ), len2 = strlen ( needle ), cur1 = 0 , cur2 = 0 , cur3 = 0 , success = 1 ; if ( ! len2 ) return 0 ; if ( len1 < len2 ) return -1 ; do { success = 1 ; if ( haystack [ cur1 ] == needle [ 0 ]) { cur2 = 0 ; cur3 = 0 ; while ( cur2 < len2 && cur3 + cur1 < len1 && success ) { if ( haystack [ cur1 + cur3 ] != needle [ cur2 ]) success = 0 ; cur3 ++ ; cur2 ++ ; } if ( success ) return cur1 ; } cur1 ++ ; } while ( haystack [ cur1 + len2 - 1 ]); return -1 ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/315.html","text":"315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570 \u00b6 \u96be\u5ea6\uff1a \u56f0\u96be \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u6309\u8981\u6c42\u8fd4\u56de\u4e00\u4e2a\u65b0\u6570\u7ec4 counts \u3002\u6570\u7ec4 counts \u6709\u8be5\u6027\u8d28\uff1a counts[i] \u7684\u503c\u662f nums[i] \u53f3\u4fa7\u5c0f\u4e8e nums[i] \u7684\u5143\u7d20\u7684\u6570\u91cf\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1anums = [5,2,6,1] \u8f93\u51fa\uff1a[2,1,1,0] \u89e3\u91ca\uff1a 5 \u7684\u53f3\u4fa7\u6709 2 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (2 \u548c 1) 2 \u7684\u53f3\u4fa7\u4ec5\u6709 1 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (1) 6 \u7684\u53f3\u4fa7\u6709 1 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (1) 1 \u7684\u53f3\u4fa7\u6709 0 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 \u63d0\u793a\uff1a 0 <= nums.length <= 10^5 -10^4 <= nums[i] <= 10^4 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u4ece\u540e\u5f80\u524d\u6784\u9020\u4e00\u4e2a\u4e8c\u53c9\u67e5\u627e\u6811\uff0c\u5728\u4e8c\u53c9\u67e5\u627e\u6811\u4e2d\u7ef4\u62a4\u6811\u4e2d\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u6570\u5b57\u7684\u4e2a\u6570\u3002 \u4e8c\u53c9\u6811\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u57df\u7528\u4e8e\u8ba1\u7b97\u5de6\u5b50\u6811\u7684\u5143\u7d20\u603b\u6570\uff0c\u5373\u5f53\u524d\u6811\u4e2d\u6570\u503c\u5c0f\u4e8e\u8be5\u8282\u70b9\u7684\u5143\u7d20\u603b\u6570\u3002\u5b9e\u73b0\u65b9\u6cd5\u662f\u5728\u5de6\u5b50\u6811\u6dfb\u52a0\u5143\u7d20\u540e\u8be5\u57df\u7684\u503c\u589e\u52a01\u3002 \u5728\u8282\u70b9\u7684\u53f3\u5b50\u6811\u6dfb\u52a0\u5143\u7d20\u65f6\uff0c\u610f\u5473\u7740\u5f53\u524d\u8282\u70b9\u548c\u8282\u70b9\u5de6\u5b50\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9\u90fd\u662f\u7b26\u5408\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u8282\u70b9\u3002\u5728\u9012\u5f52\u8fc7\u7a0b\u4e2d\u9700\u8981\u4f20\u9012\u4e00\u4e2a\u7528\u4f5c\u8ba1\u6570\u5668\u7684\u6307\u9488\u53c2\u6570\uff08\u8ba1\u6570\u7684\u6570\u503c\u5373\u4e3a\u6240\u6c42\u7684\u7ed3\u679c\uff09\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Note: The returned array must be malloced, assume caller calls free(). */ struct TreeNode2 { struct TreeNode2 * left ; struct TreeNode2 * right ; int val ; int subs ; }; struct TreeNode2 * insert ( struct TreeNode2 * dest , int src , int * depth ) { if ( dest == NULL ) { struct TreeNode2 * ret = ( struct TreeNode2 * ) malloc ( sizeof ( struct TreeNode2 )); ret -> left = NULL ; ret -> right = NULL ; ret -> val = src ; ret -> subs = 0 ; return ret ; } if ( src > dest -> val ) { * depth += 1 + dest -> subs ; dest -> right = insert ( dest -> right , src , depth ); } else { dest -> subs ++ ; dest -> left = insert ( dest -> left , src , depth ); } return dest ; } int * countSmaller ( int * nums , int numsSize , int * returnSize ) { * returnSize = numsSize ; int * ret = ( int * ) memset ( malloc ( sizeof ( int ) * numsSize ), 0 , sizeof ( int ) * numsSize ), i = 0 ; if ( numsSize <= 1 ) return ret ; struct TreeNode2 * tempTree = NULL ; for ( i = numsSize - 1 ; i >= 0 ; i -- ) tempTree = insert ( tempTree , nums [ i ], ret + i ); return ret ; }","title":"315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570"},{"location":"coding/leetcode/315.html#315","text":"\u96be\u5ea6\uff1a \u56f0\u96be","title":"315. \u8ba1\u7b97\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u4e2a\u6570"},{"location":"coding/leetcode/315.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u6309\u8981\u6c42\u8fd4\u56de\u4e00\u4e2a\u65b0\u6570\u7ec4 counts \u3002\u6570\u7ec4 counts \u6709\u8be5\u6027\u8d28\uff1a counts[i] \u7684\u503c\u662f nums[i] \u53f3\u4fa7\u5c0f\u4e8e nums[i] \u7684\u5143\u7d20\u7684\u6570\u91cf\u3002 \u793a\u4f8b\uff1a \u8f93\u5165\uff1anums = [5,2,6,1] \u8f93\u51fa\uff1a[2,1,1,0] \u89e3\u91ca\uff1a 5 \u7684\u53f3\u4fa7\u6709 2 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (2 \u548c 1) 2 \u7684\u53f3\u4fa7\u4ec5\u6709 1 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (1) 6 \u7684\u53f3\u4fa7\u6709 1 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 (1) 1 \u7684\u53f3\u4fa7\u6709 0 \u4e2a\u66f4\u5c0f\u7684\u5143\u7d20 \u63d0\u793a\uff1a 0 <= nums.length <= 10^5 -10^4 <= nums[i] <= 10^4 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/315.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u4ece\u540e\u5f80\u524d\u6784\u9020\u4e00\u4e2a\u4e8c\u53c9\u67e5\u627e\u6811\uff0c\u5728\u4e8c\u53c9\u67e5\u627e\u6811\u4e2d\u7ef4\u62a4\u6811\u4e2d\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u6570\u5b57\u7684\u4e2a\u6570\u3002 \u4e8c\u53c9\u6811\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u57df\u7528\u4e8e\u8ba1\u7b97\u5de6\u5b50\u6811\u7684\u5143\u7d20\u603b\u6570\uff0c\u5373\u5f53\u524d\u6811\u4e2d\u6570\u503c\u5c0f\u4e8e\u8be5\u8282\u70b9\u7684\u5143\u7d20\u603b\u6570\u3002\u5b9e\u73b0\u65b9\u6cd5\u662f\u5728\u5de6\u5b50\u6811\u6dfb\u52a0\u5143\u7d20\u540e\u8be5\u57df\u7684\u503c\u589e\u52a01\u3002 \u5728\u8282\u70b9\u7684\u53f3\u5b50\u6811\u6dfb\u52a0\u5143\u7d20\u65f6\uff0c\u610f\u5473\u7740\u5f53\u524d\u8282\u70b9\u548c\u8282\u70b9\u5de6\u5b50\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9\u90fd\u662f\u7b26\u5408\u53f3\u4fa7\u5c0f\u4e8e\u5f53\u524d\u5143\u7d20\u7684\u8282\u70b9\u3002\u5728\u9012\u5f52\u8fc7\u7a0b\u4e2d\u9700\u8981\u4f20\u9012\u4e00\u4e2a\u7528\u4f5c\u8ba1\u6570\u5668\u7684\u6307\u9488\u53c2\u6570\uff08\u8ba1\u6570\u7684\u6570\u503c\u5373\u4e3a\u6240\u6c42\u7684\u7ed3\u679c\uff09\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Note: The returned array must be malloced, assume caller calls free(). */ struct TreeNode2 { struct TreeNode2 * left ; struct TreeNode2 * right ; int val ; int subs ; }; struct TreeNode2 * insert ( struct TreeNode2 * dest , int src , int * depth ) { if ( dest == NULL ) { struct TreeNode2 * ret = ( struct TreeNode2 * ) malloc ( sizeof ( struct TreeNode2 )); ret -> left = NULL ; ret -> right = NULL ; ret -> val = src ; ret -> subs = 0 ; return ret ; } if ( src > dest -> val ) { * depth += 1 + dest -> subs ; dest -> right = insert ( dest -> right , src , depth ); } else { dest -> subs ++ ; dest -> left = insert ( dest -> left , src , depth ); } return dest ; } int * countSmaller ( int * nums , int numsSize , int * returnSize ) { * returnSize = numsSize ; int * ret = ( int * ) memset ( malloc ( sizeof ( int ) * numsSize ), 0 , sizeof ( int ) * numsSize ), i = 0 ; if ( numsSize <= 1 ) return ret ; struct TreeNode2 * tempTree = NULL ; for ( i = numsSize - 1 ; i >= 0 ; i -- ) tempTree = insert ( tempTree , nums [ i ], ret + i ); return ret ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/344.html","text":"344. \u53cd\u8f6c\u5b57\u7b26\u4e32 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u5176\u4f5c\u7528\u662f\u5c06\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u53cd\u8f6c\u8fc7\u6765\u3002\u8f93\u5165\u5b57\u7b26\u4e32\u4ee5\u5b57\u7b26\u6570\u7ec4 char[] \u7684\u5f62\u5f0f\u7ed9\u51fa\u3002 \u4e0d\u8981\u7ed9\u53e6\u5916\u7684\u6570\u7ec4\u5206\u914d\u989d\u5916\u7684\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u539f\u5730\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u3001\u4f7f\u7528 O(1) \u7684\u989d\u5916\u7a7a\u95f4\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5b57\u7b26\u90fd\u662f ASCII \u7801\u8868\u4e2d\u7684\u53ef\u6253\u5370\u5b57\u7b26\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a[\"h\",\"e\",\"l\",\"l\",\"o\"] \u8f93\u51fa\uff1a[\"o\",\"l\",\"l\",\"e\",\"h\"] \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a[\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"] \u8f93\u51fa\uff1a[\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"] Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5206\u522b\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\u6307\u5411\u5b57\u7b26\u4e32\u7684\u5f00\u5934\u4e0e\u7ed3\u5c3e\uff0c\u4ea4\u6362\u4e24\u8005\u7684\u503c\u540e\u6536\u7f29\u6307\u9488\u3002\uff08\u5de6\u6307\u9488\u53f3\u79fb\uff0c\u53f3\u6307\u9488\u5de6\u79fb\uff09 \u4ee3\u7801\u5982\u4e0b\uff1a void reverseString ( char * s , int sSize ) { if ( sSize <= 1 ) return ; char temp = 0 ; temp = * s ; * s = s [ sSize - 1 ]; s [ sSize - 1 ] = temp ; reverseString ( s + 1 , sSize - 2 ); }","title":"344. \u53cd\u8f6c\u5b57\u7b26\u4e32"},{"location":"coding/leetcode/344.html#344","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"344. \u53cd\u8f6c\u5b57\u7b26\u4e32"},{"location":"coding/leetcode/344.html#_1","text":"\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u5176\u4f5c\u7528\u662f\u5c06\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u53cd\u8f6c\u8fc7\u6765\u3002\u8f93\u5165\u5b57\u7b26\u4e32\u4ee5\u5b57\u7b26\u6570\u7ec4 char[] \u7684\u5f62\u5f0f\u7ed9\u51fa\u3002 \u4e0d\u8981\u7ed9\u53e6\u5916\u7684\u6570\u7ec4\u5206\u914d\u989d\u5916\u7684\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u539f\u5730\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u3001\u4f7f\u7528 O(1) \u7684\u989d\u5916\u7a7a\u95f4\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5b57\u7b26\u90fd\u662f ASCII \u7801\u8868\u4e2d\u7684\u53ef\u6253\u5370\u5b57\u7b26\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a[\"h\",\"e\",\"l\",\"l\",\"o\"] \u8f93\u51fa\uff1a[\"o\",\"l\",\"l\",\"e\",\"h\"] \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a[\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"] \u8f93\u51fa\uff1a[\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"] Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/344.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5206\u522b\u4f7f\u7528\u4e24\u4e2a\u6307\u9488\u6307\u5411\u5b57\u7b26\u4e32\u7684\u5f00\u5934\u4e0e\u7ed3\u5c3e\uff0c\u4ea4\u6362\u4e24\u8005\u7684\u503c\u540e\u6536\u7f29\u6307\u9488\u3002\uff08\u5de6\u6307\u9488\u53f3\u79fb\uff0c\u53f3\u6307\u9488\u5de6\u79fb\uff09 \u4ee3\u7801\u5982\u4e0b\uff1a void reverseString ( char * s , int sSize ) { if ( sSize <= 1 ) return ; char temp = 0 ; temp = * s ; * s = s [ sSize - 1 ]; s [ sSize - 1 ] = temp ; reverseString ( s + 1 , sSize - 2 ); }","title":"\u9898\u89e3"},{"location":"coding/leetcode/350.html","text":"350. \u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6 II \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e24\u4e2a\u6570\u7ec4\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97\u5b83\u4eec\u7684\u4ea4\u96c6\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1anums1 = [1,2,2,1], nums2 = [2,2] \u8f93\u51fa\uff1a[2,2] \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1anums1 = [4,9,5], nums2 = [9,4,9,8,4] \u8f93\u51fa\uff1a[4,9] \u8bf4\u660e\uff1a \u8f93\u51fa\u7ed3\u679c\u4e2d\u6bcf\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5e94\u4e0e\u5143\u7d20\u5728\u4e24\u4e2a\u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u7684\u6700\u5c0f\u503c\u4e00\u81f4\u3002 \u6211\u4eec\u53ef\u4ee5\u4e0d\u8003\u8651\u8f93\u51fa\u7ed3\u679c\u7684\u987a\u5e8f\u3002 \u8fdb\u9636\uff1a \u5982\u679c\u7ed9\u5b9a\u7684\u6570\u7ec4\u5df2\u7ecf\u6392\u597d\u5e8f\u5462\uff1f\u4f60\u5c06\u5982\u4f55\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\uff1f \u5982\u679c nums1 \u7684\u5927\u5c0f\u6bd4 nums2 \u5c0f\u5f88\u591a\uff0c\u54ea\u79cd\u65b9\u6cd5\u66f4\u4f18\uff1f \u5982\u679c nums2 \u7684\u5143\u7d20\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a\uff0c\u5185\u5b58\u662f\u6709\u9650\u7684\uff0c\u5e76\u4e14\u4f60\u4e0d\u80fd\u4e00\u6b21\u52a0\u8f7d\u6240\u6709\u7684\u5143\u7d20\u5230\u5185\u5b58\u4e2d\uff0c\u4f60\u8be5\u600e\u4e48\u529e\uff1f Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u4f7f\u7528\u54c8\u5e0c\u8868\u5b58\u50a8\u6570\u7ec4\u4e2d\u5404\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6ce8\u610f\u6570\u503c\u5728\u4ea4\u96c6\u4e2d\u53ef\u4ee5\u91cd\u590d\u51fa\u73b0\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a #define MIN(x, y) (x > y ? y : x) struct cell { int value ; int times1 ; int times2 ; }; int * intersect ( int * nums1 , int nums1Size , int * nums2 , int nums2Size , int * returnSize ){ int i = 0 , cur , mapSize = nums1Size + nums2Size , * ret = ( int * ) malloc ( sizeof ( int ) * ( nums1Size + nums2Size )); * returnSize = 0 ; struct cell * hashMap = ( struct cell * ) memset ( malloc ( sizeof ( struct cell ) * mapSize ), 0 , sizeof ( struct cell ) * mapSize ); for ( i = 0 ; i < nums1Size ; i ++ ) { cur = ( nums1 [ i ] > 0 ? 1 : -1 ) * ( nums1 [ i ] % mapSize ); while (( hashMap [ cur ]. times1 != 0 || hashMap [ cur ]. times2 ) && hashMap [ cur ]. value != nums1 [ i ]) { cur ++ ; cur = cur == mapSize ? 0 : cur ; } if ( hashMap [ cur ]. times1 == 0 && hashMap [ cur ]. times2 == 0 ) hashMap [ cur ]. value = nums1 [ i ]; hashMap [ cur ]. times1 ++ ; } for ( i = 0 ; i < nums2Size ; i ++ ) { cur = ( nums2 [ i ] > 0 ? 1 : -1 ) * ( nums2 [ i ] % mapSize ); while (( hashMap [ cur ]. times1 != 0 || hashMap [ cur ]. times2 ) && hashMap [ cur ]. value != nums2 [ i ]) { cur ++ ; cur = cur == mapSize ? 0 : cur ; } if ( hashMap [ cur ]. times1 == 0 && hashMap [ cur ]. times2 == 0 ) hashMap [ cur ]. value = nums2 [ i ]; hashMap [ cur ]. times2 ++ ; } for ( i = 0 ; i < mapSize ; i ++ ) while (( hashMap [ i ]. times2 -- ) && ( hashMap [ i ]. times1 -- )) ret [( * returnSize ) ++ ] = hashMap [ i ]. value ; return ret ; }","title":"350. \u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6 II"},{"location":"coding/leetcode/350.html#350-ii","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"350. \u4e24\u4e2a\u6570\u7ec4\u7684\u4ea4\u96c6 II"},{"location":"coding/leetcode/350.html#_1","text":"\u7ed9\u5b9a\u4e24\u4e2a\u6570\u7ec4\uff0c\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u8ba1\u7b97\u5b83\u4eec\u7684\u4ea4\u96c6\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1anums1 = [1,2,2,1], nums2 = [2,2] \u8f93\u51fa\uff1a[2,2] \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1anums1 = [4,9,5], nums2 = [9,4,9,8,4] \u8f93\u51fa\uff1a[4,9] \u8bf4\u660e\uff1a \u8f93\u51fa\u7ed3\u679c\u4e2d\u6bcf\u4e2a\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u5e94\u4e0e\u5143\u7d20\u5728\u4e24\u4e2a\u6570\u7ec4\u4e2d\u51fa\u73b0\u6b21\u6570\u7684\u6700\u5c0f\u503c\u4e00\u81f4\u3002 \u6211\u4eec\u53ef\u4ee5\u4e0d\u8003\u8651\u8f93\u51fa\u7ed3\u679c\u7684\u987a\u5e8f\u3002 \u8fdb\u9636\uff1a \u5982\u679c\u7ed9\u5b9a\u7684\u6570\u7ec4\u5df2\u7ecf\u6392\u597d\u5e8f\u5462\uff1f\u4f60\u5c06\u5982\u4f55\u4f18\u5316\u4f60\u7684\u7b97\u6cd5\uff1f \u5982\u679c nums1 \u7684\u5927\u5c0f\u6bd4 nums2 \u5c0f\u5f88\u591a\uff0c\u54ea\u79cd\u65b9\u6cd5\u66f4\u4f18\uff1f \u5982\u679c nums2 \u7684\u5143\u7d20\u5b58\u50a8\u5728\u78c1\u76d8\u4e0a\uff0c\u5185\u5b58\u662f\u6709\u9650\u7684\uff0c\u5e76\u4e14\u4f60\u4e0d\u80fd\u4e00\u6b21\u52a0\u8f7d\u6240\u6709\u7684\u5143\u7d20\u5230\u5185\u5b58\u4e2d\uff0c\u4f60\u8be5\u600e\u4e48\u529e\uff1f Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/350.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u4f7f\u7528\u54c8\u5e0c\u8868\u5b58\u50a8\u6570\u7ec4\u4e2d\u5404\u5143\u7d20\u51fa\u73b0\u7684\u6b21\u6570\uff0c\u6ce8\u610f\u6570\u503c\u5728\u4ea4\u96c6\u4e2d\u53ef\u4ee5\u91cd\u590d\u51fa\u73b0\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a #define MIN(x, y) (x > y ? y : x) struct cell { int value ; int times1 ; int times2 ; }; int * intersect ( int * nums1 , int nums1Size , int * nums2 , int nums2Size , int * returnSize ){ int i = 0 , cur , mapSize = nums1Size + nums2Size , * ret = ( int * ) malloc ( sizeof ( int ) * ( nums1Size + nums2Size )); * returnSize = 0 ; struct cell * hashMap = ( struct cell * ) memset ( malloc ( sizeof ( struct cell ) * mapSize ), 0 , sizeof ( struct cell ) * mapSize ); for ( i = 0 ; i < nums1Size ; i ++ ) { cur = ( nums1 [ i ] > 0 ? 1 : -1 ) * ( nums1 [ i ] % mapSize ); while (( hashMap [ cur ]. times1 != 0 || hashMap [ cur ]. times2 ) && hashMap [ cur ]. value != nums1 [ i ]) { cur ++ ; cur = cur == mapSize ? 0 : cur ; } if ( hashMap [ cur ]. times1 == 0 && hashMap [ cur ]. times2 == 0 ) hashMap [ cur ]. value = nums1 [ i ]; hashMap [ cur ]. times1 ++ ; } for ( i = 0 ; i < nums2Size ; i ++ ) { cur = ( nums2 [ i ] > 0 ? 1 : -1 ) * ( nums2 [ i ] % mapSize ); while (( hashMap [ cur ]. times1 != 0 || hashMap [ cur ]. times2 ) && hashMap [ cur ]. value != nums2 [ i ]) { cur ++ ; cur = cur == mapSize ? 0 : cur ; } if ( hashMap [ cur ]. times1 == 0 && hashMap [ cur ]. times2 == 0 ) hashMap [ cur ]. value = nums2 [ i ]; hashMap [ cur ]. times2 ++ ; } for ( i = 0 ; i < mapSize ; i ++ ) while (( hashMap [ i ]. times2 -- ) && ( hashMap [ i ]. times1 -- )) ret [( * returnSize ) ++ ] = hashMap [ i ]. value ; return ret ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/36.html","text":"36. \u6709\u6548\u7684\u6570\u72ec \u00b6 \u96be\u5ea6\uff1a \u4e2d\u7b49 \u9898\u76ee \u00b6 \u5224\u65ad\u4e00\u4e2a 9x9 \u7684\u6570\u72ec\u662f\u5426\u6709\u6548\u3002\u53ea\u9700\u8981\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u884c\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u5217\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u4e2a\u4ee5\u7c97\u5b9e\u7ebf\u5206\u9694\u7684 3x3 \u5bab\u5185\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u4e0a\u56fe\u662f\u4e00\u4e2a\u90e8\u5206\u586b\u5145\u7684\u6709\u6548\u7684\u6570\u72ec\u3002 \u6570\u72ec\u90e8\u5206\u7a7a\u683c\u5185\u5df2\u586b\u5165\u4e86\u6570\u5b57\uff0c\u7a7a\u767d\u683c\u7528 '.' \u8868\u793a\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [ [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"], [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"], [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"], [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"], [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"], [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"], [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"], [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"], [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"] ] \u8f93\u51fa: true \u793a\u4f8b 2\uff1a \u8f93\u5165: [ [\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"], [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"], [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"], [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"], [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"], [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"], [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"], [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"], [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"] ] \u8f93\u51fa: false \u89e3\u91ca: \u9664\u4e86\u7b2c\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\u4ece 5 \u6539\u4e3a 8 \u4ee5\u5916\uff0c\u7a7a\u683c\u5185\u5176\u4ed6\u6570\u5b57\u5747\u4e0e \u793a\u4f8b1 \u76f8\u540c\u3002 \u4f46\u7531\u4e8e\u4f4d\u4e8e\u5de6\u4e0a\u89d2\u7684 3x3 \u5bab\u5185\u6709\u4e24\u4e2a 8 \u5b58\u5728, \u56e0\u6b64\u8fd9\u4e2a\u6570\u72ec\u662f\u65e0\u6548\u7684\u3002 \u8bf4\u660e\uff1a \u4e00\u4e2a\u6709\u6548\u7684\u6570\u72ec\uff08\u90e8\u5206\u5df2\u88ab\u586b\u5145\uff09\u4e0d\u4e00\u5b9a\u662f\u53ef\u89e3\u7684\u3002 \u53ea\u9700\u8981\u6839\u636e\u4ee5\u4e0a\u89c4\u5219\uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002 \u7ed9\u5b9a\u6570\u72ec\u5e8f\u5217\u53ea\u5305\u542b\u6570\u5b57 1-9 \u548c\u5b57\u7b26 '.' \u3002 \u7ed9\u5b9a\u6570\u72ec\u6c38\u8fdc\u662f 9x9 \u5f62\u5f0f\u7684\u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u6839\u636e\u5b9a\u4e49\u76f4\u63a5\u5224\u65ad\u8f93\u5165\u7684\u6570\u7ec4\u662f\u5426\u6ee1\u8db3\u6570\u72ec\u76843\u4e2a\u6761\u4ef6\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a bool isValidSudoku ( char ** board , int boardSize , int * boardColSize ){ int i = 0 , j = 0 , positions1 [ boardSize ], positions2 [ boardSize ], k = 0 ; for ( i = 0 ; i < boardSize ; i ++ ) { memset ( positions1 , 0 , sizeof ( int ) * boardSize ); memset ( positions2 , 0 , sizeof ( int ) * boardSize ); for ( j = 0 ; j < boardSize ; j ++ ) { if ( board [ i ][ j ] > '0' && positions1 [ board [ i ][ j ] - '1' ]) return false ; if ( board [ j ][ i ] > '0' && positions2 [ board [ j ][ i ] - '1' ]) return false ; if ( board [ i ][ j ] > '0' ) positions1 [ board [ i ][ j ] - '1' ] = 1 ; if ( board [ j ][ i ] > '0' ) positions2 [ board [ j ][ i ] - '1' ] = 1 ; } } for ( i = 0 ; i < 3 ; i ++ ) { for ( j = 0 ; j < 3 ; j ++ ) { memset ( positions1 , 0 , sizeof ( int ) * boardSize ); for ( k = 0 ; k < boardSize ; k ++ ) { if ( board [ i * 3 + k % 3 ][ j * 3 + k / 3 ] > '0' && positions1 [ board [ i * 3 + k % 3 ][ j * 3 + k / 3 ] - '1' ]) return false ; if ( board [ i * 3 + k % 3 ][ j * 3 + k / 3 ] > '0' ) positions1 [ board [ i * 3 + k % 3 ][ j * 3 + k / 3 ] - '1' ] = 1 ; } } } return true ; }","title":"36. \u6709\u6548\u7684\u6570\u72ec"},{"location":"coding/leetcode/36.html#36","text":"\u96be\u5ea6\uff1a \u4e2d\u7b49","title":"36. \u6709\u6548\u7684\u6570\u72ec"},{"location":"coding/leetcode/36.html#_1","text":"\u5224\u65ad\u4e00\u4e2a 9x9 \u7684\u6570\u72ec\u662f\u5426\u6709\u6548\u3002\u53ea\u9700\u8981\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u884c\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u5217\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u4e2a\u4ee5\u7c97\u5b9e\u7ebf\u5206\u9694\u7684 3x3 \u5bab\u5185\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u4e0a\u56fe\u662f\u4e00\u4e2a\u90e8\u5206\u586b\u5145\u7684\u6709\u6548\u7684\u6570\u72ec\u3002 \u6570\u72ec\u90e8\u5206\u7a7a\u683c\u5185\u5df2\u586b\u5165\u4e86\u6570\u5b57\uff0c\u7a7a\u767d\u683c\u7528 '.' \u8868\u793a\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [ [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"], [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"], [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"], [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"], [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"], [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"], [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"], [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"], [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"] ] \u8f93\u51fa: true \u793a\u4f8b 2\uff1a \u8f93\u5165: [ [\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"], [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"], [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"], [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"], [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"], [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"], [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"], [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"], [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"] ] \u8f93\u51fa: false \u89e3\u91ca: \u9664\u4e86\u7b2c\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u6570\u5b57\u4ece 5 \u6539\u4e3a 8 \u4ee5\u5916\uff0c\u7a7a\u683c\u5185\u5176\u4ed6\u6570\u5b57\u5747\u4e0e \u793a\u4f8b1 \u76f8\u540c\u3002 \u4f46\u7531\u4e8e\u4f4d\u4e8e\u5de6\u4e0a\u89d2\u7684 3x3 \u5bab\u5185\u6709\u4e24\u4e2a 8 \u5b58\u5728, \u56e0\u6b64\u8fd9\u4e2a\u6570\u72ec\u662f\u65e0\u6548\u7684\u3002 \u8bf4\u660e\uff1a \u4e00\u4e2a\u6709\u6548\u7684\u6570\u72ec\uff08\u90e8\u5206\u5df2\u88ab\u586b\u5145\uff09\u4e0d\u4e00\u5b9a\u662f\u53ef\u89e3\u7684\u3002 \u53ea\u9700\u8981\u6839\u636e\u4ee5\u4e0a\u89c4\u5219\uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002 \u7ed9\u5b9a\u6570\u72ec\u5e8f\u5217\u53ea\u5305\u542b\u6570\u5b57 1-9 \u548c\u5b57\u7b26 '.' \u3002 \u7ed9\u5b9a\u6570\u72ec\u6c38\u8fdc\u662f 9x9 \u5f62\u5f0f\u7684\u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/36.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u6839\u636e\u5b9a\u4e49\u76f4\u63a5\u5224\u65ad\u8f93\u5165\u7684\u6570\u7ec4\u662f\u5426\u6ee1\u8db3\u6570\u72ec\u76843\u4e2a\u6761\u4ef6\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a bool isValidSudoku ( char ** board , int boardSize , int * boardColSize ){ int i = 0 , j = 0 , positions1 [ boardSize ], positions2 [ boardSize ], k = 0 ; for ( i = 0 ; i < boardSize ; i ++ ) { memset ( positions1 , 0 , sizeof ( int ) * boardSize ); memset ( positions2 , 0 , sizeof ( int ) * boardSize ); for ( j = 0 ; j < boardSize ; j ++ ) { if ( board [ i ][ j ] > '0' && positions1 [ board [ i ][ j ] - '1' ]) return false ; if ( board [ j ][ i ] > '0' && positions2 [ board [ j ][ i ] - '1' ]) return false ; if ( board [ i ][ j ] > '0' ) positions1 [ board [ i ][ j ] - '1' ] = 1 ; if ( board [ j ][ i ] > '0' ) positions2 [ board [ j ][ i ] - '1' ] = 1 ; } } for ( i = 0 ; i < 3 ; i ++ ) { for ( j = 0 ; j < 3 ; j ++ ) { memset ( positions1 , 0 , sizeof ( int ) * boardSize ); for ( k = 0 ; k < boardSize ; k ++ ) { if ( board [ i * 3 + k % 3 ][ j * 3 + k / 3 ] > '0' && positions1 [ board [ i * 3 + k % 3 ][ j * 3 + k / 3 ] - '1' ]) return false ; if ( board [ i * 3 + k % 3 ][ j * 3 + k / 3 ] > '0' ) positions1 [ board [ i * 3 + k % 3 ][ j * 3 + k / 3 ] - '1' ] = 1 ; } } } return true ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/38.html","text":"38. \u5916\u89c2\u6570\u5217 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 n n \uff08 1 \\leq n \\leq 30 1 \\leq n \\leq 30 \uff09\uff0c\u8f93\u51fa\u5916\u89c2\u6570\u5217\u7684\u7b2c n n \u9879\u3002 \u6ce8\u610f\uff1a\u6574\u6570\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e00\u9879\u5c06\u8868\u793a\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u300c\u5916\u89c2\u6570\u5217\u300d\u662f\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u4ece\u6570\u5b57 1 \u5f00\u59cb\uff0c\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e00\u9879\u90fd\u662f\u5bf9\u524d\u4e00\u9879\u7684\u63cf\u8ff0\u3002\u524d\u4e94\u9879\u5982\u4e0b\uff1a 1. 1 2. 11 3. 21 4. 1211 5. 111221 \u7b2c\u4e00\u9879\u662f\u6570\u5b57 1 \u63cf\u8ff0\u524d\u4e00\u9879\uff0c\u8fd9\u4e2a\u6570\u662f 1 \u5373 \u201c\u4e00\u4e2a 1 \u201d\uff0c\u8bb0\u4f5c 11 \u63cf\u8ff0\u524d\u4e00\u9879\uff0c\u8fd9\u4e2a\u6570\u662f 11 \u5373 \u201c\u4e24\u4e2a 1 \u201d \uff0c\u8bb0\u4f5c 21 \u63cf\u8ff0\u524d\u4e00\u9879\uff0c\u8fd9\u4e2a\u6570\u662f 21 \u5373 \u201c\u4e00\u4e2a 2 \u4e00\u4e2a 1 \u201d \uff0c\u8bb0\u4f5c 1211 \u63cf\u8ff0\u524d\u4e00\u9879\uff0c\u8fd9\u4e2a\u6570\u662f 1211 \u5373 \u201c\u4e00\u4e2a 1 \u4e00\u4e2a 2 \u4e24\u4e2a 1 \u201d \uff0c\u8bb0\u4f5c 111221 \u793a\u4f8b 1: \u8f93\u5165: 1 \u8f93\u51fa: \"1\" \u89e3\u91ca\uff1a\u8fd9\u662f\u4e00\u4e2a\u57fa\u672c\u6837\u4f8b\u3002 \u793a\u4f8b 2: \u8f93\u5165: 4 \u8f93\u51fa: \"1211\" \u89e3\u91ca\uff1a\u5f53 n = 3 \u65f6\uff0c\u5e8f\u5217\u662f \"21\"\uff0c\u5176\u4e2d\u6211\u4eec\u6709 \"2\" \u548c \"1\" \u4e24\u7ec4\uff0c\"2\" \u53ef\u4ee5\u8bfb\u4f5c \"12\"\uff0c\u4e5f\u5c31\u662f\u51fa\u73b0\u9891\u6b21 = 1 \u800c \u503c = 2\uff1b\u7c7b\u4f3c \"1\" \u53ef\u4ee5\u8bfb\u4f5c \"11\"\u3002\u6240\u4ee5\u7b54\u6848\u662f \"12\" \u548c \"11\" \u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u4e5f\u5c31\u662f \"1211\"\u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u6839\u636e\u5b9a\u4e49\u8fdb\u884c\u8ba1\u7b97\u5373\u53ef\uff0c\u6ce8\u610f\u6b21\u6570\u90e8\u5206\u53ef\u80fd\u8d85\u8fc710\uff0c\u800c\u6570\u5b57\u90e8\u5206\u4e0d\u4f1a\u8d85\u8fc710\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a char * toStr ( int n ) { char * ret = ( char * ) memset ( malloc ( sizeof ( char ) * 10 ), 0 , sizeof ( char ) * 10 ), temp ; int i = 0 , head = 0 , tail ; while ( n ) { ret [ i ] = n % 10 + '0' ; n /= 10 ; i ++ ; } tail = i - 1 ; while ( head < tail ) { temp = ret [ head ]; ret [ head ] = ret [ tail ]; ret [ tail ] = temp ; } return ret ; } char * countAndSay ( int n ){ if ( n == 1 ) { char * ret = ( char * ) malloc ( sizeof ( char ) * 2 ); ret [ 0 ] = '1' ; ret [ 1 ] = 0 ; return ret ; } char * rec = countAndSay ( n - 1 ), * cur = rec , flag = * cur , * temp = NULL , * ret = ( char * ) memset ( malloc ( sizeof ( char ) * ( strlen ( rec ) * 2 + 1 )), 0 , sizeof ( char ) * ( strlen ( rec ) * 2 + 1 )), * retcur = ret ; int counter = 0 ; while ( * cur ) { if ( * cur == flag ) counter ++ ; else { temp = toStr ( counter ); strcpy ( retcur , temp ); while ( * retcur ) retcur ++ ; * retcur = flag ; * retcur ++ ; flag = * cur ; counter = 1 ; free ( temp ); } cur ++ ; } temp = toStr ( counter ); strcpy ( retcur , temp ); while ( * retcur ) retcur ++ ; * retcur = flag ; free ( temp ); free ( rec ); return ret ; }","title":"38. \u5916\u89c2\u6570\u5217"},{"location":"coding/leetcode/38.html#38","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"38. \u5916\u89c2\u6570\u5217"},{"location":"coding/leetcode/38.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 n n \uff08 1 \\leq n \\leq 30 1 \\leq n \\leq 30 \uff09\uff0c\u8f93\u51fa\u5916\u89c2\u6570\u5217\u7684\u7b2c n n \u9879\u3002 \u6ce8\u610f\uff1a\u6574\u6570\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e00\u9879\u5c06\u8868\u793a\u4e3a\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002 \u300c\u5916\u89c2\u6570\u5217\u300d\u662f\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u4ece\u6570\u5b57 1 \u5f00\u59cb\uff0c\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e00\u9879\u90fd\u662f\u5bf9\u524d\u4e00\u9879\u7684\u63cf\u8ff0\u3002\u524d\u4e94\u9879\u5982\u4e0b\uff1a 1. 1 2. 11 3. 21 4. 1211 5. 111221 \u7b2c\u4e00\u9879\u662f\u6570\u5b57 1 \u63cf\u8ff0\u524d\u4e00\u9879\uff0c\u8fd9\u4e2a\u6570\u662f 1 \u5373 \u201c\u4e00\u4e2a 1 \u201d\uff0c\u8bb0\u4f5c 11 \u63cf\u8ff0\u524d\u4e00\u9879\uff0c\u8fd9\u4e2a\u6570\u662f 11 \u5373 \u201c\u4e24\u4e2a 1 \u201d \uff0c\u8bb0\u4f5c 21 \u63cf\u8ff0\u524d\u4e00\u9879\uff0c\u8fd9\u4e2a\u6570\u662f 21 \u5373 \u201c\u4e00\u4e2a 2 \u4e00\u4e2a 1 \u201d \uff0c\u8bb0\u4f5c 1211 \u63cf\u8ff0\u524d\u4e00\u9879\uff0c\u8fd9\u4e2a\u6570\u662f 1211 \u5373 \u201c\u4e00\u4e2a 1 \u4e00\u4e2a 2 \u4e24\u4e2a 1 \u201d \uff0c\u8bb0\u4f5c 111221 \u793a\u4f8b 1: \u8f93\u5165: 1 \u8f93\u51fa: \"1\" \u89e3\u91ca\uff1a\u8fd9\u662f\u4e00\u4e2a\u57fa\u672c\u6837\u4f8b\u3002 \u793a\u4f8b 2: \u8f93\u5165: 4 \u8f93\u51fa: \"1211\" \u89e3\u91ca\uff1a\u5f53 n = 3 \u65f6\uff0c\u5e8f\u5217\u662f \"21\"\uff0c\u5176\u4e2d\u6211\u4eec\u6709 \"2\" \u548c \"1\" \u4e24\u7ec4\uff0c\"2\" \u53ef\u4ee5\u8bfb\u4f5c \"12\"\uff0c\u4e5f\u5c31\u662f\u51fa\u73b0\u9891\u6b21 = 1 \u800c \u503c = 2\uff1b\u7c7b\u4f3c \"1\" \u53ef\u4ee5\u8bfb\u4f5c \"11\"\u3002\u6240\u4ee5\u7b54\u6848\u662f \"12\" \u548c \"11\" \u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u4e5f\u5c31\u662f \"1211\"\u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/38.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u6839\u636e\u5b9a\u4e49\u8fdb\u884c\u8ba1\u7b97\u5373\u53ef\uff0c\u6ce8\u610f\u6b21\u6570\u90e8\u5206\u53ef\u80fd\u8d85\u8fc710\uff0c\u800c\u6570\u5b57\u90e8\u5206\u4e0d\u4f1a\u8d85\u8fc710\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a char * toStr ( int n ) { char * ret = ( char * ) memset ( malloc ( sizeof ( char ) * 10 ), 0 , sizeof ( char ) * 10 ), temp ; int i = 0 , head = 0 , tail ; while ( n ) { ret [ i ] = n % 10 + '0' ; n /= 10 ; i ++ ; } tail = i - 1 ; while ( head < tail ) { temp = ret [ head ]; ret [ head ] = ret [ tail ]; ret [ tail ] = temp ; } return ret ; } char * countAndSay ( int n ){ if ( n == 1 ) { char * ret = ( char * ) malloc ( sizeof ( char ) * 2 ); ret [ 0 ] = '1' ; ret [ 1 ] = 0 ; return ret ; } char * rec = countAndSay ( n - 1 ), * cur = rec , flag = * cur , * temp = NULL , * ret = ( char * ) memset ( malloc ( sizeof ( char ) * ( strlen ( rec ) * 2 + 1 )), 0 , sizeof ( char ) * ( strlen ( rec ) * 2 + 1 )), * retcur = ret ; int counter = 0 ; while ( * cur ) { if ( * cur == flag ) counter ++ ; else { temp = toStr ( counter ); strcpy ( retcur , temp ); while ( * retcur ) retcur ++ ; * retcur = flag ; * retcur ++ ; flag = * cur ; counter = 1 ; free ( temp ); } cur ++ ; } temp = toStr ( counter ); strcpy ( retcur , temp ); while ( * retcur ) retcur ++ ; * retcur = flag ; free ( temp ); free ( rec ); return ret ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/384.html","text":"384. \u6253\u4e71\u6570\u7ec4 \u00b6 \u96be\u5ea6\uff1a \u4e2d\u7b49 \u9898\u76ee \u00b6 \u6253\u4e71\u4e00\u4e2a\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4\u3002 \u793a\u4f8b\uff1a // \u4ee5\u6570\u5b57\u96c6\u5408 1, 2 \u548c 3 \u521d\u59cb\u5316\u6570\u7ec4\u3002 int[] nums = {1,2,3}; Solution solution = new Solution(nums); // \u6253\u4e71\u6570\u7ec4 [1,2,3] \u5e76\u8fd4\u56de\u7ed3\u679c\u3002\u4efb\u4f55 [1,2,3]\u7684\u6392\u5217\u8fd4\u56de\u7684\u6982\u7387\u5e94\u8be5\u76f8\u540c\u3002 solution.shuffle(); // \u91cd\u8bbe\u6570\u7ec4\u5230\u5b83\u7684\u521d\u59cb\u72b6\u6001[1,2,3]\u3002 solution.reset(); // \u968f\u673a\u8fd4\u56de\u6570\u7ec4[1,2,3]\u6253\u4e71\u540e\u7684\u7ed3\u679c\u3002 solution.shuffle(); Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a Fisher-Yates \u6d17\u724c\u7b97\u6cd5\uff0c\u5173\u952e\u5728\u4e8e\u5b9e\u73b0\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u65e0\u653e\u56de\u62bd\u6837\u3002 Fisher-Yates \u6d17\u724c\u7b97\u6cd5\u8ddf\u66b4\u529b\u7b97\u6cd5\u5f88\u50cf\u3002\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d\uff0c\u751f\u6210\u4e00\u4e2a\u8303\u56f4\u5728\u5f53\u524d\u4e0b\u6807\u5230\u6570\u7ec4\u672b\u5c3e\u5143\u7d20\u4e0b\u6807\u4e4b\u95f4\u7684\u968f\u673a\u6574\u6570\u3002\u63a5\u4e0b\u6765\uff0c\u5c06\u5f53\u524d\u5143\u7d20\u548c\u968f\u673a\u9009\u51fa\u7684\u4e0b\u6807\u6240\u6307\u7684\u5143\u7d20\u4e92\u76f8\u4ea4\u6362 - \u8fd9\u4e00\u6b65\u6a21\u62df\u4e86\u6bcf\u6b21\u4ece \u201c\u5e3d\u5b50\u201d \u91cc\u9762\u6478\u4e00\u4e2a\u5143\u7d20\u7684\u8fc7\u7a0b\uff0c\u5176\u4e2d\u9009\u53d6\u4e0b\u6807\u8303\u56f4\u7684\u4f9d\u636e\u5728\u4e8e\u6bcf\u4e2a\u88ab\u6478\u51fa\u7684\u5143\u7d20\u90fd\u4e0d\u53ef\u80fd\u518d\u88ab\u6478\u51fa\u6765\u4e86\u3002\u6b64\u5916\u8fd8\u6709\u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u7ec6\u8282\uff0c\u5f53\u524d\u5143\u7d20\u662f\u53ef\u4ee5\u548c\u5b83\u672c\u8eab\u4e92\u76f8\u4ea4\u6362\u7684 - \u5426\u5219\u751f\u6210\u6700\u540e\u7684\u6392\u5217\u7ec4\u5408\u7684\u6982\u7387\u5c31\u4e0d\u5bf9\u4e86\u3002 Reference \u4ee3\u7801\u5982\u4e0b\uff1a typedef struct { int size ; int * nums ; } Solution ; Solution * solutionCreate ( int * nums , int numsSize ) { Solution * ret = ( Solution * ) malloc ( sizeof ( Solution )); ret -> size = numsSize ; ret -> nums = ( int * ) memcpy ( malloc ( sizeof ( int ) * numsSize ), nums , sizeof ( int ) * numsSize ); return ret ; } /** Resets the array to its original configuration and return it. */ int * solutionReset ( Solution * obj , int * retSize ) { * retSize = obj -> size ; return obj -> nums ; } /** Returns a random shuffling of the array. */ int * solutionShuffle ( Solution * obj , int * retSize ) { * retSize = obj -> size ; int * ret = ( int * ) memcpy ( malloc ( sizeof ( int ) * obj -> size ), obj -> nums , sizeof ( int ) * obj -> size ), i = 0 , temp , x , y ; unsigned int * seed = malloc ( sizeof ( unsigned int )); * seed += ( unsigned int ) seed ; srand ( * seed ); for ( i = 0 ; i < obj -> size ; i ++ ) { x = i ; y = rand () % ( obj -> size - i ) + i ; temp = ret [ x ]; ret [ x ] = ret [ y ]; ret [ y ] = temp ; } free ( seed ); return ret ; } void solutionFree ( Solution * obj ) { free ( obj -> nums ); free ( obj ); } /** * Your Solution struct will be instantiated and called as such: * Solution* obj = solutionCreate(nums, numsSize); * int* param_1 = solutionReset(obj, retSize); * int* param_2 = solutionShuffle(obj, retSize); * solutionFree(obj); */","title":"384. \u6253\u4e71\u6570\u7ec4"},{"location":"coding/leetcode/384.html#384","text":"\u96be\u5ea6\uff1a \u4e2d\u7b49","title":"384. \u6253\u4e71\u6570\u7ec4"},{"location":"coding/leetcode/384.html#_1","text":"\u6253\u4e71\u4e00\u4e2a\u6ca1\u6709\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4\u3002 \u793a\u4f8b\uff1a // \u4ee5\u6570\u5b57\u96c6\u5408 1, 2 \u548c 3 \u521d\u59cb\u5316\u6570\u7ec4\u3002 int[] nums = {1,2,3}; Solution solution = new Solution(nums); // \u6253\u4e71\u6570\u7ec4 [1,2,3] \u5e76\u8fd4\u56de\u7ed3\u679c\u3002\u4efb\u4f55 [1,2,3]\u7684\u6392\u5217\u8fd4\u56de\u7684\u6982\u7387\u5e94\u8be5\u76f8\u540c\u3002 solution.shuffle(); // \u91cd\u8bbe\u6570\u7ec4\u5230\u5b83\u7684\u521d\u59cb\u72b6\u6001[1,2,3]\u3002 solution.reset(); // \u968f\u673a\u8fd4\u56de\u6570\u7ec4[1,2,3]\u6253\u4e71\u540e\u7684\u7ed3\u679c\u3002 solution.shuffle(); Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/384.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a Fisher-Yates \u6d17\u724c\u7b97\u6cd5\uff0c\u5173\u952e\u5728\u4e8e\u5b9e\u73b0\u6570\u7ec4\u4e2d\u5143\u7d20\u7684\u65e0\u653e\u56de\u62bd\u6837\u3002 Fisher-Yates \u6d17\u724c\u7b97\u6cd5\u8ddf\u66b4\u529b\u7b97\u6cd5\u5f88\u50cf\u3002\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d\uff0c\u751f\u6210\u4e00\u4e2a\u8303\u56f4\u5728\u5f53\u524d\u4e0b\u6807\u5230\u6570\u7ec4\u672b\u5c3e\u5143\u7d20\u4e0b\u6807\u4e4b\u95f4\u7684\u968f\u673a\u6574\u6570\u3002\u63a5\u4e0b\u6765\uff0c\u5c06\u5f53\u524d\u5143\u7d20\u548c\u968f\u673a\u9009\u51fa\u7684\u4e0b\u6807\u6240\u6307\u7684\u5143\u7d20\u4e92\u76f8\u4ea4\u6362 - \u8fd9\u4e00\u6b65\u6a21\u62df\u4e86\u6bcf\u6b21\u4ece \u201c\u5e3d\u5b50\u201d \u91cc\u9762\u6478\u4e00\u4e2a\u5143\u7d20\u7684\u8fc7\u7a0b\uff0c\u5176\u4e2d\u9009\u53d6\u4e0b\u6807\u8303\u56f4\u7684\u4f9d\u636e\u5728\u4e8e\u6bcf\u4e2a\u88ab\u6478\u51fa\u7684\u5143\u7d20\u90fd\u4e0d\u53ef\u80fd\u518d\u88ab\u6478\u51fa\u6765\u4e86\u3002\u6b64\u5916\u8fd8\u6709\u4e00\u4e2a\u9700\u8981\u6ce8\u610f\u7684\u7ec6\u8282\uff0c\u5f53\u524d\u5143\u7d20\u662f\u53ef\u4ee5\u548c\u5b83\u672c\u8eab\u4e92\u76f8\u4ea4\u6362\u7684 - \u5426\u5219\u751f\u6210\u6700\u540e\u7684\u6392\u5217\u7ec4\u5408\u7684\u6982\u7387\u5c31\u4e0d\u5bf9\u4e86\u3002 Reference \u4ee3\u7801\u5982\u4e0b\uff1a typedef struct { int size ; int * nums ; } Solution ; Solution * solutionCreate ( int * nums , int numsSize ) { Solution * ret = ( Solution * ) malloc ( sizeof ( Solution )); ret -> size = numsSize ; ret -> nums = ( int * ) memcpy ( malloc ( sizeof ( int ) * numsSize ), nums , sizeof ( int ) * numsSize ); return ret ; } /** Resets the array to its original configuration and return it. */ int * solutionReset ( Solution * obj , int * retSize ) { * retSize = obj -> size ; return obj -> nums ; } /** Returns a random shuffling of the array. */ int * solutionShuffle ( Solution * obj , int * retSize ) { * retSize = obj -> size ; int * ret = ( int * ) memcpy ( malloc ( sizeof ( int ) * obj -> size ), obj -> nums , sizeof ( int ) * obj -> size ), i = 0 , temp , x , y ; unsigned int * seed = malloc ( sizeof ( unsigned int )); * seed += ( unsigned int ) seed ; srand ( * seed ); for ( i = 0 ; i < obj -> size ; i ++ ) { x = i ; y = rand () % ( obj -> size - i ) + i ; temp = ret [ x ]; ret [ x ] = ret [ y ]; ret [ y ] = temp ; } free ( seed ); return ret ; } void solutionFree ( Solution * obj ) { free ( obj -> nums ); free ( obj ); } /** * Your Solution struct will be instantiated and called as such: * Solution* obj = solutionCreate(nums, numsSize); * int* param_1 = solutionReset(obj, retSize); * int* param_2 = solutionShuffle(obj, retSize); * solutionFree(obj); */","title":"\u9898\u89e3"},{"location":"coding/leetcode/387.html","text":"387. \u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u552f\u4e00\u5b57\u7b26 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u5b83\u7684\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\uff0c\u5e76\u8fd4\u56de\u5b83\u7684\u7d22\u5f15\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de -1 \u3002 \u793a\u4f8b\uff1a s = \"leetcode\" \u8fd4\u56de 0 s = \"loveleetcode\" \u8fd4\u56de 2 \u63d0\u793a\uff1a \u4f60\u53ef\u4ee5\u5047\u5b9a\u8be5\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u5b58\u50a8\u5b57\u7b26\u4e32\u4e2d\u5404\u5b57\u7b26\u7684\u51fa\u73b0\u6b21\u6570\u3002\u904d\u5386\u5b57\u7b26\u4e32\u8fdb\u884c\u7edf\u8ba1\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int firstUniqChar ( char * s ){ int hashMap [ 26 ] = { 0 }; char * cur = s ; while ( * cur ) { hashMap [ * cur - 'a' ] ++ ; cur ++ ; } cur = s ; while ( * cur ) { if ( hashMap [ * cur - 'a' ] == 1 ) return ( int )( cur - s ); cur ++ ; } return -1 ; }","title":"387. \u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u552f\u4e00\u5b57\u7b26"},{"location":"coding/leetcode/387.html#387","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"387. \u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u552f\u4e00\u5b57\u7b26"},{"location":"coding/leetcode/387.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u627e\u5230\u5b83\u7684\u7b2c\u4e00\u4e2a\u4e0d\u91cd\u590d\u7684\u5b57\u7b26\uff0c\u5e76\u8fd4\u56de\u5b83\u7684\u7d22\u5f15\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de -1 \u3002 \u793a\u4f8b\uff1a s = \"leetcode\" \u8fd4\u56de 0 s = \"loveleetcode\" \u8fd4\u56de 2 \u63d0\u793a\uff1a \u4f60\u53ef\u4ee5\u5047\u5b9a\u8be5\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/387.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u5b58\u50a8\u5b57\u7b26\u4e32\u4e2d\u5404\u5b57\u7b26\u7684\u51fa\u73b0\u6b21\u6570\u3002\u904d\u5386\u5b57\u7b26\u4e32\u8fdb\u884c\u7edf\u8ba1\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int firstUniqChar ( char * s ){ int hashMap [ 26 ] = { 0 }; char * cur = s ; while ( * cur ) { hashMap [ * cur - 'a' ] ++ ; cur ++ ; } cur = s ; while ( * cur ) { if ( hashMap [ * cur - 'a' ] == 1 ) return ( int )( cur - s ); cur ++ ; } return -1 ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/48.html","text":"48. \u65cb\u8f6c\u56fe\u50cf \u00b6 \u96be\u5ea6\uff1a \u4e2d\u7b49 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a n \u00d7 n \u7684\u4e8c\u7ef4\u77e9\u9635\u8868\u793a\u4e00\u4e2a\u56fe\u50cf\u3002 \u5c06\u56fe\u50cf\u987a\u65f6\u9488\u65cb\u8f6c 90 \u5ea6\u3002 \u8bf4\u660e\uff1a \u4f60\u5fc5\u987b\u5728\u539f\u5730\u65cb\u8f6c\u56fe\u50cf\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u9700\u8981\u76f4\u63a5\u4fee\u6539\u8f93\u5165\u7684\u4e8c\u7ef4\u77e9\u9635\u3002\u8bf7\u4e0d\u8981\u4f7f\u7528\u53e6\u4e00\u4e2a\u77e9\u9635\u6765\u65cb\u8f6c\u56fe\u50cf\u3002 \u793a\u4f8b 1\uff1a \u7ed9\u5b9a matrix = [ [1,2,3], [4,5,6], [7,8,9] ], \u539f\u5730\u65cb\u8f6c\u8f93\u5165\u77e9\u9635\uff0c\u4f7f\u5176\u53d8\u4e3a: [ [7,4,1], [8,5,2], [9,6,3] ] \u793a\u4f8b 2\uff1a \u7ed9\u5b9a matrix = [ [ 5, 1, 9,11], [ 2, 4, 8,10], [13, 3, 6, 7], [15,14,12,16] ], \u539f\u5730\u65cb\u8f6c\u8f93\u5165\u77e9\u9635\uff0c\u4f7f\u5176\u53d8\u4e3a: [ [15,13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7,10,11] ] Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5c06\u77e9\u9635\u8f6c\u7f6e\u540e\u53cd\u8f6c\u5404\u5217\u7684\u987a\u5e8f\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a void rotate ( int ** matrix , int matrixSize , int * matrixColSize ){ int i = 0 , j = 0 , temp ; for ( i = 0 ; i < matrixSize ; i ++ ) { for ( j = i ; j < matrixSize ; j ++ ) { temp = matrix [ i ][ j ]; matrix [ i ][ j ] = matrix [ j ][ i ]; matrix [ j ][ i ] = temp ; } } for ( i = 0 ; i < matrixSize ; i ++ ) { for ( j = 0 ; j < matrixSize / 2 ; j ++ ) { temp = matrix [ i ][ j ]; matrix [ i ][ j ] = matrix [ i ][ matrixSize - j - 1 ]; matrix [ i ][ matrixSize - j - 1 ] = temp ; } } }","title":"48. \u65cb\u8f6c\u56fe\u50cf"},{"location":"coding/leetcode/48.html#48","text":"\u96be\u5ea6\uff1a \u4e2d\u7b49","title":"48. \u65cb\u8f6c\u56fe\u50cf"},{"location":"coding/leetcode/48.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a n \u00d7 n \u7684\u4e8c\u7ef4\u77e9\u9635\u8868\u793a\u4e00\u4e2a\u56fe\u50cf\u3002 \u5c06\u56fe\u50cf\u987a\u65f6\u9488\u65cb\u8f6c 90 \u5ea6\u3002 \u8bf4\u660e\uff1a \u4f60\u5fc5\u987b\u5728\u539f\u5730\u65cb\u8f6c\u56fe\u50cf\uff0c\u8fd9\u610f\u5473\u7740\u4f60\u9700\u8981\u76f4\u63a5\u4fee\u6539\u8f93\u5165\u7684\u4e8c\u7ef4\u77e9\u9635\u3002\u8bf7\u4e0d\u8981\u4f7f\u7528\u53e6\u4e00\u4e2a\u77e9\u9635\u6765\u65cb\u8f6c\u56fe\u50cf\u3002 \u793a\u4f8b 1\uff1a \u7ed9\u5b9a matrix = [ [1,2,3], [4,5,6], [7,8,9] ], \u539f\u5730\u65cb\u8f6c\u8f93\u5165\u77e9\u9635\uff0c\u4f7f\u5176\u53d8\u4e3a: [ [7,4,1], [8,5,2], [9,6,3] ] \u793a\u4f8b 2\uff1a \u7ed9\u5b9a matrix = [ [ 5, 1, 9,11], [ 2, 4, 8,10], [13, 3, 6, 7], [15,14,12,16] ], \u539f\u5730\u65cb\u8f6c\u8f93\u5165\u77e9\u9635\uff0c\u4f7f\u5176\u53d8\u4e3a: [ [15,13, 2, 5], [14, 3, 4, 1], [12, 6, 8, 9], [16, 7,10,11] ] Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/48.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5c06\u77e9\u9635\u8f6c\u7f6e\u540e\u53cd\u8f6c\u5404\u5217\u7684\u987a\u5e8f\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a void rotate ( int ** matrix , int matrixSize , int * matrixColSize ){ int i = 0 , j = 0 , temp ; for ( i = 0 ; i < matrixSize ; i ++ ) { for ( j = i ; j < matrixSize ; j ++ ) { temp = matrix [ i ][ j ]; matrix [ i ][ j ] = matrix [ j ][ i ]; matrix [ j ][ i ] = temp ; } } for ( i = 0 ; i < matrixSize ; i ++ ) { for ( j = 0 ; j < matrixSize / 2 ; j ++ ) { temp = matrix [ i ][ j ]; matrix [ i ][ j ] = matrix [ i ][ matrixSize - j - 1 ]; matrix [ i ][ matrixSize - j - 1 ] = temp ; } } }","title":"\u9898\u89e3"},{"location":"coding/leetcode/50.html","text":"50. Pow(x, n) \u00b6 \u96be\u5ea6\uff1a \u4e2d\u7b49 \u9898\u76ee \u00b6 \u5b9e\u73b0 pow(x, n) \uff0c\u5373\u8ba1\u7b97 x \u7684 n \u6b21\u5e42\u51fd\u6570\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 2.00000, 10 \u8f93\u51fa: 1024.00000 \u793a\u4f8b 2\uff1a \u8f93\u5165: 2.10000, 3 \u8f93\u51fa: 9.26100 \u793a\u4f8b 3\uff1a \u8f93\u5165: 2.00000, -2 \u8f93\u51fa: 0.25000 \u89e3\u91ca: 2^(-2) = (1/2)^2 = 1/4 = 0.25 \u8bf4\u660e\uff1a -100.0 < x < 100.0 n \u662f 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [\u22122^{31}, 2^{31} \u2212 1] [\u22122^{31}, 2^{31} \u2212 1] \u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5229\u7528\u5feb\u901f\u5e42\u7684\u601d\u8def\uff0c\u5b58\u50a8\u6b21\u6570\u4e3a2\u7684\u6574\u6570\u5e42\u7684\u8ba1\u7b97\u7ed3\u679c\uff0c\u7136\u540e\u7528\u8fd9\u4e9b\u7ed3\u679c\u76f8\u4e58\u5f97\u5230\u8f93\u51fa\u7ed3\u679c\u3002\u6ce8\u610f\u6307\u6570\u4e3a\u8d1f\u6570\u7684\u60c5\u51b5\u3002\u5f53\u6307\u6570\u4e3a -2147483648 \u65f6\u4e0d\u80fd\u53d6\u8d1f\uff0c\u6b64\u65f6\u53ef\u4ee5\u5148\u52a0\u4e00\u518d\u53d6\u8d1f\uff0c\u6700\u540e\u9664\u4ee5\u5e95\u6570\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a double myPow ( double x , int n ) { if ( n < 0 ) return 1 / myPow ( x , - ( n + 1 )) / x ; double cache [ 32 ] = { 0 }, ret = 1 ; int i = 0 ; cache [ 0 ] = x ; while ( n ) { if ( n & 1 ) ret *= cache [ i ]; n >>= 1 ; i ++ ; cache [ i ] = cache [ i - 1 ] * cache [ i - 1 ]; } return ret ; }","title":"50. Pow(x, n)"},{"location":"coding/leetcode/50.html#50-powx-n","text":"\u96be\u5ea6\uff1a \u4e2d\u7b49","title":"50. Pow(x, n)"},{"location":"coding/leetcode/50.html#_1","text":"\u5b9e\u73b0 pow(x, n) \uff0c\u5373\u8ba1\u7b97 x \u7684 n \u6b21\u5e42\u51fd\u6570\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 2.00000, 10 \u8f93\u51fa: 1024.00000 \u793a\u4f8b 2\uff1a \u8f93\u5165: 2.10000, 3 \u8f93\u51fa: 9.26100 \u793a\u4f8b 3\uff1a \u8f93\u5165: 2.00000, -2 \u8f93\u51fa: 0.25000 \u89e3\u91ca: 2^(-2) = (1/2)^2 = 1/4 = 0.25 \u8bf4\u660e\uff1a -100.0 < x < 100.0 n \u662f 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5176\u6570\u503c\u8303\u56f4\u662f [\u22122^{31}, 2^{31} \u2212 1] [\u22122^{31}, 2^{31} \u2212 1] \u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/50.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5229\u7528\u5feb\u901f\u5e42\u7684\u601d\u8def\uff0c\u5b58\u50a8\u6b21\u6570\u4e3a2\u7684\u6574\u6570\u5e42\u7684\u8ba1\u7b97\u7ed3\u679c\uff0c\u7136\u540e\u7528\u8fd9\u4e9b\u7ed3\u679c\u76f8\u4e58\u5f97\u5230\u8f93\u51fa\u7ed3\u679c\u3002\u6ce8\u610f\u6307\u6570\u4e3a\u8d1f\u6570\u7684\u60c5\u51b5\u3002\u5f53\u6307\u6570\u4e3a -2147483648 \u65f6\u4e0d\u80fd\u53d6\u8d1f\uff0c\u6b64\u65f6\u53ef\u4ee5\u5148\u52a0\u4e00\u518d\u53d6\u8d1f\uff0c\u6700\u540e\u9664\u4ee5\u5e95\u6570\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a double myPow ( double x , int n ) { if ( n < 0 ) return 1 / myPow ( x , - ( n + 1 )) / x ; double cache [ 32 ] = { 0 }, ret = 1 ; int i = 0 ; cache [ 0 ] = x ; while ( n ) { if ( n & 1 ) ret *= cache [ i ]; n >>= 1 ; i ++ ; cache [ i ] = cache [ i - 1 ] * cache [ i - 1 ]; } return ret ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/509.html","text":"509. \u6590\u6ce2\u90a3\u5951\u6570 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u6590\u6ce2\u90a3\u5951\u6570\uff0c\u901a\u5e38\u7528 F(n) \u8868\u793a\uff0c\u5f62\u6210\u7684\u5e8f\u5217\u79f0\u4e3a\u6590\u6ce2\u90a3\u5951\u6570\u5217\u3002\u8be5\u6570\u5217\u7531 0 \u548c 1 \u5f00\u59cb\uff0c\u540e\u9762\u7684\u6bcf\u4e00\u9879\u6570\u5b57\u90fd\u662f\u524d\u9762\u4e24\u9879\u6570\u5b57\u7684\u548c\u3002\u4e5f\u5c31\u662f\uff1a F(0) = 0, F(1) = 1 F(N) = F(N - 1) + F(N - 2), \u5176\u4e2d N > 1. \u7ed9\u5b9a N \uff0c\u8ba1\u7b97 F(N) \u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a2 \u8f93\u51fa\uff1a1 \u89e3\u91ca\uff1aF(2) = F(1) + F(0) = 1 + 0 = 1. \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a3 \u8f93\u51fa\uff1a2 \u89e3\u91ca\uff1aF(3) = F(2) + F(1) = 1 + 1 = 2. \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1a4 \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1aF(4) = F(3) + F(2) = 2 + 1 = 3. \u63d0\u793a\uff1a 0\\leq N\\leq30 0\\leq N\\leq30 Reference \u9898\u89e3 \u00b6 \u9012\u5f52 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u5b58\u653e\u5386\u53f2\u7ed3\u679c\uff0c\u52a0\u901f\u9012\u5f52\u8ba1\u7b97 \u4ee3\u7801\u5982\u4e0b\uff1a int fib_cache ( int N , int ** cache , int * lenCache , int * fullCache ){ if ( ! N ) return 0 ; if ( ! ( * cache )) { * lenCache = 2 ; * fullCache = N + 1 ; * cache = ( int * ) memset ( malloc ( sizeof ( int ) * * fullCache ), 0 , sizeof ( int ) * * fullCache ); ( * cache )[ 0 ] = 1 ; ( * cache )[ 1 ] = 1 ; } if ( N > * lenCache && N <= * fullCache ) ( * cache )[ N -1 ] = fib_cache ( N - 1 , cache , lenCache , fullCache ) + fib_cache ( N - 2 , cache , lenCache , fullCache ); * lenCache = N ; return ( * cache )[ N - 1 ]; } int fib ( int N ){ int * cache = NULL , lenCache = 0 , fullCache = 0 ; return fib_cache ( N , & cache , & lenCache , & fullCache ); } \u8fed\u4ee3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u6839\u636e\u5b9a\u4e49\u63a8\u7b97\u6590\u6ce2\u90a3\u5951\u6570 \u4ee3\u7801\u5982\u4e0b\uff1a int fib ( int N ){ int ret = 0 , next = 1 , tmp ; while ( N ) { tmp = ret ; ret = next ; next = ret + tmp ; N -- ; } return ret ; }","title":"509. \u6590\u6ce2\u90a3\u5951\u6570"},{"location":"coding/leetcode/509.html#509","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"509. \u6590\u6ce2\u90a3\u5951\u6570"},{"location":"coding/leetcode/509.html#_1","text":"\u6590\u6ce2\u90a3\u5951\u6570\uff0c\u901a\u5e38\u7528 F(n) \u8868\u793a\uff0c\u5f62\u6210\u7684\u5e8f\u5217\u79f0\u4e3a\u6590\u6ce2\u90a3\u5951\u6570\u5217\u3002\u8be5\u6570\u5217\u7531 0 \u548c 1 \u5f00\u59cb\uff0c\u540e\u9762\u7684\u6bcf\u4e00\u9879\u6570\u5b57\u90fd\u662f\u524d\u9762\u4e24\u9879\u6570\u5b57\u7684\u548c\u3002\u4e5f\u5c31\u662f\uff1a F(0) = 0, F(1) = 1 F(N) = F(N - 1) + F(N - 2), \u5176\u4e2d N > 1. \u7ed9\u5b9a N \uff0c\u8ba1\u7b97 F(N) \u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a2 \u8f93\u51fa\uff1a1 \u89e3\u91ca\uff1aF(2) = F(1) + F(0) = 1 + 0 = 1. \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a3 \u8f93\u51fa\uff1a2 \u89e3\u91ca\uff1aF(3) = F(2) + F(1) = 1 + 1 = 2. \u793a\u4f8b 3\uff1a \u8f93\u5165\uff1a4 \u8f93\u51fa\uff1a3 \u89e3\u91ca\uff1aF(4) = F(3) + F(2) = 2 + 1 = 3. \u63d0\u793a\uff1a 0\\leq N\\leq30 0\\leq N\\leq30 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/509.html#_2","text":"","title":"\u9898\u89e3"},{"location":"coding/leetcode/509.html#_3","text":"\u57fa\u672c\u601d\u8def\uff1a \u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u5b58\u653e\u5386\u53f2\u7ed3\u679c\uff0c\u52a0\u901f\u9012\u5f52\u8ba1\u7b97 \u4ee3\u7801\u5982\u4e0b\uff1a int fib_cache ( int N , int ** cache , int * lenCache , int * fullCache ){ if ( ! N ) return 0 ; if ( ! ( * cache )) { * lenCache = 2 ; * fullCache = N + 1 ; * cache = ( int * ) memset ( malloc ( sizeof ( int ) * * fullCache ), 0 , sizeof ( int ) * * fullCache ); ( * cache )[ 0 ] = 1 ; ( * cache )[ 1 ] = 1 ; } if ( N > * lenCache && N <= * fullCache ) ( * cache )[ N -1 ] = fib_cache ( N - 1 , cache , lenCache , fullCache ) + fib_cache ( N - 2 , cache , lenCache , fullCache ); * lenCache = N ; return ( * cache )[ N - 1 ]; } int fib ( int N ){ int * cache = NULL , lenCache = 0 , fullCache = 0 ; return fib_cache ( N , & cache , & lenCache , & fullCache ); }","title":"\u9012\u5f52"},{"location":"coding/leetcode/509.html#_4","text":"\u57fa\u672c\u601d\u8def\uff1a \u6839\u636e\u5b9a\u4e49\u63a8\u7b97\u6590\u6ce2\u90a3\u5951\u6570 \u4ee3\u7801\u5982\u4e0b\uff1a int fib ( int N ){ int ret = 0 , next = 1 , tmp ; while ( N ) { tmp = ret ; ret = next ; next = ret + tmp ; N -- ; } return ret ; }","title":"\u8fed\u4ee3"},{"location":"coding/leetcode/66.html","text":"66. \u52a0\u4e00 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u7531\u6574\u6570\u7ec4\u6210\u7684\u975e\u7a7a\u6570\u7ec4\u6240\u8868\u793a\u7684\u975e\u8d1f\u6574\u6570\uff0c\u5728\u8be5\u6570\u7684\u57fa\u7840\u4e0a\u52a0\u4e00\u3002 \u6700\u9ad8\u4f4d\u6570\u5b57\u5b58\u653e\u5728\u6570\u7ec4\u7684\u9996\u4f4d\uff0c \u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u53ea\u5b58\u50a8\u5355\u4e2a\u6570\u5b57\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6574\u6570 0 \u4e4b\u5916\uff0c\u8fd9\u4e2a\u6574\u6570\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [1,2,3] \u8f93\u51fa: [1,2,4] \u89e3\u91ca: \u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 123\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165: [4,3,2,1] \u8f93\u51fa: [4,3,2,2] \u89e3\u91ca: \u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 4321\u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u4ece\u6700\u540e\u4e00\u4f4d\u5f00\u59cb\u52a0\uff0c\u5411\u524d\u5904\u7406\u8fdb\u4f4d\u3002\u6ce8\u610f9999+1\u7684\u7279\u6b8a\u60c5\u51b5\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Note: The returned array must be malloced, assume caller calls free(). */ int * plusOne ( int * digits , int digitsSize , int * returnSize ){ int * ret = ( int * ) malloc ( sizeof ( int ) * ( digitsSize + 1 )), i = digitsSize , add = 1 ; * ret = 0 ; memcpy ( ret + 1 , digits , sizeof ( int ) * digitsSize ); for ( i = digitsSize ; i >= 0 && add ; i -- ) { if ( add = ret [ i ] == 9 ) ret [ i ] = 0 ; else ret [ i ] ++ ; } * returnSize = ( i + 1 ) ? digitsSize : digitsSize + 1 ; return ret + (( i + 1 ) ? 1 : 0 ); }","title":"66. \u52a0\u4e00"},{"location":"coding/leetcode/66.html#66","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"66. \u52a0\u4e00"},{"location":"coding/leetcode/66.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u7531\u6574\u6570\u7ec4\u6210\u7684\u975e\u7a7a\u6570\u7ec4\u6240\u8868\u793a\u7684\u975e\u8d1f\u6574\u6570\uff0c\u5728\u8be5\u6570\u7684\u57fa\u7840\u4e0a\u52a0\u4e00\u3002 \u6700\u9ad8\u4f4d\u6570\u5b57\u5b58\u653e\u5728\u6570\u7ec4\u7684\u9996\u4f4d\uff0c \u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u53ea\u5b58\u50a8\u5355\u4e2a\u6570\u5b57\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6574\u6570 0 \u4e4b\u5916\uff0c\u8fd9\u4e2a\u6574\u6570\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: [1,2,3] \u8f93\u51fa: [1,2,4] \u89e3\u91ca: \u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 123\u3002 \u793a\u4f8b 2\uff1a \u8f93\u5165: [4,3,2,1] \u8f93\u51fa: [4,3,2,2] \u89e3\u91ca: \u8f93\u5165\u6570\u7ec4\u8868\u793a\u6570\u5b57 4321\u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/66.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u4ece\u6700\u540e\u4e00\u4f4d\u5f00\u59cb\u52a0\uff0c\u5411\u524d\u5904\u7406\u8fdb\u4f4d\u3002\u6ce8\u610f9999+1\u7684\u7279\u6b8a\u60c5\u51b5\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Note: The returned array must be malloced, assume caller calls free(). */ int * plusOne ( int * digits , int digitsSize , int * returnSize ){ int * ret = ( int * ) malloc ( sizeof ( int ) * ( digitsSize + 1 )), i = digitsSize , add = 1 ; * ret = 0 ; memcpy ( ret + 1 , digits , sizeof ( int ) * digitsSize ); for ( i = digitsSize ; i >= 0 && add ; i -- ) { if ( add = ret [ i ] == 9 ) ret [ i ] = 0 ; else ret [ i ] ++ ; } * returnSize = ( i + 1 ) ? digitsSize : digitsSize + 1 ; return ret + (( i + 1 ) ? 1 : 0 ); }","title":"\u9898\u89e3"},{"location":"coding/leetcode/7.html","text":"7. \u6574\u6570\u53cd\u8f6c \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u51fa\u4e00\u4e2a 32 \u4f4d\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u4f60\u9700\u8981\u5c06\u8fd9\u4e2a\u6574\u6570\u4e2d\u6bcf\u4f4d\u4e0a\u7684\u6570\u5b57\u8fdb\u884c\u53cd\u8f6c\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 123 \u8f93\u51fa: 321 \u793a\u4f8b 2\uff1a \u8f93\u5165: -123 \u8f93\u51fa: -321 \u793a\u4f8b 3\uff1a \u8f93\u5165: 120 \u8f93\u51fa: 21 \u6ce8\u610f\uff1a \u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8\u5f97\u4e0b 32 \u4f4d\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5219\u5176\u6570\u503c\u8303\u56f4\u4e3a [\u22122^{31}, 2^{31} \u2212 1] [\u22122^{31}, 2^{31} \u2212 1] \u3002\u8bf7\u6839\u636e\u8fd9\u4e2a\u5047\u8bbe\uff0c\u5982\u679c\u53cd\u8f6c\u540e\u6574\u6570\u6ea2\u51fa\u90a3\u4e48\u5c31\u8fd4\u56de 0\u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u6bcf\u4e00\u6b21\u4ece\u53f3\u4fa7\u63d0\u53d6\u51fa\u6700\u540e\u4e00\u4f4d\u52a0\u5230\u7ed3\u679c\u7684\u53f3\u4fa7\u3002\u6ce8\u610f\u8d1f\u6570 -2147483648 \u5728 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u73af\u5883\u4e0b\u4e0d\u80fd\u53d6\u8d1f\uff0c\u5c06\u4e2d\u95f4\u53d8\u91cf\u58f0\u660e\u4e3a long \u5373\u53ef\u89e3\u51b3\u3002 int reverse ( int x ){ long ret = 0 , testcase = x ; testcase = testcase > 0 ? testcase : - testcase ; while ( testcase ) { ret *= 10 ; ret += testcase % 10 ; testcase /= 10 ; } return (( ret >> 31 ) ? 0 : ret ) * ( x > 0 ? 1 : -1 ); }","title":"7. \u6574\u6570\u53cd\u8f6c"},{"location":"coding/leetcode/7.html#7","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"7. \u6574\u6570\u53cd\u8f6c"},{"location":"coding/leetcode/7.html#_1","text":"\u7ed9\u51fa\u4e00\u4e2a 32 \u4f4d\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u4f60\u9700\u8981\u5c06\u8fd9\u4e2a\u6574\u6570\u4e2d\u6bcf\u4f4d\u4e0a\u7684\u6570\u5b57\u8fdb\u884c\u53cd\u8f6c\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 123 \u8f93\u51fa: 321 \u793a\u4f8b 2\uff1a \u8f93\u5165: -123 \u8f93\u51fa: -321 \u793a\u4f8b 3\uff1a \u8f93\u5165: 120 \u8f93\u51fa: 21 \u6ce8\u610f\uff1a \u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8\u5f97\u4e0b 32 \u4f4d\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u5219\u5176\u6570\u503c\u8303\u56f4\u4e3a [\u22122^{31}, 2^{31} \u2212 1] [\u22122^{31}, 2^{31} \u2212 1] \u3002\u8bf7\u6839\u636e\u8fd9\u4e2a\u5047\u8bbe\uff0c\u5982\u679c\u53cd\u8f6c\u540e\u6574\u6570\u6ea2\u51fa\u90a3\u4e48\u5c31\u8fd4\u56de 0\u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/7.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u6bcf\u4e00\u6b21\u4ece\u53f3\u4fa7\u63d0\u53d6\u51fa\u6700\u540e\u4e00\u4f4d\u52a0\u5230\u7ed3\u679c\u7684\u53f3\u4fa7\u3002\u6ce8\u610f\u8d1f\u6570 -2147483648 \u5728 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u73af\u5883\u4e0b\u4e0d\u80fd\u53d6\u8d1f\uff0c\u5c06\u4e2d\u95f4\u53d8\u91cf\u58f0\u660e\u4e3a long \u5373\u53ef\u89e3\u51b3\u3002 int reverse ( int x ){ long ret = 0 , testcase = x ; testcase = testcase > 0 ? testcase : - testcase ; while ( testcase ) { ret *= 10 ; ret += testcase % 10 ; testcase /= 10 ; } return (( ret >> 31 ) ? 0 : ret ) * ( x > 0 ? 1 : -1 ); }","title":"\u9898\u89e3"},{"location":"coding/leetcode/70.html","text":"70. \u722c\u697c\u68af \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u5047\u8bbe\u4f60\u6b63\u5728\u722c\u697c\u68af\u3002\u9700\u8981 n \u9636\u4f60\u624d\u80fd\u5230\u8fbe\u697c\u9876\u3002 \u6bcf\u6b21\u4f60\u53ef\u4ee5\u722c 1 \u6216 2 \u4e2a\u53f0\u9636\u3002\u4f60\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u5462\uff1f \u6ce8\u610f\uff1a\u7ed9\u5b9a n \u662f\u4e00\u4e2a\u6b63\u6574\u6570\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a 2 \u8f93\u51fa\uff1a 2 \u89e3\u91ca\uff1a \u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u3002 1. 1 \u9636 + 1 \u9636 2. 2 \u9636 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a 3 \u8f93\u51fa\uff1a 3 \u89e3\u91ca\uff1a \u6709\u4e09\u79cd\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u3002 1. 1 \u9636 + 1 \u9636 + 1 \u9636 2. 1 \u9636 + 2 \u9636 3. 2 \u9636 + 1 \u9636 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u5b58\u50a8\u4e34\u65f6\u7ed3\u679c\uff0c\u9012\u5f52\u8ba1\u7b97\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int climbStairs_cache ( int n , int ** cache ) { if ( n <= 2 ) return n ; if ( * cache == NULL ) * cache = memset ( malloc ( sizeof ( int ) * n ), 0 , sizeof ( int ) * n ); if ( ! ( * cache )[ n - 1 ]) ( * cache )[ n - 1 ] = climbStairs_cache ( n - 1 , cache ) + climbStairs_cache ( n - 2 , cache ); return ( * cache )[ n - 1 ]; } int climbStairs ( int n ){ int * cache = NULL ; return climbStairs_cache ( n , & cache ); }","title":"70. \u722c\u697c\u68af"},{"location":"coding/leetcode/70.html#70","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"70. \u722c\u697c\u68af"},{"location":"coding/leetcode/70.html#_1","text":"\u5047\u8bbe\u4f60\u6b63\u5728\u722c\u697c\u68af\u3002\u9700\u8981 n \u9636\u4f60\u624d\u80fd\u5230\u8fbe\u697c\u9876\u3002 \u6bcf\u6b21\u4f60\u53ef\u4ee5\u722c 1 \u6216 2 \u4e2a\u53f0\u9636\u3002\u4f60\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u5462\uff1f \u6ce8\u610f\uff1a\u7ed9\u5b9a n \u662f\u4e00\u4e2a\u6b63\u6574\u6570\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165\uff1a 2 \u8f93\u51fa\uff1a 2 \u89e3\u91ca\uff1a \u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u3002 1. 1 \u9636 + 1 \u9636 2. 2 \u9636 \u793a\u4f8b 2\uff1a \u8f93\u5165\uff1a 3 \u8f93\u51fa\uff1a 3 \u89e3\u91ca\uff1a \u6709\u4e09\u79cd\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u3002 1. 1 \u9636 + 1 \u9636 + 1 \u9636 2. 1 \u9636 + 2 \u9636 3. 2 \u9636 + 1 \u9636 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/70.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u4f7f\u7528\u4e00\u4e2a\u6570\u7ec4\u5b58\u50a8\u4e34\u65f6\u7ed3\u679c\uff0c\u9012\u5f52\u8ba1\u7b97\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int climbStairs_cache ( int n , int ** cache ) { if ( n <= 2 ) return n ; if ( * cache == NULL ) * cache = memset ( malloc ( sizeof ( int ) * n ), 0 , sizeof ( int ) * n ); if ( ! ( * cache )[ n - 1 ]) ( * cache )[ n - 1 ] = climbStairs_cache ( n - 1 , cache ) + climbStairs_cache ( n - 2 , cache ); return ( * cache )[ n - 1 ]; } int climbStairs ( int n ){ int * cache = NULL ; return climbStairs_cache ( n , & cache ); }","title":"\u9898\u89e3"},{"location":"coding/leetcode/779.html","text":"779. \u7b2cK\u4e2a\u8bed\u6cd5\u7b26\u53f7 \u00b6 \u96be\u5ea6\uff1a \u4e2d\u7b49 \u9898\u76ee \u00b6 \u5728\u7b2c\u4e00\u884c\u6211\u4eec\u5199\u4e0a\u4e00\u4e2a 0 \u3002\u63a5\u4e0b\u6765\u7684\u6bcf\u4e00\u884c\uff0c\u5c06\u524d\u4e00\u884c\u4e2d\u7684 0 \u66ff\u6362\u4e3a 01 \uff0c 1 \u66ff\u6362\u4e3a 10 \u3002 \u7ed9\u5b9a\u884c\u6570 N \u548c\u5e8f\u6570 K \uff0c\u8fd4\u56de\u7b2c N \u884c\u4e2d\u7b2c K \u4e2a\u5b57\u7b26\u3002\uff08 K \u4ece 1 \u5f00\u59cb\uff09 \u4f8b\u5b50: \u8f93\u5165: N = 1, K = 1 \u8f93\u51fa: 0 \u8f93\u5165: N = 2, K = 1 \u8f93\u51fa: 0 \u8f93\u5165: N = 2, K = 2 \u8f93\u51fa: 1 \u8f93\u5165: N = 4, K = 5 \u8f93\u51fa: 1 \u89e3\u91ca: \u7b2c\u4e00\u884c: 0 \u7b2c\u4e8c\u884c: 01 \u7b2c\u4e09\u884c: 0110 \u7b2c\u56db\u884c: 01101001 \u6ce8\u610f\uff1a N \u7684\u8303\u56f4 [1, 30] . K \u7684\u8303\u56f4 [1, 2^(N-1)] . Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u6ce8\u610f\u5230\u6bcf\u4e2a\u7ed3\u679c\u5b57\u7b26\u4e32\u53ef\u4ee5\u5206\u4e3a4\u4e2a\u7b49\u957f\u7684\u90e8\u5206\uff0c\u5176\u4e2d\u7b2c1\u30014\u90e8\u5206\u76f8\u540c\uff0c2\u30013\u90e8\u5206\u76f8\u540c\uff0c\u4e24\u7ec4\u7684\u4e8c\u8fdb\u5236\u4e92\u8865\u3002\u540c\u65f6\uff0c\u4efb\u610f\u4e00\u884c\u4ee5\u4e2d\u70b9\u4e3a\u754c\uff0c\u5de6\u53f3\u4e24\u4fa7\u4e92\u8865\u3002\u56e0\u6b64\u53ea\u9700\u8981\u5728\u5de6\u4fa7\u8fdb\u884c\u67e5\u627e\uff0c\u53f3\u4fa7\u90e8\u5206\u53d6\u53cd\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int kthGrammar ( int N , int K ) { if ( N == 1 ) return 0 ; int unit = 1 << ( N - 2 ); return ! ( K <= unit ) ^ kthGrammar ( N - 1 , (( K - 1 ) & ( unit - 1 )) + 1 ); }","title":"779. \u7b2cK\u4e2a\u8bed\u6cd5\u7b26\u53f7"},{"location":"coding/leetcode/779.html#779-k","text":"\u96be\u5ea6\uff1a \u4e2d\u7b49","title":"779. \u7b2cK\u4e2a\u8bed\u6cd5\u7b26\u53f7"},{"location":"coding/leetcode/779.html#_1","text":"\u5728\u7b2c\u4e00\u884c\u6211\u4eec\u5199\u4e0a\u4e00\u4e2a 0 \u3002\u63a5\u4e0b\u6765\u7684\u6bcf\u4e00\u884c\uff0c\u5c06\u524d\u4e00\u884c\u4e2d\u7684 0 \u66ff\u6362\u4e3a 01 \uff0c 1 \u66ff\u6362\u4e3a 10 \u3002 \u7ed9\u5b9a\u884c\u6570 N \u548c\u5e8f\u6570 K \uff0c\u8fd4\u56de\u7b2c N \u884c\u4e2d\u7b2c K \u4e2a\u5b57\u7b26\u3002\uff08 K \u4ece 1 \u5f00\u59cb\uff09 \u4f8b\u5b50: \u8f93\u5165: N = 1, K = 1 \u8f93\u51fa: 0 \u8f93\u5165: N = 2, K = 1 \u8f93\u51fa: 0 \u8f93\u5165: N = 2, K = 2 \u8f93\u51fa: 1 \u8f93\u5165: N = 4, K = 5 \u8f93\u51fa: 1 \u89e3\u91ca: \u7b2c\u4e00\u884c: 0 \u7b2c\u4e8c\u884c: 01 \u7b2c\u4e09\u884c: 0110 \u7b2c\u56db\u884c: 01101001 \u6ce8\u610f\uff1a N \u7684\u8303\u56f4 [1, 30] . K \u7684\u8303\u56f4 [1, 2^(N-1)] . Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/779.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u6ce8\u610f\u5230\u6bcf\u4e2a\u7ed3\u679c\u5b57\u7b26\u4e32\u53ef\u4ee5\u5206\u4e3a4\u4e2a\u7b49\u957f\u7684\u90e8\u5206\uff0c\u5176\u4e2d\u7b2c1\u30014\u90e8\u5206\u76f8\u540c\uff0c2\u30013\u90e8\u5206\u76f8\u540c\uff0c\u4e24\u7ec4\u7684\u4e8c\u8fdb\u5236\u4e92\u8865\u3002\u540c\u65f6\uff0c\u4efb\u610f\u4e00\u884c\u4ee5\u4e2d\u70b9\u4e3a\u754c\uff0c\u5de6\u53f3\u4e24\u4fa7\u4e92\u8865\u3002\u56e0\u6b64\u53ea\u9700\u8981\u5728\u5de6\u4fa7\u8fdb\u884c\u67e5\u627e\uff0c\u53f3\u4fa7\u90e8\u5206\u53d6\u53cd\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int kthGrammar ( int N , int K ) { if ( N == 1 ) return 0 ; int unit = 1 << ( N - 2 ); return ! ( K <= unit ) ^ kthGrammar ( N - 1 , (( K - 1 ) & ( unit - 1 )) + 1 ); }","title":"\u9898\u89e3"},{"location":"coding/leetcode/8.html","text":"8. \u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 (atoi) \u00b6 \u96be\u5ea6\uff1a \u4e2d\u7b49 \u9898\u76ee \u00b6 \u8bf7\u4f60\u6765\u5b9e\u73b0\u4e00\u4e2a atoi \u51fd\u6570\uff0c\u4f7f\u5176\u80fd\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570\u3002 \u9996\u5148\uff0c\u8be5\u51fd\u6570\u4f1a\u6839\u636e\u9700\u8981\u4e22\u5f03\u65e0\u7528\u7684\u5f00\u5934\u7a7a\u683c\u5b57\u7b26\uff0c\u76f4\u5230\u5bfb\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u7684\u5b57\u7b26\u4e3a\u6b62\u3002\u63a5\u4e0b\u6765\u7684\u8f6c\u5316\u89c4\u5219\u5982\u4e0b\uff1a \u5982\u679c\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e3a\u6b63\u6216\u8005\u8d1f\u53f7\u65f6\uff0c\u5219\u5c06\u8be5\u7b26\u53f7\u4e0e\u4e4b\u540e\u9762\u5c3d\u53ef\u80fd\u591a\u7684\u8fde\u7eed\u6570\u5b57\u5b57\u7b26\u7ec4\u5408\u8d77\u6765\uff0c\u5f62\u6210\u4e00\u4e2a\u6709\u7b26\u53f7\u6574\u6570\u3002 \u5047\u5982\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u5219\u76f4\u63a5\u5c06\u5176\u4e0e\u4e4b\u540e\u8fde\u7eed\u7684\u6570\u5b57\u5b57\u7b26\u7ec4\u5408\u8d77\u6765\uff0c\u5f62\u6210\u4e00\u4e2a\u6574\u6570\u3002 \u8be5\u5b57\u7b26\u4e32\u5728\u6709\u6548\u7684\u6574\u6570\u90e8\u5206\u4e4b\u540e\u4e5f\u53ef\u80fd\u4f1a\u5b58\u5728\u591a\u4f59\u7684\u5b57\u7b26\uff0c\u90a3\u4e48\u8fd9\u4e9b\u5b57\u7b26\u53ef\u4ee5\u88ab\u5ffd\u7565\uff0c\u5b83\u4eec\u5bf9\u51fd\u6570\u4e0d\u5e94\u8be5\u9020\u6210\u5f71\u54cd\u3002 \u6ce8\u610f\uff1a\u5047\u5982\u8be5\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u5b57\u7b26\u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u6574\u6570\u5b57\u7b26\u3001\u5b57\u7b26\u4e32\u4e3a\u7a7a\u6216\u5b57\u7b26\u4e32\u4ec5\u5305\u542b\u7a7a\u767d\u5b57\u7b26\u65f6\uff0c\u5219\u4f60\u7684\u51fd\u6570\u4e0d\u9700\u8981\u8fdb\u884c\u8f6c\u6362\uff0c\u5373\u65e0\u6cd5\u8fdb\u884c\u6709\u6548\u8f6c\u6362\u3002 \u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u82e5\u51fd\u6570\u4e0d\u80fd\u8fdb\u884c\u6709\u6548\u7684\u8f6c\u6362\u65f6\uff0c\u8bf7\u8fd4\u56de 0 \u3002 \u63d0\u793a\uff1a \u672c\u9898\u4e2d\u7684\u7a7a\u767d\u5b57\u7b26\u53ea\u5305\u62ec\u7a7a\u683c\u5b57\u7b26 ' ' \u3002 \u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u5927\u5c0f\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u90a3\u4e48\u5176\u6570\u503c\u8303\u56f4\u4e3a [\u22122^{31}, 2^{31} \u2212 1] [\u22122^{31}, 2^{31} \u2212 1] \u3002\u5982\u679c\u6570\u503c\u8d85\u8fc7\u8fd9\u4e2a\u8303\u56f4\uff0c\u8bf7\u8fd4\u56de INT_MAX ( 2^{31} \u2212 1 2^{31} \u2212 1 )\u6216 INT_MIN ( \u22122^{31} \u22122^{31} ) \u3002 \u793a\u4f8b 1: \u8f93\u5165: \"42\" \u8f93\u51fa: 42 \u793a\u4f8b 2: \u8f93\u5165: \" -42\" \u8f93\u51fa: -42 \u89e3\u91ca: \u7b2c\u4e00\u4e2a\u975e\u7a7a\u767d\u5b57\u7b26\u4e3a '-', \u5b83\u662f\u4e00\u4e2a\u8d1f\u53f7\u3002 \u6211\u4eec\u5c3d\u53ef\u80fd\u5c06\u8d1f\u53f7\u4e0e\u540e\u9762\u6240\u6709\u8fde\u7eed\u51fa\u73b0\u7684\u6570\u5b57\u7ec4\u5408\u8d77\u6765\uff0c\u6700\u540e\u5f97\u5230 -42 \u3002 \u793a\u4f8b 3: \u8f93\u5165: \"4193 with words\" \u8f93\u51fa: 4193 \u89e3\u91ca: \u8f6c\u6362\u622a\u6b62\u4e8e\u6570\u5b57 '3' \uff0c\u56e0\u4e3a\u5b83\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e0d\u4e3a\u6570\u5b57\u3002 \u793a\u4f8b 4: \u8f93\u5165: \"words and 987\" \u8f93\u51fa: 0 \u89e3\u91ca: \u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f 'w', \u4f46\u5b83\u4e0d\u662f\u6570\u5b57\u6216\u6b63\u3001\u8d1f\u53f7\u3002 \u56e0\u6b64\u65e0\u6cd5\u6267\u884c\u6709\u6548\u7684\u8f6c\u6362\u3002 \u793a\u4f8b 5: \u8f93\u5165: \"-91283472332\" \u8f93\u51fa: -2147483648 \u89e3\u91ca: \u6570\u5b57 \"-91283472332\" \u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u3002 \u56e0\u6b64\u8fd4\u56de INT_MIN (\u2212231) \u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u6ce8\u610f\u4e00\u4e2a\u6709\u6548\u7684\u6570\u5b57\u5b57\u7b26\u4e32\u53ef\u4ee5\u4ee5 0-9 \u3001 '-' \u3001 '+' \u548c\u7a7a\u683c ' ' \u5f00\u5934\u3002 \u4e3a\u4e86\u907f\u514d\u6ea2\u51fa\uff0c\u5e94\u5f53\u4f7f\u7528 long \u7c7b\u578b\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int myAtoi ( char * str ){ int flag = 0 ; char * cur = str ; while ( * cur && * cur == ' ' ) cur ++ ; if ( * cur == '-' || * cur == '+' ) flag = * ( cur ++ ) - '+' ; if ( * cur < '0' || * cur > '9' ) return 0 ; long ret = 0 ; while ( * cur >= '0' && * cur <= '9' ) { ret *= 10 ; ret += * cur - '0' ; cur ++ ; if ( ret >= - ( long ) INT_MIN || ( ret == ( long ) INT_MAX && ! flag )) return flag ? INT_MIN : INT_MAX ; } return flag ? - ret : ret ; }","title":"8. \u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 (atoi)"},{"location":"coding/leetcode/8.html#8-atoi","text":"\u96be\u5ea6\uff1a \u4e2d\u7b49","title":"8. \u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 (atoi)"},{"location":"coding/leetcode/8.html#_1","text":"\u8bf7\u4f60\u6765\u5b9e\u73b0\u4e00\u4e2a atoi \u51fd\u6570\uff0c\u4f7f\u5176\u80fd\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6574\u6570\u3002 \u9996\u5148\uff0c\u8be5\u51fd\u6570\u4f1a\u6839\u636e\u9700\u8981\u4e22\u5f03\u65e0\u7528\u7684\u5f00\u5934\u7a7a\u683c\u5b57\u7b26\uff0c\u76f4\u5230\u5bfb\u627e\u5230\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u7684\u5b57\u7b26\u4e3a\u6b62\u3002\u63a5\u4e0b\u6765\u7684\u8f6c\u5316\u89c4\u5219\u5982\u4e0b\uff1a \u5982\u679c\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u4e3a\u6b63\u6216\u8005\u8d1f\u53f7\u65f6\uff0c\u5219\u5c06\u8be5\u7b26\u53f7\u4e0e\u4e4b\u540e\u9762\u5c3d\u53ef\u80fd\u591a\u7684\u8fde\u7eed\u6570\u5b57\u5b57\u7b26\u7ec4\u5408\u8d77\u6765\uff0c\u5f62\u6210\u4e00\u4e2a\u6709\u7b26\u53f7\u6574\u6570\u3002 \u5047\u5982\u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f\u6570\u5b57\uff0c\u5219\u76f4\u63a5\u5c06\u5176\u4e0e\u4e4b\u540e\u8fde\u7eed\u7684\u6570\u5b57\u5b57\u7b26\u7ec4\u5408\u8d77\u6765\uff0c\u5f62\u6210\u4e00\u4e2a\u6574\u6570\u3002 \u8be5\u5b57\u7b26\u4e32\u5728\u6709\u6548\u7684\u6574\u6570\u90e8\u5206\u4e4b\u540e\u4e5f\u53ef\u80fd\u4f1a\u5b58\u5728\u591a\u4f59\u7684\u5b57\u7b26\uff0c\u90a3\u4e48\u8fd9\u4e9b\u5b57\u7b26\u53ef\u4ee5\u88ab\u5ffd\u7565\uff0c\u5b83\u4eec\u5bf9\u51fd\u6570\u4e0d\u5e94\u8be5\u9020\u6210\u5f71\u54cd\u3002 \u6ce8\u610f\uff1a\u5047\u5982\u8be5\u5b57\u7b26\u4e32\u4e2d\u7684\u7b2c\u4e00\u4e2a\u975e\u7a7a\u683c\u5b57\u7b26\u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u6574\u6570\u5b57\u7b26\u3001\u5b57\u7b26\u4e32\u4e3a\u7a7a\u6216\u5b57\u7b26\u4e32\u4ec5\u5305\u542b\u7a7a\u767d\u5b57\u7b26\u65f6\uff0c\u5219\u4f60\u7684\u51fd\u6570\u4e0d\u9700\u8981\u8fdb\u884c\u8f6c\u6362\uff0c\u5373\u65e0\u6cd5\u8fdb\u884c\u6709\u6548\u8f6c\u6362\u3002 \u5728\u4efb\u4f55\u60c5\u51b5\u4e0b\uff0c\u82e5\u51fd\u6570\u4e0d\u80fd\u8fdb\u884c\u6709\u6548\u7684\u8f6c\u6362\u65f6\uff0c\u8bf7\u8fd4\u56de 0 \u3002 \u63d0\u793a\uff1a \u672c\u9898\u4e2d\u7684\u7a7a\u767d\u5b57\u7b26\u53ea\u5305\u62ec\u7a7a\u683c\u5b57\u7b26 ' ' \u3002 \u5047\u8bbe\u6211\u4eec\u7684\u73af\u5883\u53ea\u80fd\u5b58\u50a8 32 \u4f4d\u5927\u5c0f\u7684\u6709\u7b26\u53f7\u6574\u6570\uff0c\u90a3\u4e48\u5176\u6570\u503c\u8303\u56f4\u4e3a [\u22122^{31}, 2^{31} \u2212 1] [\u22122^{31}, 2^{31} \u2212 1] \u3002\u5982\u679c\u6570\u503c\u8d85\u8fc7\u8fd9\u4e2a\u8303\u56f4\uff0c\u8bf7\u8fd4\u56de INT_MAX ( 2^{31} \u2212 1 2^{31} \u2212 1 )\u6216 INT_MIN ( \u22122^{31} \u22122^{31} ) \u3002 \u793a\u4f8b 1: \u8f93\u5165: \"42\" \u8f93\u51fa: 42 \u793a\u4f8b 2: \u8f93\u5165: \" -42\" \u8f93\u51fa: -42 \u89e3\u91ca: \u7b2c\u4e00\u4e2a\u975e\u7a7a\u767d\u5b57\u7b26\u4e3a '-', \u5b83\u662f\u4e00\u4e2a\u8d1f\u53f7\u3002 \u6211\u4eec\u5c3d\u53ef\u80fd\u5c06\u8d1f\u53f7\u4e0e\u540e\u9762\u6240\u6709\u8fde\u7eed\u51fa\u73b0\u7684\u6570\u5b57\u7ec4\u5408\u8d77\u6765\uff0c\u6700\u540e\u5f97\u5230 -42 \u3002 \u793a\u4f8b 3: \u8f93\u5165: \"4193 with words\" \u8f93\u51fa: 4193 \u89e3\u91ca: \u8f6c\u6362\u622a\u6b62\u4e8e\u6570\u5b57 '3' \uff0c\u56e0\u4e3a\u5b83\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e0d\u4e3a\u6570\u5b57\u3002 \u793a\u4f8b 4: \u8f93\u5165: \"words and 987\" \u8f93\u51fa: 0 \u89e3\u91ca: \u7b2c\u4e00\u4e2a\u975e\u7a7a\u5b57\u7b26\u662f 'w', \u4f46\u5b83\u4e0d\u662f\u6570\u5b57\u6216\u6b63\u3001\u8d1f\u53f7\u3002 \u56e0\u6b64\u65e0\u6cd5\u6267\u884c\u6709\u6548\u7684\u8f6c\u6362\u3002 \u793a\u4f8b 5: \u8f93\u5165: \"-91283472332\" \u8f93\u51fa: -2147483648 \u89e3\u91ca: \u6570\u5b57 \"-91283472332\" \u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4\u3002 \u56e0\u6b64\u8fd4\u56de INT_MIN (\u2212231) \u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/8.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u6ce8\u610f\u4e00\u4e2a\u6709\u6548\u7684\u6570\u5b57\u5b57\u7b26\u4e32\u53ef\u4ee5\u4ee5 0-9 \u3001 '-' \u3001 '+' \u548c\u7a7a\u683c ' ' \u5f00\u5934\u3002 \u4e3a\u4e86\u907f\u514d\u6ea2\u51fa\uff0c\u5e94\u5f53\u4f7f\u7528 long \u7c7b\u578b\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a int myAtoi ( char * str ){ int flag = 0 ; char * cur = str ; while ( * cur && * cur == ' ' ) cur ++ ; if ( * cur == '-' || * cur == '+' ) flag = * ( cur ++ ) - '+' ; if ( * cur < '0' || * cur > '9' ) return 0 ; long ret = 0 ; while ( * cur >= '0' && * cur <= '9' ) { ret *= 10 ; ret += * cur - '0' ; cur ++ ; if ( ret >= - ( long ) INT_MIN || ( ret == ( long ) INT_MAX && ! flag )) return flag ? INT_MIN : INT_MAX ; } return flag ? - ret : ret ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/88.html","text":"88. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u7ed9\u4f60\u4e24\u4e2a\u6709\u5e8f\u6574\u6570\u6570\u7ec4 nums1 \u548c nums2 \uff0c\u8bf7\u4f60\u5c06 nums2 \u5408\u5e76\u5230 nums1 \u4e2d\uff0c\u4f7f nums1 \u6210\u4e3a\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002 \u8bf4\u660e: \u521d\u59cb\u5316 nums1 \u548c nums2 \u7684\u5143\u7d20\u6570\u91cf\u5206\u522b\u4e3a m \u548c n \u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe nums1 \u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff08\u7a7a\u95f4\u5927\u5c0f\u5927\u4e8e\u6216\u7b49\u4e8e m + n \uff09\u6765\u4fdd\u5b58 nums2 \u4e2d\u7684\u5143\u7d20\u3002 \u793a\u4f8b\uff1a \u8f93\u5165: nums1 = [1,2,3,0,0,0], m = 3 nums2 = [2,5,6], n = 3 \u8f93\u51fa: [1,2,2,3,5,6] Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u76f4\u63a5\u5728 nums1 \u7684\u5185\u5b58\u7a7a\u95f4\u4e0a\u4ece\u540e\u5411\u524d\u539f\u4f4d\u5408\u5e76\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a #define MAX(x, y) (x > y ? x : y) void merge ( int * nums1 , int nums1Size , int m , int * nums2 , int nums2Size , int n ){ int x = m - 1 , y = n - 1 ; while ( y >= 0 && x >= 0 ) { nums1 [ x + y + 1 ] = MAX ( nums1 [ x ], nums2 [ y ]); if ( nums1 [ x ] > nums2 [ y ]) x -- ; else y -- ; } if ( y >= 0 ) memcpy ( nums1 , nums2 , sizeof ( int ) * ( y + 1 )); }","title":"88. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4"},{"location":"coding/leetcode/88.html#88","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"88. \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u6570\u7ec4"},{"location":"coding/leetcode/88.html#_1","text":"\u7ed9\u4f60\u4e24\u4e2a\u6709\u5e8f\u6574\u6570\u6570\u7ec4 nums1 \u548c nums2 \uff0c\u8bf7\u4f60\u5c06 nums2 \u5408\u5e76\u5230 nums1 \u4e2d\uff0c\u4f7f nums1 \u6210\u4e3a\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u3002 \u8bf4\u660e: \u521d\u59cb\u5316 nums1 \u548c nums2 \u7684\u5143\u7d20\u6570\u91cf\u5206\u522b\u4e3a m \u548c n \u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe nums1 \u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff08\u7a7a\u95f4\u5927\u5c0f\u5927\u4e8e\u6216\u7b49\u4e8e m + n \uff09\u6765\u4fdd\u5b58 nums2 \u4e2d\u7684\u5143\u7d20\u3002 \u793a\u4f8b\uff1a \u8f93\u5165: nums1 = [1,2,3,0,0,0], m = 3 nums2 = [2,5,6], n = 3 \u8f93\u51fa: [1,2,2,3,5,6] Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/88.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u76f4\u63a5\u5728 nums1 \u7684\u5185\u5b58\u7a7a\u95f4\u4e0a\u4ece\u540e\u5411\u524d\u539f\u4f4d\u5408\u5e76\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a #define MAX(x, y) (x > y ? x : y) void merge ( int * nums1 , int nums1Size , int m , int * nums2 , int nums2Size , int n ){ int x = m - 1 , y = n - 1 ; while ( y >= 0 && x >= 0 ) { nums1 [ x + y + 1 ] = MAX ( nums1 [ x ], nums2 [ y ]); if ( nums1 [ x ] > nums2 [ y ]) x -- ; else y -- ; } if ( y >= 0 ) memcpy ( nums1 , nums2 , sizeof ( int ) * ( y + 1 )); }","title":"\u9898\u89e3"},{"location":"coding/leetcode/9.html","text":"9. \u56de\u6587\u6570 \u00b6 \u96be\u5ea6\uff1a \u7b80\u5355 \u9898\u76ee \u00b6 \u5224\u65ad\u4e00\u4e2a\u6574\u6570\u662f\u5426\u662f\u56de\u6587\u6570\u3002\u56de\u6587\u6570\u662f\u6307\u6b63\u5e8f\uff08\u4ece\u5de6\u5411\u53f3\uff09\u548c\u5012\u5e8f\uff08\u4ece\u53f3\u5411\u5de6\uff09\u8bfb\u90fd\u662f\u4e00\u6837\u7684\u6574\u6570\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 121 \u8f93\u51fa: true \u793a\u4f8b 2\uff1a \u8f93\u5165: -121 \u8f93\u51fa: false \u89e3\u91ca: \u4ece\u5de6\u5411\u53f3\u8bfb, \u4e3a -121 \u3002 \u4ece\u53f3\u5411\u5de6\u8bfb, \u4e3a 121- \u3002\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002 \u793a\u4f8b 3\uff1a \u8f93\u5165: 10 \u8f93\u51fa: false \u89e3\u91ca: \u4ece\u53f3\u5411\u5de6\u8bfb, \u4e3a 01 \u3002\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002 \u8fdb\u9636\uff1a \u4f60\u80fd\u4e0d\u5c06\u6574\u6570\u8f6c\u4e3a\u5b57\u7b26\u4e32\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5c0f\u4e8e0\u7684\u6570\u5fc5\u7136\u4e0d\u662f\u56de\u6587\u6570\uff1b \u5bf9\u4e8e\u975e\u8d1f\u6574\u6570\uff0c\u53ea\u9700\u8981\u5224\u65ad\u6309\u4f4d\u53cd\u8f6c\u540e\u7684\u6570\u503c\u4e0e\u539f\u6570\u503c\u662f\u5426\u76f8\u7b49\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a bool isPalindrome ( int x ){ if ( x < 0 ) return false ; long transformed = 0 , original = x ; while ( x ) { transformed *= 10 ; transformed += x % 10 ; x /= 10 ; } return transformed == original ; }","title":"9. \u56de\u6587\u6570"},{"location":"coding/leetcode/9.html#9","text":"\u96be\u5ea6\uff1a \u7b80\u5355","title":"9. \u56de\u6587\u6570"},{"location":"coding/leetcode/9.html#_1","text":"\u5224\u65ad\u4e00\u4e2a\u6574\u6570\u662f\u5426\u662f\u56de\u6587\u6570\u3002\u56de\u6587\u6570\u662f\u6307\u6b63\u5e8f\uff08\u4ece\u5de6\u5411\u53f3\uff09\u548c\u5012\u5e8f\uff08\u4ece\u53f3\u5411\u5de6\uff09\u8bfb\u90fd\u662f\u4e00\u6837\u7684\u6574\u6570\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 121 \u8f93\u51fa: true \u793a\u4f8b 2\uff1a \u8f93\u5165: -121 \u8f93\u51fa: false \u89e3\u91ca: \u4ece\u5de6\u5411\u53f3\u8bfb, \u4e3a -121 \u3002 \u4ece\u53f3\u5411\u5de6\u8bfb, \u4e3a 121- \u3002\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002 \u793a\u4f8b 3\uff1a \u8f93\u5165: 10 \u8f93\u51fa: false \u89e3\u91ca: \u4ece\u53f3\u5411\u5de6\u8bfb, \u4e3a 01 \u3002\u56e0\u6b64\u5b83\u4e0d\u662f\u4e00\u4e2a\u56de\u6587\u6570\u3002 \u8fdb\u9636\uff1a \u4f60\u80fd\u4e0d\u5c06\u6574\u6570\u8f6c\u4e3a\u5b57\u7b26\u4e32\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u5417\uff1f Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/9.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5c0f\u4e8e0\u7684\u6570\u5fc5\u7136\u4e0d\u662f\u56de\u6587\u6570\uff1b \u5bf9\u4e8e\u975e\u8d1f\u6574\u6570\uff0c\u53ea\u9700\u8981\u5224\u65ad\u6309\u4f4d\u53cd\u8f6c\u540e\u7684\u6570\u503c\u4e0e\u539f\u6570\u503c\u662f\u5426\u76f8\u7b49\u5373\u53ef\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a bool isPalindrome ( int x ){ if ( x < 0 ) return false ; long transformed = 0 , original = x ; while ( x ) { transformed *= 10 ; transformed += x % 10 ; x /= 10 ; } return transformed == original ; }","title":"\u9898\u89e3"},{"location":"coding/leetcode/98.html","text":"98. \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811 \u00b6 \u96be\u5ea6\uff1a \u4e2d\u7b49 \u9898\u76ee \u00b6 \u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5176\u662f\u5426\u662f\u4e00\u4e2a\u6709\u6548\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u5047\u8bbe\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u5177\u6709\u5982\u4e0b\u7279\u5f81\uff1a \u8282\u70b9\u7684\u5de6\u5b50\u6811\u53ea\u5305\u542b\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u6570\u3002 \u8282\u70b9\u7684\u53f3\u5b50\u6811\u53ea\u5305\u542b\u5927\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u6570\u3002 \u6240\u6709\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u81ea\u8eab\u5fc5\u987b\u4e5f\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 2 / \\ 1 3 \u8f93\u51fa: true \u793a\u4f8b 2\uff1a \u8f93\u5165: 5 / \\ 1 4 / \\ 3 6 \u8f93\u51fa: false \u89e3\u91ca: \u8f93\u5165\u4e3a: [5,1,4,null,null,3,6]\u3002 \u6839\u8282\u70b9\u7684\u503c\u4e3a 5 \uff0c\u4f46\u662f\u5176\u53f3\u5b50\u8282\u70b9\u503c\u4e3a 4 \u3002 Reference \u9898\u89e3 \u00b6 \u57fa\u672c\u601d\u8def\uff1a \u5c06\u4e8c\u53c9\u67e5\u627e\u6811\u4e2d\u5e8f\u5c55\u5f00\u4e3a\u94fe\u8868\uff0c\u5224\u65ad\u94fe\u8868\u662f\u5426\u662f\u6709\u5e8f\u7684\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for a binary tree node. * struct TreeNode { * int val; * struct TreeNode *left; * struct TreeNode *right; * }; */ struct ListNode * insert ( struct ListNode * List , int val ) { struct ListNode * ret = malloc ( sizeof ( struct ListNode )); ret -> val = val ; ret -> next = List ; return ret ; } struct ListNode * toList ( struct TreeNode * root , struct ListNode * List ) { if ( root == NULL ) return List ; List = toList ( root -> right , List ); List = insert ( List , root -> val ); List = toList ( root -> left , List ); return List ; } bool isValidBST ( struct TreeNode * root ){ if ( root == NULL ) return true ; struct ListNode * rec = toList ( root , NULL ), * cur = rec ; do { if ( cur -> next == NULL ) break ; if ( cur -> val >= cur -> next -> val ) return false ; cur = cur -> next ; } while ( true ); return true ; }","title":"98. \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811"},{"location":"coding/leetcode/98.html#98","text":"\u96be\u5ea6\uff1a \u4e2d\u7b49","title":"98. \u9a8c\u8bc1\u4e8c\u53c9\u641c\u7d22\u6811"},{"location":"coding/leetcode/98.html#_1","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5224\u65ad\u5176\u662f\u5426\u662f\u4e00\u4e2a\u6709\u6548\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u5047\u8bbe\u4e00\u4e2a\u4e8c\u53c9\u641c\u7d22\u6811\u5177\u6709\u5982\u4e0b\u7279\u5f81\uff1a \u8282\u70b9\u7684\u5de6\u5b50\u6811\u53ea\u5305\u542b\u5c0f\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u6570\u3002 \u8282\u70b9\u7684\u53f3\u5b50\u6811\u53ea\u5305\u542b\u5927\u4e8e\u5f53\u524d\u8282\u70b9\u7684\u6570\u3002 \u6240\u6709\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u81ea\u8eab\u5fc5\u987b\u4e5f\u662f\u4e8c\u53c9\u641c\u7d22\u6811\u3002 \u793a\u4f8b 1\uff1a \u8f93\u5165: 2 / \\ 1 3 \u8f93\u51fa: true \u793a\u4f8b 2\uff1a \u8f93\u5165: 5 / \\ 1 4 / \\ 3 6 \u8f93\u51fa: false \u89e3\u91ca: \u8f93\u5165\u4e3a: [5,1,4,null,null,3,6]\u3002 \u6839\u8282\u70b9\u7684\u503c\u4e3a 5 \uff0c\u4f46\u662f\u5176\u53f3\u5b50\u8282\u70b9\u503c\u4e3a 4 \u3002 Reference","title":"\u9898\u76ee"},{"location":"coding/leetcode/98.html#_2","text":"\u57fa\u672c\u601d\u8def\uff1a \u5c06\u4e8c\u53c9\u67e5\u627e\u6811\u4e2d\u5e8f\u5c55\u5f00\u4e3a\u94fe\u8868\uff0c\u5224\u65ad\u94fe\u8868\u662f\u5426\u662f\u6709\u5e8f\u7684\u3002 \u4ee3\u7801\u5982\u4e0b\uff1a /** * Definition for a binary tree node. * struct TreeNode { * int val; * struct TreeNode *left; * struct TreeNode *right; * }; */ struct ListNode * insert ( struct ListNode * List , int val ) { struct ListNode * ret = malloc ( sizeof ( struct ListNode )); ret -> val = val ; ret -> next = List ; return ret ; } struct ListNode * toList ( struct TreeNode * root , struct ListNode * List ) { if ( root == NULL ) return List ; List = toList ( root -> right , List ); List = insert ( List , root -> val ); List = toList ( root -> left , List ); return List ; } bool isValidBST ( struct TreeNode * root ){ if ( root == NULL ) return true ; struct ListNode * rec = toList ( root , NULL ), * cur = rec ; do { if ( cur -> next == NULL ) break ; if ( cur -> val >= cur -> next -> val ) return false ; cur = cur -> next ; } while ( true ); return true ; }","title":"\u9898\u89e3"},{"location":"coding/python/killable-thread.html","text":"Python\u5173\u95ed\u7ebf\u7a0b \u00b6 \u4f7f\u7528 PyThreadState_SetAsyncExc \u51fd\u6570\u5728\u5b50\u7ebf\u7a0b\u4e2d\u5f15\u53d1\u5f02\u5e38\uff0c\u4ece\u800c\u4f7f\u7ebf\u7a0b\u63d0\u524d\u7ed3\u675f\u3002 \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a import threading import ctypes import time class thread_with_exception ( threading . Thread ): def __init__ ( self , name ): threading . Thread . __init__ ( self ) self . name = name def run ( self ): # target function of the thread class try : while True : print ( 'running ' + self . name ) finally : print ( 'ended' ) def get_id ( self ): # returns id of the respective thread if hasattr ( self , '_thread_id' ): return self . _thread_id for id , thread in threading . _active . items (): if thread is self : return id def raise_exception ( self ): thread_id = self . get_id () res = ctypes . pythonapi . PyThreadState_SetAsyncExc ( thread_id , ctypes . py_object ( SystemExit )) if res > 1 : ctypes . pythonapi . PyThreadState_SetAsyncExc ( thread_id , 0 ) print ( 'Exception raise failure' ) t1 = thread_with_exception ( 'Thread 1' ) t1 . start () time . sleep ( 2 ) t1 . raise_exception () t1 . join () \u628a run() \u4e2d\u6267\u884c\u7684\u64cd\u4f5c\u4ee5\u53c2\u6570\u7684\u5f62\u5f0f\u4f20\u9012\uff1a class KillableThread ( threading . Thread ): \"\"\" A thread class extending threading.Thread, provides a kill() method to stop the thread and a getResult() method to get the return value of the thread. \"\"\" def __init__ ( self , func : Callable , * args , ** kwargs ): super () . __init__ () self . func : Callable = func self . funcArg : dict = kwargs self . funcTup : Tuple = args self . result : Any = None self . exception : Any = None def run ( self ): \"\"\" Executes the function here \"\"\" try : self . result = self . func ( * self . funcTup , ** self . funcArg ) except BaseException as e : self . exception = e def get_id ( self ): \"\"\" Get the id of the thread \"\"\" if hasattr ( self , '_thread_id' ): return self . _thread_id for id , thread in threading . _active . items (): if thread is self : return id def kill ( self ): \"\"\" Stops the thread \"\"\" thread_id = self . get_id () res = ctypes . pythonapi . PyThreadState_SetAsyncExc ( thread_id , ctypes . py_object ( SystemExit )) if res > 1 : ctypes . pythonapi . PyThreadState_SetAsyncExc ( thread_id , 0 ) print ( 'Exception raise failure' ) def getResult ( self ): if self . exception is None : return self . result else : raise self . exception \u6765\u6e90\uff1a https://www.geeksforgeeks.org/python-different-ways-to-kill-a-thread","title":"\u5173\u95ed\u8fd0\u884c\u7684\u7ebf\u7a0b"},{"location":"coding/python/killable-thread.html#python","text":"\u4f7f\u7528 PyThreadState_SetAsyncExc \u51fd\u6570\u5728\u5b50\u7ebf\u7a0b\u4e2d\u5f15\u53d1\u5f02\u5e38\uff0c\u4ece\u800c\u4f7f\u7ebf\u7a0b\u63d0\u524d\u7ed3\u675f\u3002 \u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a import threading import ctypes import time class thread_with_exception ( threading . Thread ): def __init__ ( self , name ): threading . Thread . __init__ ( self ) self . name = name def run ( self ): # target function of the thread class try : while True : print ( 'running ' + self . name ) finally : print ( 'ended' ) def get_id ( self ): # returns id of the respective thread if hasattr ( self , '_thread_id' ): return self . _thread_id for id , thread in threading . _active . items (): if thread is self : return id def raise_exception ( self ): thread_id = self . get_id () res = ctypes . pythonapi . PyThreadState_SetAsyncExc ( thread_id , ctypes . py_object ( SystemExit )) if res > 1 : ctypes . pythonapi . PyThreadState_SetAsyncExc ( thread_id , 0 ) print ( 'Exception raise failure' ) t1 = thread_with_exception ( 'Thread 1' ) t1 . start () time . sleep ( 2 ) t1 . raise_exception () t1 . join () \u628a run() \u4e2d\u6267\u884c\u7684\u64cd\u4f5c\u4ee5\u53c2\u6570\u7684\u5f62\u5f0f\u4f20\u9012\uff1a class KillableThread ( threading . Thread ): \"\"\" A thread class extending threading.Thread, provides a kill() method to stop the thread and a getResult() method to get the return value of the thread. \"\"\" def __init__ ( self , func : Callable , * args , ** kwargs ): super () . __init__ () self . func : Callable = func self . funcArg : dict = kwargs self . funcTup : Tuple = args self . result : Any = None self . exception : Any = None def run ( self ): \"\"\" Executes the function here \"\"\" try : self . result = self . func ( * self . funcTup , ** self . funcArg ) except BaseException as e : self . exception = e def get_id ( self ): \"\"\" Get the id of the thread \"\"\" if hasattr ( self , '_thread_id' ): return self . _thread_id for id , thread in threading . _active . items (): if thread is self : return id def kill ( self ): \"\"\" Stops the thread \"\"\" thread_id = self . get_id () res = ctypes . pythonapi . PyThreadState_SetAsyncExc ( thread_id , ctypes . py_object ( SystemExit )) if res > 1 : ctypes . pythonapi . PyThreadState_SetAsyncExc ( thread_id , 0 ) print ( 'Exception raise failure' ) def getResult ( self ): if self . exception is None : return self . result else : raise self . exception \u6765\u6e90\uff1a https://www.geeksforgeeks.org/python-different-ways-to-kill-a-thread","title":"Python\u5173\u95ed\u7ebf\u7a0b"},{"location":"latex/index.html","text":"LaTeX \u00b6 \u8bb0\u5f55LaTeX\u7684\u4f7f\u7528\u3002 LaTeX\u6570\u5b66\u516c\u5f0f LaTeX\u8bed\u53e5\u73af\u5883 \u4f7f\u7528LaTeX\u521b\u5efa\u5e7b\u706f\u7247","title":"\u76ee\u5f55"},{"location":"latex/index.html#latex","text":"\u8bb0\u5f55LaTeX\u7684\u4f7f\u7528\u3002 LaTeX\u6570\u5b66\u516c\u5f0f LaTeX\u8bed\u53e5\u73af\u5883 \u4f7f\u7528LaTeX\u521b\u5efa\u5e7b\u706f\u7247","title":"LaTeX"},{"location":"latex/cheatsheet.html","text":"LaTeX \u6570\u5b66\u516c\u5f0f \u00b6 \u6536\u96c6 \\LaTeX \\LaTeX \u5e38\u7528\u7684\u6570\u5b66\u516c\u5f0f\u547d\u4ee4 \u5b57\u6bcd\u53d8\u4f53 \u00b6 \u5e38\u7528\u547d\u4ee4\u6709\uff1a \\mathcal \u3001 \\mathbb \u3001 \\mathfrak \u3001 \\mathsf \u3001 \\mathbf \u3001 \\boldsymbol \u3001 \\mathit \u3001 \\mathrm \u7b49\u3002\u5176\u4e2d \\mathcal \u3001 \\mathbb \u4ec5\u9002\u7528\u4e8e\u5927\u5199\u5b57\u6bcd\uff0c\u5176\u4f59\u547d\u4ee4\u5927\u5199\u3001\u5c0f\u5199\u5b57\u6bcd\u901a\u7528 \\mathcal{A} \uff1a \\mathcal A \\mathcal A \\mathbb{A} \uff1a \\mathbb A \\mathbb A \\mathfrak{A} \uff1a \\mathfrak A \\mathfrak A \\mathsf{A} \uff1a \\mathsf A \\mathsf A \\mathbf{A} \uff1a \\mathbf A \\mathbf A \\boldsymbol{A} \uff1a \\boldsymbol A \\boldsymbol A \\mathit{A} \uff1a \\mathit A \\mathit A \uff08\u65e0\u6548\u679c\uff09 \\mathrm{A} \uff1a \\mathrm A \\mathrm A \\mathscr{A} \uff1a \\mathscr A \\mathscr A \uff08\u9700\u8981\u5f15\u5165\u5b8f\u5305 mathrsfs \uff09 \u5e0c\u814a\u5b57\u6bcd \u00b6 \u5c0f\u5199 \u547d\u4ee4 \u5927\u5199 \u547d\u4ee4 \u53d8\u4f53 \u547d\u4ee4 \\alpha \\alpha \\alpha A A A \\beta \\beta \\beta B B B \\gamma \\gamma \\gamma \\Gamma \\Gamma \\Gamma \\varGamma \\varGamma \\varGamma \\delta \\delta \\delta \\Delta \\Delta \\Delta \\varDelta \\varDelta \\varDelta \\epsilon \\epsilon \\epsilonn E E E \\varepsilon \\varepsilon \\varepsilon \\zeta \\zeta \\zeta Z Z Z \\eta \\eta \\eta H H H \\theta \\theta \\theta \\Theta \\Theta \\Theta \\vartheta,\\varTheta \\vartheta,\\varTheta \\vartheta,\\varTheta \\iota \\iota \\iota I I I \\kappa \\kappa \\kappa K K K \\varkappa \\varkappa \\varkappa \\lambda \\lambda \\lambda \\Lambda \\Lambda \\Lambda \\varLambda \\varLambda \\varLambda \\mu \\mu \\mu M M M \\nu \\nu \\nu N N N \\xi \\xi \\xi \\Xi \\Xi \\Xi \\varXi \\varXi \\varXi o o o O O O \\pi \\pi \\pi \\Pi \\Pi \\Pi \\varpi, \\varPi \\varpi, \\varPi \\varpi,\\varPi \\rho \\rho \\rho P P P \\varrho \\varrho \\varrho \\sigma \\sigma \\sigma \\Sigma \\Sigma \\Sigma \\varsigma, \\varSigma \\varsigma, \\varSigma \\varsigma,\\varSigma \\tau \\tau \\tau T T T \\upsilon \\upsilon \\upsilon \\Upsilon \\Upsilon \\Upsilon \\varUpsilon \\varUpsilon \\varUpsilon \\phi \\phi \\phi \\Phi \\Phi \\Phi \\varphi, \\varPhi \\varphi, \\varPhi \\varphi,\\varPhi \\chi \\chi \\chi X X X \\psi \\psi \\psi \\Psi \\Psi \\Psi \\varPsi \\varPsi \\varPsi \\omega \\omega \\omega \\Omega \\Omega \\Omega \\varOmega \\varOmega \\varOmega \u8fd0\u7b97\u7b26 \u00b6 \u5e38\u89c1\u8fd0\u7b97\u7b26\u5217\u4e8e\u4e0b\u8868\uff1a \u6570\u5b66\u8fd0\u7b97 \u00b6 \u8fd0\u7b97\u7b26 \u547d\u4ee4 \\times \\times \\times \\div \\div \\div \\odot \\odot \\odot \\oplus \\oplus \\oplus \\otimes \\otimes \\otimes \u96c6\u5408\u8fd0\u7b97 \u00b6 \u8fd0\u7b97\u7b26 \u547d\u4ee4 \\in \\in \\in \\ni \\ni \\ni \\subset \\subset \\subset \\subseteq \\subseteq \\subseteq \\subseteqq \\subseteqq \\oplsubseteqqu \\subsetneq \\subsetneq \\subsetneq \\subsetneqq \\subsetneqq \\subsetneqq \\supset \\supset \\subset \\supseteq \\supseteq \\subseteq \\supseteqq \\supseteqq \\oplsubseteqqu \\supsetneq \\supsetneq \\subsetneq \\supsetneqq \\supsetneqq \\subsetneqq \\cap \\cap \\cap \\cup \\cup \\cup \u5173\u7cfb\u8fd0\u7b97\u7b26 \u00b6 \u8fd0\u7b97\u7b26 \u547d\u4ee4 \\geq \\geq \\geq \\geqq \\geqq \\geqq \\geqslant \\geqslant \\geqslant \\gg \\gg \\gg \\ggg \\ggg \\ggg \\leq \\leq \\leq \\leqq \\leqq \\leqq \\leqslant \\leqslant \\leqslant \\ll \\ll \\ll \\lll \\lll \\lll \\sim \\sim \\sim \\approx \\approx \\approx \u903b\u8f91\u8fd0\u7b97\u7b26 \u00b6 \u8fd0\u7b97\u7b26 \u547d\u4ee4 \\lnot \\lnot \\lnot \\land \\land \\land \\lor \\lor \\lor \\forall \\forall \\forall \\exists \\exists \\exists \u51fd\u6570\u4e0e\u590d\u6742\u8fd0\u7b97 \u00b6 \u8fd0\u7b97\u7b26 \u547d\u4ee4 \\frac ab \\frac ab \\frac{a}{b} \\sum_i^n f \\sum_i^n f \\sum_{i}^{n} f \\prod_i^n f \\prod_i^n f \\prod_{i}^{n} f \\sqrt[x]{y} \\sqrt[x]{y} \\sqrt[x]{y} \\int_a^bf(x)\\mathrm dx \\int_a^bf(x)\\mathrm dx \\int_a^bf(x)\\mathrm dx \\oint_Df(x)\\mathrm dx \\oint_Df(x)\\mathrm dx \\oint_Df(x)\\mathrm dx \\iint_Df(x)\\mathrm dx \\iint_Df(x)\\mathrm dx \\iint_Df(x)\\mathrm dx \\iiint_Df(x)\\mathrm dx \\iiint_Df(x)\\mathrm dx \\iiint_Df(x)\\mathrm dx \\partial \\partial \\partial \\log \\log \\log \\ln \\ln \\ln \\lg \\lg \\lg \\exp \\exp \\exp a\\mod b a\\mod b a\\mod b \\max \\max \\max \\min \\min \\min \\arg \\arg \\arg \\sin \\sin \\sin \\cos \\cos \\cos \\tan \\tan \\tan \\cot \\cot \\cot \\sinh \\sinh \\sinh \\cosh \\cosh \\cosh \\tanh \\tanh \\tanh \\coth \\coth \\coth \\arcsin \\arcsin \\arcsin \\arccos \\arccos \\arccos \\arctan \\arctan \\arctan \\ker \\ker \\ker \\dim \\dim \\dim \\det \\det \\det \\lim \\lim \\lim \\inf \\inf \\inf \u62ec\u53f7 \u00b6 \u8fd0\u7b97\u7b26 \u547d\u4ee4 \\{ \\{ \\{ \\} \\} \\} \\langle \\langle \\langle \\rangle \\rangle \\rangle \\lceil \\lceil \\lceil \\rceil \\rceil \\rceil \\lfloor \\lfloor \\lfloor \\rfloor \\rfloor \\rfloor \\| \\| \\|","title":"\u6570\u5b66\u516c\u5f0f"},{"location":"latex/cheatsheet.html#latex","text":"\u6536\u96c6 \\LaTeX \\LaTeX \u5e38\u7528\u7684\u6570\u5b66\u516c\u5f0f\u547d\u4ee4","title":"LaTeX \u6570\u5b66\u516c\u5f0f"},{"location":"latex/cheatsheet.html#_1","text":"\u5e38\u7528\u547d\u4ee4\u6709\uff1a \\mathcal \u3001 \\mathbb \u3001 \\mathfrak \u3001 \\mathsf \u3001 \\mathbf \u3001 \\boldsymbol \u3001 \\mathit \u3001 \\mathrm \u7b49\u3002\u5176\u4e2d \\mathcal \u3001 \\mathbb \u4ec5\u9002\u7528\u4e8e\u5927\u5199\u5b57\u6bcd\uff0c\u5176\u4f59\u547d\u4ee4\u5927\u5199\u3001\u5c0f\u5199\u5b57\u6bcd\u901a\u7528 \\mathcal{A} \uff1a \\mathcal A \\mathcal A \\mathbb{A} \uff1a \\mathbb A \\mathbb A \\mathfrak{A} \uff1a \\mathfrak A \\mathfrak A \\mathsf{A} \uff1a \\mathsf A \\mathsf A \\mathbf{A} \uff1a \\mathbf A \\mathbf A \\boldsymbol{A} \uff1a \\boldsymbol A \\boldsymbol A \\mathit{A} \uff1a \\mathit A \\mathit A \uff08\u65e0\u6548\u679c\uff09 \\mathrm{A} \uff1a \\mathrm A \\mathrm A \\mathscr{A} \uff1a \\mathscr A \\mathscr A \uff08\u9700\u8981\u5f15\u5165\u5b8f\u5305 mathrsfs \uff09","title":"\u5b57\u6bcd\u53d8\u4f53"},{"location":"latex/cheatsheet.html#_2","text":"\u5c0f\u5199 \u547d\u4ee4 \u5927\u5199 \u547d\u4ee4 \u53d8\u4f53 \u547d\u4ee4 \\alpha \\alpha \\alpha A A A \\beta \\beta \\beta B B B \\gamma \\gamma \\gamma \\Gamma \\Gamma \\Gamma \\varGamma \\varGamma \\varGamma \\delta \\delta \\delta \\Delta \\Delta \\Delta \\varDelta \\varDelta \\varDelta \\epsilon \\epsilon \\epsilonn E E E \\varepsilon \\varepsilon \\varepsilon \\zeta \\zeta \\zeta Z Z Z \\eta \\eta \\eta H H H \\theta \\theta \\theta \\Theta \\Theta \\Theta \\vartheta,\\varTheta \\vartheta,\\varTheta \\vartheta,\\varTheta \\iota \\iota \\iota I I I \\kappa \\kappa \\kappa K K K \\varkappa \\varkappa \\varkappa \\lambda \\lambda \\lambda \\Lambda \\Lambda \\Lambda \\varLambda \\varLambda \\varLambda \\mu \\mu \\mu M M M \\nu \\nu \\nu N N N \\xi \\xi \\xi \\Xi \\Xi \\Xi \\varXi \\varXi \\varXi o o o O O O \\pi \\pi \\pi \\Pi \\Pi \\Pi \\varpi, \\varPi \\varpi, \\varPi \\varpi,\\varPi \\rho \\rho \\rho P P P \\varrho \\varrho \\varrho \\sigma \\sigma \\sigma \\Sigma \\Sigma \\Sigma \\varsigma, \\varSigma \\varsigma, \\varSigma \\varsigma,\\varSigma \\tau \\tau \\tau T T T \\upsilon \\upsilon \\upsilon \\Upsilon \\Upsilon \\Upsilon \\varUpsilon \\varUpsilon \\varUpsilon \\phi \\phi \\phi \\Phi \\Phi \\Phi \\varphi, \\varPhi \\varphi, \\varPhi \\varphi,\\varPhi \\chi \\chi \\chi X X X \\psi \\psi \\psi \\Psi \\Psi \\Psi \\varPsi \\varPsi \\varPsi \\omega \\omega \\omega \\Omega \\Omega \\Omega \\varOmega \\varOmega \\varOmega","title":"\u5e0c\u814a\u5b57\u6bcd"},{"location":"latex/cheatsheet.html#_3","text":"\u5e38\u89c1\u8fd0\u7b97\u7b26\u5217\u4e8e\u4e0b\u8868\uff1a","title":"\u8fd0\u7b97\u7b26"},{"location":"latex/cheatsheet.html#_4","text":"\u8fd0\u7b97\u7b26 \u547d\u4ee4 \\times \\times \\times \\div \\div \\div \\odot \\odot \\odot \\oplus \\oplus \\oplus \\otimes \\otimes \\otimes","title":"\u6570\u5b66\u8fd0\u7b97"},{"location":"latex/cheatsheet.html#_5","text":"\u8fd0\u7b97\u7b26 \u547d\u4ee4 \\in \\in \\in \\ni \\ni \\ni \\subset \\subset \\subset \\subseteq \\subseteq \\subseteq \\subseteqq \\subseteqq \\oplsubseteqqu \\subsetneq \\subsetneq \\subsetneq \\subsetneqq \\subsetneqq \\subsetneqq \\supset \\supset \\subset \\supseteq \\supseteq \\subseteq \\supseteqq \\supseteqq \\oplsubseteqqu \\supsetneq \\supsetneq \\subsetneq \\supsetneqq \\supsetneqq \\subsetneqq \\cap \\cap \\cap \\cup \\cup \\cup","title":"\u96c6\u5408\u8fd0\u7b97"},{"location":"latex/cheatsheet.html#_6","text":"\u8fd0\u7b97\u7b26 \u547d\u4ee4 \\geq \\geq \\geq \\geqq \\geqq \\geqq \\geqslant \\geqslant \\geqslant \\gg \\gg \\gg \\ggg \\ggg \\ggg \\leq \\leq \\leq \\leqq \\leqq \\leqq \\leqslant \\leqslant \\leqslant \\ll \\ll \\ll \\lll \\lll \\lll \\sim \\sim \\sim \\approx \\approx \\approx","title":"\u5173\u7cfb\u8fd0\u7b97\u7b26"},{"location":"latex/cheatsheet.html#_7","text":"\u8fd0\u7b97\u7b26 \u547d\u4ee4 \\lnot \\lnot \\lnot \\land \\land \\land \\lor \\lor \\lor \\forall \\forall \\forall \\exists \\exists \\exists","title":"\u903b\u8f91\u8fd0\u7b97\u7b26"},{"location":"latex/cheatsheet.html#_8","text":"\u8fd0\u7b97\u7b26 \u547d\u4ee4 \\frac ab \\frac ab \\frac{a}{b} \\sum_i^n f \\sum_i^n f \\sum_{i}^{n} f \\prod_i^n f \\prod_i^n f \\prod_{i}^{n} f \\sqrt[x]{y} \\sqrt[x]{y} \\sqrt[x]{y} \\int_a^bf(x)\\mathrm dx \\int_a^bf(x)\\mathrm dx \\int_a^bf(x)\\mathrm dx \\oint_Df(x)\\mathrm dx \\oint_Df(x)\\mathrm dx \\oint_Df(x)\\mathrm dx \\iint_Df(x)\\mathrm dx \\iint_Df(x)\\mathrm dx \\iint_Df(x)\\mathrm dx \\iiint_Df(x)\\mathrm dx \\iiint_Df(x)\\mathrm dx \\iiint_Df(x)\\mathrm dx \\partial \\partial \\partial \\log \\log \\log \\ln \\ln \\ln \\lg \\lg \\lg \\exp \\exp \\exp a\\mod b a\\mod b a\\mod b \\max \\max \\max \\min \\min \\min \\arg \\arg \\arg \\sin \\sin \\sin \\cos \\cos \\cos \\tan \\tan \\tan \\cot \\cot \\cot \\sinh \\sinh \\sinh \\cosh \\cosh \\cosh \\tanh \\tanh \\tanh \\coth \\coth \\coth \\arcsin \\arcsin \\arcsin \\arccos \\arccos \\arccos \\arctan \\arctan \\arctan \\ker \\ker \\ker \\dim \\dim \\dim \\det \\det \\det \\lim \\lim \\lim \\inf \\inf \\inf","title":"\u51fd\u6570\u4e0e\u590d\u6742\u8fd0\u7b97"},{"location":"latex/cheatsheet.html#_9","text":"\u8fd0\u7b97\u7b26 \u547d\u4ee4 \\{ \\{ \\{ \\} \\} \\} \\langle \\langle \\langle \\rangle \\rangle \\rangle \\lceil \\lceil \\lceil \\rceil \\rceil \\rceil \\lfloor \\lfloor \\lfloor \\rfloor \\rfloor \\rfloor \\| \\| \\|","title":"\u62ec\u53f7"},{"location":"latex/environ.html","text":"LaTeX\u8bed\u53e5\u5757\uff08\u73af\u5883\uff09 \u00b6 \u5217\u8868\u73af\u5883 \u00b6 \u5728LaTeX\u4e2d\uff0c enumerate \u73af\u5883\u5b9a\u4e49\u4e86\u7f16\u53f7\u5217\u8868\uff0c itemize \u73af\u5883\u4e0e description \u73af\u5883\u5b9a\u4e49\u4e86\u7b26\u53f7\u5217\u8868\u3002\u6240\u6709\u7684\u5217\u8868\u4f7f\u7528 \\item \u547d\u4ee4\u5b9a\u4e49\u5217\u8868\u9879\u3002\u5217\u8868\u53ef\u4ee5\u81ea\u5b9a\u4e49\u4f7f\u7528\u7684\u7f16\u53f7\u4e0e\u7b26\u53f7\u3002 \u5f53\u5217\u8868\u88ab\u5d4c\u5957\u65f6\uff0c\u4e0d\u540c\u5c42\u6b21\u7684\u5217\u8868\u4f1a\u4f7f\u7528\u4e0d\u540c\u7684\u7f16\u53f7\u4ee5\u907f\u514d\u6df7\u6dc6\u3002 enumerate \u73af\u5883 \u00b6 enumerate \u73af\u5883\u7684\u4f7f\u7528\u65b9\u5f0f\u5982\u4e0b\uff1a \\begin { enumerate } \\item This is an item. \\item This is an item. \\item This is an item. \\end { enumerate } \u6e32\u67d3\u540e\u7684\u6548\u679c\uff1a This is an item. This is an item. This is an item. enumerate \u73af\u5883\u9ed8\u8ba4\u4f7f\u7528 1. 2. 3. ... \u8fdb\u884c\u7f16\u53f7\uff0c\u81ea\u5b9a\u4e49\u7f16\u53f7\u901a\u8fc7\u5728 \\begin{enumerate} \u540e\u6dfb\u52a0\u53c2\u6570\u5b9e\u73b0\u3002 \\begin { enumerate } [A.] \\item This is an item. \\item This is an item. \\item This is an item. \\end { enumerate } \u6e32\u67d3\u540e\u7684\u6548\u679c\uff1a A. This is an item. B. This is an item. C. This is an item. \u81ea\u5b9a\u4e49\u7f16\u53f7\u5217\u8868\u9700\u8981\u5f15\u5165 enumerate \u5305 \uff1a \\usepackage{enumerate} itemize \u73af\u5883 \u00b6 itemize \u73af\u5883\u7528\u4e8e\u751f\u6210\u7b26\u53f7\u5217\u8868\uff0c\u4f7f\u7528\u65b9\u5f0f\u5982\u4e0b\uff1a \\begin { itemize } \\item This is an item. \\item This is an item. \\item This is an item. \\end { itemize } \u6e32\u67d3\u540e\u7684\u6548\u679c\uff1a This is an item. This is an item. This is an item. \\item \u547d\u4ee4\u53ef\u4ee5\u4f7f\u7528\u4e2d\u62ec\u53f7\u6307\u5b9a\u5f53\u524d\u9879\u4f7f\u7528\u7684\u7b26\u53f7\uff0c\u5982 \\item[-] \u4f7f\u7528 - \u4f5c\u4e3a\u7b26\u53f7","title":"LaTeX\u8bed\u53e5\u5757\uff08\u73af\u5883\uff09"},{"location":"latex/environ.html#latex","text":"","title":"LaTeX\u8bed\u53e5\u5757\uff08\u73af\u5883\uff09"},{"location":"latex/environ.html#_1","text":"\u5728LaTeX\u4e2d\uff0c enumerate \u73af\u5883\u5b9a\u4e49\u4e86\u7f16\u53f7\u5217\u8868\uff0c itemize \u73af\u5883\u4e0e description \u73af\u5883\u5b9a\u4e49\u4e86\u7b26\u53f7\u5217\u8868\u3002\u6240\u6709\u7684\u5217\u8868\u4f7f\u7528 \\item \u547d\u4ee4\u5b9a\u4e49\u5217\u8868\u9879\u3002\u5217\u8868\u53ef\u4ee5\u81ea\u5b9a\u4e49\u4f7f\u7528\u7684\u7f16\u53f7\u4e0e\u7b26\u53f7\u3002 \u5f53\u5217\u8868\u88ab\u5d4c\u5957\u65f6\uff0c\u4e0d\u540c\u5c42\u6b21\u7684\u5217\u8868\u4f1a\u4f7f\u7528\u4e0d\u540c\u7684\u7f16\u53f7\u4ee5\u907f\u514d\u6df7\u6dc6\u3002","title":"\u5217\u8868\u73af\u5883"},{"location":"latex/environ.html#enumerate","text":"enumerate \u73af\u5883\u7684\u4f7f\u7528\u65b9\u5f0f\u5982\u4e0b\uff1a \\begin { enumerate } \\item This is an item. \\item This is an item. \\item This is an item. \\end { enumerate } \u6e32\u67d3\u540e\u7684\u6548\u679c\uff1a This is an item. This is an item. This is an item. enumerate \u73af\u5883\u9ed8\u8ba4\u4f7f\u7528 1. 2. 3. ... \u8fdb\u884c\u7f16\u53f7\uff0c\u81ea\u5b9a\u4e49\u7f16\u53f7\u901a\u8fc7\u5728 \\begin{enumerate} \u540e\u6dfb\u52a0\u53c2\u6570\u5b9e\u73b0\u3002 \\begin { enumerate } [A.] \\item This is an item. \\item This is an item. \\item This is an item. \\end { enumerate } \u6e32\u67d3\u540e\u7684\u6548\u679c\uff1a A. This is an item. B. This is an item. C. This is an item. \u81ea\u5b9a\u4e49\u7f16\u53f7\u5217\u8868\u9700\u8981\u5f15\u5165 enumerate \u5305 \uff1a \\usepackage{enumerate}","title":"enumerate\u73af\u5883"},{"location":"latex/environ.html#itemize","text":"itemize \u73af\u5883\u7528\u4e8e\u751f\u6210\u7b26\u53f7\u5217\u8868\uff0c\u4f7f\u7528\u65b9\u5f0f\u5982\u4e0b\uff1a \\begin { itemize } \\item This is an item. \\item This is an item. \\item This is an item. \\end { itemize } \u6e32\u67d3\u540e\u7684\u6548\u679c\uff1a This is an item. This is an item. This is an item. \\item \u547d\u4ee4\u53ef\u4ee5\u4f7f\u7528\u4e2d\u62ec\u53f7\u6307\u5b9a\u5f53\u524d\u9879\u4f7f\u7528\u7684\u7b26\u53f7\uff0c\u5982 \\item[-] \u4f7f\u7528 - \u4f5c\u4e3a\u7b26\u53f7","title":"itemize\u73af\u5883"},{"location":"latex/slides.html","text":"\u4f7f\u7528LaTeX\u521b\u5efa\u5e7b\u706f\u7247 \u00b6 \u9996\u5148\uff0c\u9700\u8981\u6307\u5b9a documentclass \u4e3a beamer \u7c7b\u578b\uff1a \\documentclass { beamer } \u6bcf\u4e00\u5f20\u5e7b\u706f\u7247\u4f7f\u7528 frame \u73af\u5883\uff0c\u5982\u4e0b\u4ee3\u7801\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7a7a\u767d\u5e7b\u706f\u7247\uff1a \\begin { frame } \\end { frame } \u7b2c\u4e00\u9875PPT\u901a\u5e38\u663e\u793aPPT\u7684\u6807\u9898\u3001\u4f5c\u8005\u7684\u4e2a\u4eba\u4fe1\u606f\u7b49\u5185\u5bb9\uff1a \\title { \u6807\u9898 } \\subtitle { \u526f\u6807\u9898 } \\author { \u4f5c\u8005 } \\institute { \u7ec4\u7ec7 } \\date { \\today } % \u663e\u793a\u65e5\u671f \\titlepage","title":"\u5e7b\u706f\u7247"},{"location":"latex/slides.html#latex","text":"\u9996\u5148\uff0c\u9700\u8981\u6307\u5b9a documentclass \u4e3a beamer \u7c7b\u578b\uff1a \\documentclass { beamer } \u6bcf\u4e00\u5f20\u5e7b\u706f\u7247\u4f7f\u7528 frame \u73af\u5883\uff0c\u5982\u4e0b\u4ee3\u7801\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7a7a\u767d\u5e7b\u706f\u7247\uff1a \\begin { frame } \\end { frame } \u7b2c\u4e00\u9875PPT\u901a\u5e38\u663e\u793aPPT\u7684\u6807\u9898\u3001\u4f5c\u8005\u7684\u4e2a\u4eba\u4fe1\u606f\u7b49\u5185\u5bb9\uff1a \\title { \u6807\u9898 } \\subtitle { \u526f\u6807\u9898 } \\author { \u4f5c\u8005 } \\institute { \u7ec4\u7ec7 } \\date { \\today } % \u663e\u793a\u65e5\u671f \\titlepage","title":"\u4f7f\u7528LaTeX\u521b\u5efa\u5e7b\u706f\u7247"},{"location":"math/index.html","text":"\u6570\u5b66 \u00b6 \u4ee5\u4e0b\u6574\u7406\u4e86\u6570\u5b66\u8bfe\u4e0a\u7684\u5185\u5bb9 \u5fae\u79ef\u5206 \u7ebf\u6027\u4ee3\u6570 \u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1 \u8fd0\u7b79\u5b66 \u5bf9\u7b56\u3001\u51b3\u7b56\u4e0e\u6392\u961f\u8bba \u52a8\u6001\u7cfb\u7edf\u5206\u6790\u4e0e\u63a7\u5236","title":"\u76ee\u5f55"},{"location":"math/index.html#_1","text":"\u4ee5\u4e0b\u6574\u7406\u4e86\u6570\u5b66\u8bfe\u4e0a\u7684\u5185\u5bb9 \u5fae\u79ef\u5206 \u7ebf\u6027\u4ee3\u6570 \u6982\u7387\u8bba\u4e0e\u6570\u7406\u7edf\u8ba1 \u8fd0\u7b79\u5b66 \u5bf9\u7b56\u3001\u51b3\u7b56\u4e0e\u6392\u961f\u8bba \u52a8\u6001\u7cfb\u7edf\u5206\u6790\u4e0e\u63a7\u5236","title":"\u6570\u5b66"},{"location":"math/queue-theory/index.html","text":"\u5bf9\u7b56\u3001\u51b3\u7b56\u4e0e\u6392\u961f\u8bba \u00b6 \u8bfe\u7a0b\u76ee\u5f55\uff1a Chapter 1\uff0c Chapter 2\uff0c Chapter 3\uff0c Chapter 4\uff0c Chapter 5\uff0c Chapter 6\uff0c Chapter 7\uff0c Chapter 8\uff0c Chapter 9\uff0c Chapter 10\uff0c Chapter 11\uff0c Chapter 12 \uff0c\u5e38\u89c1\u7684\u6392\u961f\u6a21\u578b","title":"\u76ee\u5f55"},{"location":"math/queue-theory/index.html#_1","text":"\u8bfe\u7a0b\u76ee\u5f55\uff1a Chapter 1\uff0c Chapter 2\uff0c Chapter 3\uff0c Chapter 4\uff0c Chapter 5\uff0c Chapter 6\uff0c Chapter 7\uff0c Chapter 8\uff0c Chapter 9\uff0c Chapter 10\uff0c Chapter 11\uff0c Chapter 12 \uff0c\u5e38\u89c1\u7684\u6392\u961f\u6a21\u578b","title":"\u5bf9\u7b56\u3001\u51b3\u7b56\u4e0e\u6392\u961f\u8bba"},{"location":"math/queue-theory/chapter-12.html","text":"\u5e38\u89c1\u6392\u961f\u6a21\u578b \u00b6 \u4e00\u4e2a\u6392\u961f\u6a21\u578b\u4e3b\u8981\u7531\u4ee5\u4e0b\u90e8\u5206\u7ec4\u6210 \u987e\u5ba2\uff08\u5b9e\u4f53\uff09\u5904\u7406 \u5b9e\u4f53\u6392\u961f\u7b49\u5f85\u5904\u7406\uff08\u7cfb\u7edf\u7684\u6392\u961f\u7b56\u7565\u53ef\u80fd\u4e0d\u540c\uff0c\u635f\u5931\u5236\u4e0d\u5141\u8bb8\u6392\u961f\u3001\u6df7\u5408\u5236\u5141\u8bb8\u6392\u6709\u9650\u957f\u5ea6\u7684\u961f\u5217\uff09 \u5b9e\u4f53\u5904\u7406\u5b8c\u6bd5\uff0c\u79bb\u5f00\u7cfb\u7edf \u6392\u961f\u6a21\u578b\u7684\u63cf\u8ff0 \u00b6 \u8fdb\u5165\u7cfb\u7edf \u00b6 \u5047\u8bbe\u8fdb\u5165\u7cfb\u7edf\u7684\u5b9e\u4f53\u6570\u91cf\u65e0\u9650\u3002\u8003\u5bdf\u76f8\u90bb\u4e24\u4e2a\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\u7684\u65f6\u95f4\u5dee\uff1a \u5bf9\u4e8e\u5b9a\u957f\u5206\u5e03\uff0c\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\u7684\u65f6\u95f4\u5dee\u4e3a\u5e38\u91cf t t \uff0c t t \u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u4e3a\uff1a f(t; \\alpha)=\\left\\{ \\begin{aligned} & 1 & t=\\alpha \\\\ & 0 & t\\not =\\alpha \\end{aligned} \\right . f(t; \\alpha)=\\left\\{ \\begin{aligned} & 1 & t=\\alpha \\\\ & 0 & t\\not =\\alpha \\end{aligned} \\right . Poisson \u6d41\uff0c\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\u7684\u65f6\u95f4\u5dee\u72ec\u7acb\u540c\u5206\u5e03\uff0c\u670d\u4ece\u53c2\u6570\u4e3a \\lambda \\lambda \u7684\u6307\u6570\u5206\u5e03 f_{\\xi_i}(t; \\lambda)=\\left\\{ \\begin{aligned} & \\lambda e^{-\\lambda t} & t\\geq 0 \\\\ & 0 & t < 0 \\end{aligned} \\right . f_{\\xi_i}(t; \\lambda)=\\left\\{ \\begin{aligned} & \\lambda e^{-\\lambda t} & t\\geq 0 \\\\ & 0 & t < 0 \\end{aligned} \\right . Erlang \u5206\u5e03\uff0c\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\u7684\u65f6\u95f4\u5dee\u72ec\u7acb\u540c\u5206\u5e03\uff0c\u670d\u4ece\u5982\u4e0b\u516c\u5f0f\u6240\u793a\u7684\u5206\u5e03\u3002\u82e5\u67d0\u4e2a\u7cfb\u7edf\u4e2d\u6709 K K \u4e2a\u5e76\u8054\u7684\u670d\u52a1\u53f0\uff0c\u8f93\u5165\u5b9e\u4f53\u4e3a Poisson \u6d41\uff0c\u5219\u7b2c K K \u4e2a\u670d\u52a1\u53f0\u7684\u987e\u5ba2\u6d41\u4e3a Erlang \u6d41\uff0c\u524d\u9762\u6240\u6709 K - 1 K - 1 \u4e2a\u670d\u52a1\u53f0\u5728\u7b2c\u4e00\u4e2a\u5b9e\u4f53\u5230\u8fbe\u4ee5\u540e\u7684\u8f93\u5165\u6d41\u540c\u6837\u4e3a Erlang \u6d41\u3002 f(t; \\lambda, K)=\\left\\{ \\begin{aligned} & \\frac{\\lambda(\\lambda t)^{K-1}}{(K-1)!} & t\\geq 0 \\\\ & 0 & t < 0 \\end{aligned} \\right . f(t; \\lambda, K)=\\left\\{ \\begin{aligned} & \\frac{\\lambda(\\lambda t)^{K-1}}{(K-1)!} & t\\geq 0 \\\\ & 0 & t < 0 \\end{aligned} \\right . \u5b9e\u4f53\u6392\u961f\u4e0e\u5904\u7406 \u00b6 \u7cfb\u7edf\u4e2d\u53ef\u80fd\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u670d\u52a1\u53f0\u3002\u5728\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u670d\u52a1\u53f0\u90fd\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u65f6\uff0c\u65b0\u8fdb\u5165\u7684\u5b9e\u4f53\u65e0\u6cd5\u7acb\u5373\u8fdb\u884c\u5904\u7406\uff0c\u800c\u662f\u8fdb\u5165\u961f\u5217\u6216\u76f4\u63a5\u79bb\u5f00\uff0c\u53d6\u51b3\u4e8e\u7cfb\u7edf\u7684\u6392\u961f\u7b56\u7565\u3002\u6392\u961f\u7b56\u7565\u53ef\u4ee5\u5206\u4e3a\u635f\u5931\u5236\u3001\u7b49\u5f85\u5236\u4e0e\u6df7\u5408\u5236\u3002 \u5728\u635f\u5931\u5236\u7cfb\u7edf\u4e2d\uff0c\u5982\u679c\u65b0\u8fdb\u5165\u7684\u5b9e\u4f53\u4e0d\u80fd\u88ab\u7acb\u5373\u5904\u7406\uff0c\u5219\u4f1a\u79bb\u5f00\u7cfb\u7edf\u3002 \u5728\u7b49\u5f85\u5236\u7cfb\u7edf\u4e2d\uff0c\u5982\u679c\u65b0\u8fdb\u5165\u7684\u5b9e\u4f53\u4e0d\u80fd\u88ab\u7acb\u5373\u5904\u7406\uff0c\u5219\u4f1a\u5728\u961f\u5217\u4e2d\u7b49\u5f85\uff0c\u76f4\u5230\u88ab\u5904\u7406\u3002 \u5728\u6df7\u5408\u5236\u7cfb\u7edf\u4e2d\uff0c\u5982\u679c\u65b0\u8fdb\u5165\u7684\u5b9e\u4f53\u4e0d\u80fd\u88ab\u7acb\u5373\u5904\u7406\u4e14\u6b64\u65f6\u7684\u961f\u5217\u957f\u5ea6\u5927\u4e8e\u67d0\u4e00\u5e38\u6570\u503c\uff0c\u5219\u4f1a\u79bb\u5f00\u7cfb\u7edf\uff0c\u5426\u5219\u4f1a\u8fdb\u5165\u961f\u5217\u7b49\u5f85\u3002 \u5b9e\u4f53\u5728\u6392\u961f\u8fc7\u7a0b\u4e2d\u7684\u884c\u4e3a\u53ef\u4ee5\u5206\u4e3a\u5982\u4e0b\u7c7b\u578b\uff1a \u79bb\u5f00\uff1a\u5f53\u5b9e\u4f53\u5f97\u77e5\u9700\u8981\u7b49\u5f85\u6216\u6ca1\u6709\u8010\u5fc3\u7ee7\u7eed\u7b49\u5f85\u65f6\uff0c\u5b9e\u4f53\u53ef\u80fd\u9000\u51fa\u961f\u5217 \u53d8\u6362\uff1a\u5373\u5b9e\u4f53\u4e3a\u51cf\u5c11\u6392\u961f\u65f6\u95f4\u800c\u5728\u4e0d\u540c\u670d\u52a1\u53f0\u7684\u961f\u5217\u4e4b\u95f4\u79fb\u52a8 \u670d\u52a1\u53f0\u4f1a\u6309\u7167\u5982\u4e0b\u53ef\u80fd\u7684\u65b9\u5f0f\u8fdb\u884c\u670d\u52a1\uff1a FCFS\uff1a\u5148\u8fdb\u5165\u961f\u5217\u7684\u5148\u8fdb\u884c\u5904\u7406 LCFS\uff1a\u540e\u8fdb\u5165\u961f\u5217\u7684\u5148\u8fdb\u884c\u5904\u7406 \u968f\u673a\u5904\u7406 PS\uff1a\u4f18\u5148\u7ea7\u9ad8\u7684\u5b9e\u4f53\u5148\u8fdb\u884c\u5904\u7406 \u65ad\u7eed\u5904\u7406\uff1a\u5728\u5904\u7406\u67d0\u4e2a\u5b9e\u4f53\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u8f6c\u800c\u5904\u7406\u53e6\u4e00\u4e2a\u5b9e\u4f53\uff0c\u4e0d\u65ad\u5faa\u73af\u76f4\u5230\u5b9e\u4f53\u5904\u7406\u5b8c\u6210 \u5728\u7cfb\u7edf\u4e2d\u7684\u670d\u52a1\u53f0\u7684\u670d\u52a1\u65f6\u95f4\u662f\u4e00\u4e2a\u968f\u673a\u53d8\u91cf\uff0c\u6982\u7387\u5206\u5e03\u4e3a\u5e38\u6570\u3001\u6307\u6570\u5206\u5e03\u3001K\u7ea7 Erlang \u5206\u5e03\u3001\u4e00\u822c\u5206\u5e03\u7b49\u3002 \u7cfb\u7edf\u7684\u7b26\u53f7\u8868\u793a \u00b6 Kendall\u8bb0\u53f7\uff0c\u683c\u5f0f\u4e3a X/Y/Z/A/B/C X/Y/Z/A/B/C X X \u8868\u793a\u5b9e\u4f53\u5230\u8fbe\u95f4\u9694\u65f6\u95f4\u7684\u5206\u5e03 M M \u8868\u793a\u5230\u8fbe\u8fc7\u7a0b\u4e3a Poisson \u8fc7\u7a0b\uff08\u95f4\u9694\u65f6\u95f4\u670d\u4ece\u6307\u6570\u5206\u5e03\uff09\u6216\u8d1f\u6307\u6570\u5206\u5e03 D D \u8868\u793a\u95f4\u9694\u65f6\u95f4\u4e3a\u5e38\u6570 E_k E_k \u8868\u793a\u95f4\u9694\u65f6\u95f4\u670d\u4ece k k \u9636 Erlang \u5206\u5e03 G G \u8868\u793a\u95f4\u9694\u65f6\u95f4\u670d\u4ece\u4e00\u822c\u3001\u76f8\u4e92\u72ec\u7acb\u7684\u968f\u673a\u5206\u5e03 Y Y \u8868\u793a\u670d\u52a1\u53f0\u5355\u6b21\u670d\u52a1\u65f6\u95f4\u7684\u5206\u5e03\uff0c\u8bb0\u53f7\u4e0e X X \u7684\u542b\u4e49\u76f8\u540c Z Z \u8868\u793a\u670d\u52a1\u53f0\u4e2a\u6570 A A \u8868\u793a\u7cfb\u7edf\u7684\u7b49\u5f85\u7a7a\u95f4\u5bb9\u91cf\uff0c 0 0 \u4e3a\u635f\u5931\u5236\u7cfb\u7edf\uff0c \\infty \\infty \u4e3a\u7b49\u5f85\u5236\u7cfb\u7edf\uff0c\u5426\u5219\u4e3a\u6df7\u5408\u5236\u7cfb\u7edf\u3002 B B \u8868\u793a\u5b9e\u4f53\u7684\u603b\u6570\u91cf\uff0c \\infty \\infty \u8868\u793a\u5b9e\u4f53\u6e90\u65e0\u9650 C C \u8868\u793a\u670d\u52a1\u89c4\u5219 A, B, C A, B, C \u53c2\u6570\u53ef\u4ee5\u7701\u7565\u3002\u5206\u522b\u7b49\u4ef7\u4e8e \\infty, \\infty, \\mathit{FCFS} \\infty, \\infty, \\mathit{FCFS} \u7cfb\u7edf\u7684\u89c2\u6d4b\u6307\u6807 \u00b6 \u8861\u91cf\u7cfb\u7edf\u6027\u80fd\u7684\u5e38\u7528\u89c2\u6d4b\u6307\u6807\u4e3a\uff1a N(L) N(L) \uff1a\u7a33\u6001\u7cfb\u7edf\u7684\u961f\u957f\uff08\u6307\u7cfb\u7edf\u5185\u6240\u6709\u7684\u5b9e\u4f53\u6570\u91cf\uff09 N_q(L_q) N_q(L_q) \u7a33\u6001\u7cfb\u7edf\u7684\u6392\u961f\u957f T(W) T(W) \uff1a\u987e\u5ba2\u5728\u7a33\u6001\u7cfb\u7edf\u4e2d\u7684\u505c\u7559\u65f6\u95f4\uff08\u5904\u7406+\u7b49\u5f85\uff09 T_q(W_q) T_q(W_q) \uff1a\u987e\u5ba2\u5728\u7a33\u6001\u7cfb\u7edf\u4e2d\u7684\u7b49\u5f85\u65f6\u95f4 p_n p_n \uff1a\u7a33\u6001\u7cfb\u7edf\u4efb\u610f\u65f6\u523b\u72b6\u6001\u4e3a n n \u7684\u6982\u7387\uff0c p_n=P(N=n)=\\lim_{t\\rightarrow \\infty}P(N(t) = n) p_n=P(N=n)=\\lim_{t\\rightarrow \\infty}P(N(t) = n) \\rho \\rho \uff1a\u5229\u7528\u7387 p_D p_D \uff1a\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\u65f6\u9700\u8981\u7b49\u5f85\u7684\u6982\u7387 \u82e5\u5c06\u7cfb\u7edf\u89c6\u4e3a\u7ba1\u9053\uff0c\u7cfb\u7edf\u4e2d\u5b9e\u4f53\u7684\u6570\u91cf\u7b49\u4e8e\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\u7684\u901f\u5ea6\u4e0e\u7cfb\u7edf\u5e73\u5747\u54cd\u5e94\uff08\u5904\u7406\uff09\u65f6\u95f4\u4e4b\u79ef\u3002 \u5bf9\u4e8e M/M/s M/M/s \u7cfb\u7edf\uff0c\u4ee4 \\lambda \\lambda \u4e3a\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\u7684\u901f\u5ea6\uff0c \\mu \\mu \u4e3a\u670d\u52a1\u53f0\u5904\u7406\u5b9e\u4f53\u7684\u901f\u5ea6\uff0c s s \u4e3a\u670d\u52a1\u53f0\u7684\u6570\u91cf\uff0c\u5219\uff1a \\begin{aligned} L &= \\lambda_e W \\\\ L_q &= \\lambda_e W_q \\end{aligned} \\begin{aligned} L &= \\lambda_e W \\\\ L_q &= \\lambda_e W_q \\end{aligned} \u968f\u673a\u8fc7\u7a0b \u00b6 \u5e38\u89c1\u7684\u968f\u673a\u8fc7\u7a0b\u6709 Markov \u8fc7\u7a0b\u3001\u751f\u706d\u8fc7\u7a0b\u3001 Poisson \u8fc7\u7a0b\u7b49\u3002\u6240\u6709\u7684 Poisson \u8fc7\u7a0b\u90fd\u662f\u751f\u706d\u8fc7\u7a0b\uff0c\u6240\u6709\u7684\u751f\u706d\u8fc7\u7a0b\u90fd\u662f Markov \u8fc7\u7a0b\u3002 Markov \u8fc7\u7a0b \u00b6 \u7279\u70b9\uff1a t_0 t_0 \u65f6\u523b\u7684\u72b6\u6001\u4e0e\u4efb\u610f t<t_0 t<t_0 \u65f6\u7684\u72b6\u6001\u65e0\u5173 Markov \u94fe\u7531\u9a6c\u5c14\u53ef\u592b\u8fc7\u7a0b\u4e2d\u7684\u79bb\u6563\u72b6\u6001\u7ec4\u5408\u3002\u5bf9\u4e8e Markov \u8fc7\u7a0b\uff0c\u7cfb\u7edf\u65e0\u8bb0\u5fc6\u6027\uff0c\u5f53\u524d\u7684\u72b6\u6001\u4e0d\u4f1a\u5bf9\u540e\u9762\u7684\u72b6\u6001\u4ea7\u751f\u5f71\u54cd\u3002 M/M/s M/M/s \u7cfb\u7edf\u53ef\u4ee5\u4f7f\u7528 Markov \u8fc7\u7a0b\u5efa\u6a21\u3002\u961f\u5217\u4e2d\u5b9e\u4f53\u7684\u6570\u91cf\u662f\u4e00\u4e2a Markov \u94fe\u3002 \u751f\u706d\u8fc7\u7a0b \u00b6 \u751f\u706d\u8fc7\u7a0b\u6309\u5982\u4e0b\u56fe\u8fdb\u884c\u63cf\u8ff0\uff08\u72b6\u6001\u8f6c\u79fb\u56fe\uff09\uff1a \u5047\u8bbe\u5b9e\u4f53\u79bb\u6563\u8fdb\u5165\u7684 M/M/s M/M/s \u7cfb\u7edf\uff0c\u961f\u5217\u4e2d\u7684\u5b9e\u4f53\u6570\u91cf\u670d\u4ece\u751f\u706d\u8fc7\u7a0b Poisson \u8fc7\u7a0b \u00b6 \u5b9e\u4f53\u8fdb\u5165\u7684\u65f6\u95f4\u5dee\u76f8\u4e92\u72ec\u7acb\u4e14\u670d\u4ece\u540c\u4e00\u6307\u6570\u5206\u5e03\u7684\u8fc7\u7a0b \u751f\u706d\u8fc7\u7a0b \u00b6 \u5bf9\u4e8e\u751f\u706d\u8fc7\u7a0b\uff0c\u6709\u5982\u4e0b\u5047\u8bbe \u6bcf\u4e2a\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf \u5b9a\u4e49\u7cfb\u7edf\u7684\u72b6\u6001\u4e3a\u7cfb\u7edf\u4e2d\u7684\u5b9e\u4f53\u6570\u91cf n n \u4e00\u4e2a\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\uff0c\u7cfb\u7edf\u7684\u72b6\u6001\u7531 n-1 n-1 \u8f6c\u53d8\u4e3a n n \u4e00\u4e2a\u5b9e\u4f53\u79bb\u5f00\u7cfb\u7edf\uff0c\u7cfb\u7edf\u7684\u72b6\u6001\u7531 n n \u8f6c\u53d8\u4e3a n+1 n+1 \u7cfb\u7edf\u5904\u4e8e\u72b6\u6001 n n \u65f6\uff0c\u5b9a\u4e49\u5b9e\u4f53\u8fdb\u5165\u7684\u901f\u5ea6\u4e3a \\lambda _n \\lambda _n \uff0c\u7cfb\u7edf\u7684\u5904\u7406\u901f\u5ea6\u4e3a \\mu_n \\mu_n \u3002\u5bf9\u4e8e \\lambda_n \\lambda_n \uff0c n\\geq 0 n\\geq 0 \uff1b\u5bf9\u4e8e \\mu_n \\mu_n \uff0c n>0 n>0 \u95ee\u9898\uff1a\u7cfb\u7edf\u5904\u4e8e\u7a33\u5b9a\u72b6\u6001\u65f6\uff0c\u751f\u706d\u7cfb\u7edf\u5904\u4e8e\u72b6\u6001 n n \u7684\u6982\u7387 p_n p_n \uff1f \u5bf9\u4e8e\u5904\u4e8e\u72b6\u6001 j j \u7684\u7cfb\u7edf\uff0c\u8003\u5bdf\u4e00\u4e2a\u6781\u77ed\u7684\u65f6\u95f4\u95f4\u9694 \\Delta t \\Delta t \uff0c\u7531\u4e8e \\Delta t \\Delta t \u6781\u77ed\uff0c\u53ef\u4ee5\u5ffd\u7565 \\Delta t \\Delta t \u65f6\u95f4\u5185\u4e24\u4e2a\u5b9e\u4f53\u540c\u65f6\u8fdb\u5165/\u79bb\u5f00\u7cfb\u7edf\u6216\u4e00\u4e2a\u5b9e\u4f53\u8fdb\u5165\u3001\u4e00\u4e2a\u5b9e\u4f53\u79bb\u5f00\u7cfb\u7edf\u7684\u60c5\u51b5\u3002 \\Delta t \\Delta t \u65f6\u95f4\u5185\u7cfb\u7edf\u53d1\u751f\u53d8\u5316\u7684\u6982\u7387\u5982\u4e0b\uff1a \u4e00\u4e2a\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\uff1a P(n(t+\\Delta t)=j+1 | n(t) = j)=\\lambda_j\\Delta t P(n(t+\\Delta t)=j+1 | n(t) = j)=\\lambda_j\\Delta t \u4e00\u4e2a\u5b9e\u4f53\u79bb\u5f00\u7cfb\u7edf\uff1a P(n(t+\\Delta t)=j-1| n(t) = j) = \\mu_j\\Delta t P(n(t+\\Delta t)=j-1| n(t) = j) = \\mu_j\\Delta t \u7cfb\u7edf\u5728 \\Delta t \\Delta t \u65f6\u95f4\u5185\u6ca1\u6709\u53d1\u751f\u72b6\u6001\u6539\u53d8\uff1a P(n(t+\\Delta t) = j | n(t)=j) = 1 - (\\lambda_j+\\mu_j)\\Delta t P(n(t+\\Delta t) = j | n(t)=j) = 1 - (\\lambda_j+\\mu_j)\\Delta t \u6839\u636e\u5047\u8bbe\uff0c\u5904\u4e8e\u72b6\u6001 i i \u7684\u7cfb\u7edf\u5728 t+\\Delta t t+\\Delta t \u65f6\u53ea\u53ef\u80fd\u5904\u4e8e i-1, i, i+1 i-1, i, i+1 \u4e09\u79cd\u72b6\u6001\u4e2d\u7684\u4e00\u79cd\u3002\u4e5f\u5373\uff0c\u5904\u4e8e\u72b6\u6001 i i \u7684\u7cfb\u7edf\u5728 t-\\Delta t t-\\Delta t \u65f6\u53ea\u53ef\u80fd\u5904\u4e8e i-1, i, i+1 i-1, i, i+1 \u4e09\u79cd\u72b6\u6001\u4e2d\u7684\u4e00\u79cd\u3002\u7531\u6b64\uff0c\u53ef\u4ee5\u5217\u5f0f\u5982\u4e0b\uff1a \\begin{aligned} p_0(t+\\Delta t) &= (1-\\lambda_0\\Delta t)p_0(t) + \\mu_1\\Delta tp_1(t) \\\\ p_j(t+\\Delta t) &= \\lambda_{j-1}\\Delta tp_{j-1}(t)+(1-\\mu_j\\Delta t-\\lambda_j\\Delta t)p_j(t)+\\mu_{j+1}\\Delta tp_{j+1}(t) \\end{aligned} \\begin{aligned} p_0(t+\\Delta t) &= (1-\\lambda_0\\Delta t)p_0(t) + \\mu_1\\Delta tp_1(t) \\\\ p_j(t+\\Delta t) &= \\lambda_{j-1}\\Delta tp_{j-1}(t)+(1-\\mu_j\\Delta t-\\lambda_j\\Delta t)p_j(t)+\\mu_{j+1}\\Delta tp_{j+1}(t) \\end{aligned} \u6574\u7406\u540e\u53d6\u6781\u9650 \\Delta t\\rightarrow 0 \\Delta t\\rightarrow 0 \uff0c\u4e0a\u5f0f\u53d8\u4e3a\u5bfc\u6570\u5f62\u5f0f\uff1a \\begin{aligned} &\\lim_{\\Delta t\\rightarrow 0} \\frac{p_j(t+\\Delta t)-p_j(t)}{\\Delta t}=\\lambda_{j-1}p_{j-1}(t)+\\mu_{j+1}p_{j+1}(t) - (\\mu_j+\\lambda_j)p_j(t) \\\\ \\Rightarrow &\\frac{\\mathrm dp_j(t)}{\\mathrm dt}=\\lambda_{j-1}p_{j-1}(t)+\\mu_{j+1}p_{j+1}(t) - (\\mu_j+\\lambda_j)p_j(t) \\end{aligned} \\begin{aligned} &\\lim_{\\Delta t\\rightarrow 0} \\frac{p_j(t+\\Delta t)-p_j(t)}{\\Delta t}=\\lambda_{j-1}p_{j-1}(t)+\\mu_{j+1}p_{j+1}(t) - (\\mu_j+\\lambda_j)p_j(t) \\\\ \\Rightarrow &\\frac{\\mathrm dp_j(t)}{\\mathrm dt}=\\lambda_{j-1}p_{j-1}(t)+\\mu_{j+1}p_{j+1}(t) - (\\mu_j+\\lambda_j)p_j(t) \\end{aligned} \u5f53 t\\rightarrow \\infty t\\rightarrow \\infty \u65f6\uff0c\u7cfb\u7edf\u8d8b\u4e8e\u7a33\u6001\uff0c\u5219\u6709 \\lim_{t\\rightarrow \\infty}p_j(t) = p_j \\lim_{t\\rightarrow \\infty}p_j(t) = p_j \uff0c\u6536\u655b\u7684\u5145\u5206\u5fc5\u8981\u6761\u4ef6\u4e3a \\lim_{t\\rightarrow\\infty} \\frac{\\mathrm dp_j(t)}{\\mathrm dt}=0 \\lim_{t\\rightarrow\\infty} \\frac{\\mathrm dp_j(t)}{\\mathrm dt}=0 \u3002\u5373 \\lambda_{j-1}p_{j-1}(t)+\\mu_{j+1}p_{j+1}(t) - (\\mu_j+\\lambda_j)p_j(t)=0 \\lambda_{j-1}p_{j-1}(t)+\\mu_{j+1}p_{j+1}(t) - (\\mu_j+\\lambda_j)p_j(t)=0 \u3002 \u89e3 p_{j+1} p_{j+1} \uff0c\u89e3\u5f97\uff1a p_{j+1} = \\left(\\frac{\\mu_j+\\lambda_j}{\\mu{j+1}}\\right)p_j-\\frac{\\lambda_{j-1}}{\\mu_{j+1}}p_{j-1} p_{j+1} = \\left(\\frac{\\mu_j+\\lambda_j}{\\mu{j+1}}\\right)p_j-\\frac{\\lambda_{j-1}}{\\mu_{j+1}}p_{j-1} \u5bf9\u4e8e p_1 p_1 \uff0c\u6709 p_1=\\frac{\\lambda_0}{\\mu_1}p_0 p_1=\\frac{\\lambda_0}{\\mu_1}p_0 \u3002 \u6839\u636e\u9012\u63a8\u516c\u5f0f\uff0c\u53ef\u4ee5\u7528 p_0 p_0 \u8868\u793a\u51fa p_j p_j \uff1a \\begin{aligned} p_2&=\\left(\\frac{\\mu_1+\\lambda_1}{\\mu_2}\\right)p_1-\\frac{\\lambda _0}{\\mu_2}p_0 = \\frac{\\lambda_0(\\mu_1+\\lambda_1)}{\\mu_1\\mu_2}p_0-\\frac{\\lambda_0}{\\mu_2}p_0=\\frac{\\lambda_0\\lambda_1}{\\mu_1\\mu_2}p_0 \\\\ p_3&=\\left(\\frac{\\mu_2+\\lambda_2}{\\mu_3}\\right)p_2-\\frac{\\lambda_1}{\\mu_3}p_1=\\frac{\\lambda_0\\lambda_1(\\mu_2+\\lambda_2)}{\\mu_1\\mu_2\\mu_3}p_0-\\frac{\\lambda_0\\lambda_1}{\\mu_1\\mu_3}p_0=\\frac{\\lambda_0\\lambda_1\\lambda_2}{\\mu_1\\mu_2\\mu_3}p_0 \\\\ &\\vdots \\\\ &p_j = \\frac{\\lambda_0\\lambda_1\\cdots\\lambda_{j-1}}{\\mu_1\\mu_2\\cdots\\mu_j}p_0=p_0\\prod_{i = 1}^{j}\\frac{\\lambda_{i-1}}{\\mu_j} \\end{aligned} \\begin{aligned} p_2&=\\left(\\frac{\\mu_1+\\lambda_1}{\\mu_2}\\right)p_1-\\frac{\\lambda _0}{\\mu_2}p_0 = \\frac{\\lambda_0(\\mu_1+\\lambda_1)}{\\mu_1\\mu_2}p_0-\\frac{\\lambda_0}{\\mu_2}p_0=\\frac{\\lambda_0\\lambda_1}{\\mu_1\\mu_2}p_0 \\\\ p_3&=\\left(\\frac{\\mu_2+\\lambda_2}{\\mu_3}\\right)p_2-\\frac{\\lambda_1}{\\mu_3}p_1=\\frac{\\lambda_0\\lambda_1(\\mu_2+\\lambda_2)}{\\mu_1\\mu_2\\mu_3}p_0-\\frac{\\lambda_0\\lambda_1}{\\mu_1\\mu_3}p_0=\\frac{\\lambda_0\\lambda_1\\lambda_2}{\\mu_1\\mu_2\\mu_3}p_0 \\\\ &\\vdots \\\\ &p_j = \\frac{\\lambda_0\\lambda_1\\cdots\\lambda_{j-1}}{\\mu_1\\mu_2\\cdots\\mu_j}p_0=p_0\\prod_{i = 1}^{j}\\frac{\\lambda_{i-1}}{\\mu_j} \\end{aligned} \u7531\u4e8e\u7cfb\u7edf\u7684\u72b6\u6001\u53ea\u53ef\u80fd\u53d6 0\\sim\\infty 0\\sim\\infty \u4e4b\u95f4\u7684\u6574\u6570\u503c\uff0c\u6982\u7387\u4e4b\u548c\u4e3a 1 1 \uff0c\u53ef\u4ee5\u8ba1\u7b97\u51fa p_0 p_0 \uff1a p_0=\\frac{1}{1+\\sum_{n=1}^\\infty \\prod_{i=0}^{n}\\frac{\\lambda_{i-1}}{\\mu_i}} p_0=\\frac{1}{1+\\sum_{n=1}^\\infty \\prod_{i=0}^{n}\\frac{\\lambda_{i-1}}{\\mu_i}} M/M/1\u961f\u5217 \u00b6 \u5bf9\u4e8e M/M/1 M/M/1 \u7cfb\u7edf\uff0c \\lambda_0=\\lambda_1=\\cdots=\\lambda_n=\\lambda, \\mu_1=\\cdots=\\mu_n=\\mu \\lambda_0=\\lambda_1=\\cdots=\\lambda_n=\\lambda, \\mu_1=\\cdots=\\mu_n=\\mu \u3002 \u7531\u6b64\uff0c\u8ba1\u7b97\u51fa M/M/1 M/M/1 \u7cfb\u7edf\u5728\u7a33\u6001\u65f6\u5904\u4e8e p_0 p_0 \u7684\u6982\u7387\uff1a p_0=\\frac{1}{1+\\sum_{n=1}^\\infty \\prod_{i=0}^{n}\\frac{\\lambda}{\\mu}} = \\frac{1}{1+\\sum_{n=1}^\\infty \\rho^n}=\\frac{1}{\\sum_{n=0}^\\infty \\rho^n}=1-\\rho p_0=\\frac{1}{1+\\sum_{n=1}^\\infty \\prod_{i=0}^{n}\\frac{\\lambda}{\\mu}} = \\frac{1}{1+\\sum_{n=1}^\\infty \\rho^n}=\\frac{1}{\\sum_{n=0}^\\infty \\rho^n}=1-\\rho \u6982\u7387\u5206\u5e03\u4e3a\uff1a P(N=n)=\\rho^n(1-\\rho) P(N=n)=\\rho^n(1-\\rho) M/M/s\u961f\u5217 \u00b6 \u5bf9\u4e8e M/M/s M/M/s \u7cfb\u7edf\uff0c \\lambda_i, \\mu_i \\lambda_i, \\mu_i \u670d\u4ece\u5982\u4e0b\u89c4\u5f8b\uff1a \\lambda_i = \\lambda \\qquad i=0, 1\\cdots, \\infty \\lambda_i = \\lambda \\qquad i=0, 1\\cdots, \\infty \\mu_i = \\max\\{i, s\\}\\mu \\qquad i=1, 2, \\cdots, \\infty \\mu_i = \\max\\{i, s\\}\\mu \\qquad i=1, 2, \\cdots, \\infty \u8ba1\u7b97\u51fa M/M/s M/M/s \u7cfb\u7edf\u5728\u7a33\u6001\u65f6\u5904\u4e8e p_0 p_0 \u7684\u6982\u7387\uff0c\u4ee4 \\rho_0=\\frac{\\lambda}{\\mu} \\rho_0=\\frac{\\lambda}{\\mu} \uff1a \\begin{aligned} p_0&=\\frac{1}{1+\\sum_{n=1}^\\infty \\prod_{i=0}^{n}\\frac{\\lambda}{\\max\\{i, s\\}\\mu}} \\\\ &= \\frac{1}{\\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}+\\sum_{i=s}^\\infty \\frac{\\rho_0^i}{s!s^{i-s}}} \\\\ &=\\frac{1}{\\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}+\\frac{\\rho_0^s}{s!}\\sum_{i=0}^\\infty \\frac{\\rho_0^i}{s^i}} \\\\ &=\\frac{1}{\\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}} \\end{aligned} \\begin{aligned} p_0&=\\frac{1}{1+\\sum_{n=1}^\\infty \\prod_{i=0}^{n}\\frac{\\lambda}{\\max\\{i, s\\}\\mu}} \\\\ &= \\frac{1}{\\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}+\\sum_{i=s}^\\infty \\frac{\\rho_0^i}{s!s^{i-s}}} \\\\ &=\\frac{1}{\\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}+\\frac{\\rho_0^s}{s!}\\sum_{i=0}^\\infty \\frac{\\rho_0^i}{s^i}} \\\\ &=\\frac{1}{\\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}} \\end{aligned} \u8bbe \\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}=T \\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}=T \uff0c p_i p_i \u53ef\u4ee5\u901a\u8fc7 p_0 p_0 \u63a8\u5bfc\u5f97\uff1a p_i=\\frac{\\lambda_0\\lambda_1\\cdots\\lambda_{i-1}}{\\mu_1\\mu_2\\cdots\\mu_i}p_0=\\left\\{ \\begin{aligned} & \\frac{\\rho_0^i}{i!}p_0=\\frac{\\rho_0^i}{i!\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)} & i\\leq s \\\\ & \\frac{\\rho_0^i}{s!s^{i-s}}p_0=\\frac{\\rho_0^i}{s!s^{i-s}\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)} & i > s \\end{aligned} \\right. p_i=\\frac{\\lambda_0\\lambda_1\\cdots\\lambda_{i-1}}{\\mu_1\\mu_2\\cdots\\mu_i}p_0=\\left\\{ \\begin{aligned} & \\frac{\\rho_0^i}{i!}p_0=\\frac{\\rho_0^i}{i!\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)} & i\\leq s \\\\ & \\frac{\\rho_0^i}{s!s^{i-s}}p_0=\\frac{\\rho_0^i}{s!s^{i-s}\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)} & i > s \\end{aligned} \\right. \u5f53 n \\geq s n \\geq s \u65f6\uff0c\u987e\u5ba2\u5230\u8fbe\u7cfb\u7edf\u65f6\u9700\u8981\u7b49\u5f85\uff0c\u5219\u6709\uff1a p_D=\\sum_{i=s}^\\infty p_i= \\sum_{i=s}^\\infty \\frac{\\rho^i_0}{s!s^{i-s}}p_0 = \\frac{\\rho^s_0p_0}{(s-1)!(s-\\rho_0)}=\\frac{\\rho^s_0}{(s-1)!(s-\\rho_0)T+\\rho_0^s} p_D=\\sum_{i=s}^\\infty p_i= \\sum_{i=s}^\\infty \\frac{\\rho^i_0}{s!s^{i-s}}p_0 = \\frac{\\rho^s_0p_0}{(s-1)!(s-\\rho_0)}=\\frac{\\rho^s_0}{(s-1)!(s-\\rho_0)T+\\rho_0^s} \u5f53 N\\leq s N\\leq s \u65f6\uff0c\u7cfb\u7edf\u4e2d\u6ca1\u6709\u961f\u5217\uff0c L_q=0 L_q=0 \uff0c\u5f53 N>s N>s \u65f6\uff0c\u961f\u5217\u957f\u5ea6\u4e3a N-s N-s \uff0c\u56e0\u6b64\u7a33\u6001\u65f6\u7684\u5e73\u5747\u6392\u961f\u957f\u4e3a\uff1a \\begin{aligned} L_q&=\\sum_{i=s + 1}^\\infty (i - s)p_i \\\\ &=\\sum_{i=s}^\\infty (i-s)\\frac{\\rho^i_0}{s!s^{i-s}}p_0 \\\\ &= \\frac{\\rho^s_0p_0}{s!}\\sum_{i=0}^\\infty \\frac{i\\rho_0^i}{s^i} \\\\ &= \\frac{\\rho^s_0p_0}{s!}\\sum_{i=1}^\\infty \\left(\\frac{\\rho_0}{s}\\right)^i\\frac{s}{s-\\rho_0} \\\\ &= \\frac{\\rho^s_0p_0}{(s-1)!(s-\\rho)}\\frac{\\rho_0/s}{1-\\rho_0/s} \\\\ &= \\frac{\\rho^{s+1}_0p_0}{(s-1)!(s-\\rho_0)^2} \\end{aligned} \\begin{aligned} L_q&=\\sum_{i=s + 1}^\\infty (i - s)p_i \\\\ &=\\sum_{i=s}^\\infty (i-s)\\frac{\\rho^i_0}{s!s^{i-s}}p_0 \\\\ &= \\frac{\\rho^s_0p_0}{s!}\\sum_{i=0}^\\infty \\frac{i\\rho_0^i}{s^i} \\\\ &= \\frac{\\rho^s_0p_0}{s!}\\sum_{i=1}^\\infty \\left(\\frac{\\rho_0}{s}\\right)^i\\frac{s}{s-\\rho_0} \\\\ &= \\frac{\\rho^s_0p_0}{(s-1)!(s-\\rho)}\\frac{\\rho_0/s}{1-\\rho_0/s} \\\\ &= \\frac{\\rho^{s+1}_0p_0}{(s-1)!(s-\\rho_0)^2} \\end{aligned} \u72b6\u6001\u4e3a n n \u7684\u7a33\u6001\u65f6\u7cfb\u7edf\u63a5\u53d7\u670d\u52a1\u7684\u5b9e\u4f53\u6570\u91cf\u4e3a\uff1a \\left\\{ \\begin{aligned} &n & n\\leq s \\\\ &s & n> s \\end{aligned} \\right . \\left\\{ \\begin{aligned} &n & n\\leq s \\\\ &s & n> s \\end{aligned} \\right . \u56e0\u6b64\uff0c\u7a33\u6001\u7cfb\u7edf\u4e2d\u63a5\u53d7\u670d\u52a1\u7684\u5b9e\u4f53\u5e73\u5747\u6570\u91cf\u4e3a\uff1a \\begin{aligned} L-L_q&=\\sum_{i=0}^s ip_i+\\sum_{i=s+1}^\\infty sp_i \\\\ &=\\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}p_0+s\\sum_{i=s+1}^\\infty \\frac{\\rho_0^i}{s!s^{i-s}}p_0 \\\\ &= \\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}p_0 + \\frac{\\rho_0^sp_0}{(s-1)!}\\sum_{i=1}^\\infty \\frac{\\rho_0^i}{s^i} \\\\ &= \\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}p_0 + \\frac{\\rho_0^{s+1}p_0}{(s-1)!(s-\\rho_0)} \\\\ &= \\frac{\\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}}{\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)} + \\frac{\\rho_0^{s+1}p_0}{(s-1)!(s-\\rho_0)} \\\\ &= \\frac{\\rho_0 T+1}{T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}} + \\frac{\\rho_0^{s+1}}{(s-1)!(s-\\rho_0)T+\\rho_0^s} \\\\ &= \\frac{(\\rho_0 T+1)(s-1)!(s-\\rho_0) + \\rho_0^{s+1}}{(s-1)!(s-\\rho_0)T+\\rho_0^s}\\\\ &= \\rho_0 + \\frac{(s-1)!(s-\\rho_0)}{(s-1)!(s-\\rho_0)T+\\rho_0^s} \\end{aligned} \\begin{aligned} L-L_q&=\\sum_{i=0}^s ip_i+\\sum_{i=s+1}^\\infty sp_i \\\\ &=\\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}p_0+s\\sum_{i=s+1}^\\infty \\frac{\\rho_0^i}{s!s^{i-s}}p_0 \\\\ &= \\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}p_0 + \\frac{\\rho_0^sp_0}{(s-1)!}\\sum_{i=1}^\\infty \\frac{\\rho_0^i}{s^i} \\\\ &= \\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}p_0 + \\frac{\\rho_0^{s+1}p_0}{(s-1)!(s-\\rho_0)} \\\\ &= \\frac{\\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}}{\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)} + \\frac{\\rho_0^{s+1}p_0}{(s-1)!(s-\\rho_0)} \\\\ &= \\frac{\\rho_0 T+1}{T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}} + \\frac{\\rho_0^{s+1}}{(s-1)!(s-\\rho_0)T+\\rho_0^s} \\\\ &= \\frac{(\\rho_0 T+1)(s-1)!(s-\\rho_0) + \\rho_0^{s+1}}{(s-1)!(s-\\rho_0)T+\\rho_0^s}\\\\ &= \\rho_0 + \\frac{(s-1)!(s-\\rho_0)}{(s-1)!(s-\\rho_0)T+\\rho_0^s} \\end{aligned} \u987e\u5ba2\u7684\u5e73\u5747\u9017\u7559\u65f6\u95f4 W=\\frac{L}{\\lambda} W=\\frac{L}{\\lambda} \uff1a \\begin{aligned} W&=\\frac{L}{\\lambda} \\\\ &= \\frac{\\sum_{i=0}^\\infty ip_i}{\\lambda} \\\\ &= \\frac{\\sum_{i=1}^s \\left(\\frac{\\rho_0^i}{(i-1)!\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)}\\right) + \\sum_{i=s+1}^\\infty \\left(i\\frac{\\rho_0^i}{s!s^{i-s}\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)}\\right) }{\\lambda} \\\\ &= \\frac{\\frac{T(s-1)!(s-\\rho_0)}{T(s-1)!(s-\\rho_0) + \\rho_0^s} + \\frac{\\rho_0^{s+1}(s-\\rho_0+1)/(s-\\rho_0)}{T(s-1)!(s-\\rho_0) + \\rho_0^s}}{\\lambda} \\\\ &= \\frac{T(s-1)!(s-\\rho_0) + \\rho_0^{s+1}(s-\\rho_0+1)/(s-\\rho_0)}{\\lambda(T(s-1)!(s-\\rho_0) + \\rho_0^s)} \\end{aligned} \\begin{aligned} W&=\\frac{L}{\\lambda} \\\\ &= \\frac{\\sum_{i=0}^\\infty ip_i}{\\lambda} \\\\ &= \\frac{\\sum_{i=1}^s \\left(\\frac{\\rho_0^i}{(i-1)!\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)}\\right) + \\sum_{i=s+1}^\\infty \\left(i\\frac{\\rho_0^i}{s!s^{i-s}\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)}\\right) }{\\lambda} \\\\ &= \\frac{\\frac{T(s-1)!(s-\\rho_0)}{T(s-1)!(s-\\rho_0) + \\rho_0^s} + \\frac{\\rho_0^{s+1}(s-\\rho_0+1)/(s-\\rho_0)}{T(s-1)!(s-\\rho_0) + \\rho_0^s}}{\\lambda} \\\\ &= \\frac{T(s-1)!(s-\\rho_0) + \\rho_0^{s+1}(s-\\rho_0+1)/(s-\\rho_0)}{\\lambda(T(s-1)!(s-\\rho_0) + \\rho_0^s)} \\end{aligned}","title":"Chapter 12"},{"location":"math/queue-theory/chapter-12.html#_1","text":"\u4e00\u4e2a\u6392\u961f\u6a21\u578b\u4e3b\u8981\u7531\u4ee5\u4e0b\u90e8\u5206\u7ec4\u6210 \u987e\u5ba2\uff08\u5b9e\u4f53\uff09\u5904\u7406 \u5b9e\u4f53\u6392\u961f\u7b49\u5f85\u5904\u7406\uff08\u7cfb\u7edf\u7684\u6392\u961f\u7b56\u7565\u53ef\u80fd\u4e0d\u540c\uff0c\u635f\u5931\u5236\u4e0d\u5141\u8bb8\u6392\u961f\u3001\u6df7\u5408\u5236\u5141\u8bb8\u6392\u6709\u9650\u957f\u5ea6\u7684\u961f\u5217\uff09 \u5b9e\u4f53\u5904\u7406\u5b8c\u6bd5\uff0c\u79bb\u5f00\u7cfb\u7edf","title":"\u5e38\u89c1\u6392\u961f\u6a21\u578b"},{"location":"math/queue-theory/chapter-12.html#_2","text":"","title":"\u6392\u961f\u6a21\u578b\u7684\u63cf\u8ff0"},{"location":"math/queue-theory/chapter-12.html#_3","text":"\u5047\u8bbe\u8fdb\u5165\u7cfb\u7edf\u7684\u5b9e\u4f53\u6570\u91cf\u65e0\u9650\u3002\u8003\u5bdf\u76f8\u90bb\u4e24\u4e2a\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\u7684\u65f6\u95f4\u5dee\uff1a \u5bf9\u4e8e\u5b9a\u957f\u5206\u5e03\uff0c\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\u7684\u65f6\u95f4\u5dee\u4e3a\u5e38\u91cf t t \uff0c t t \u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u4e3a\uff1a f(t; \\alpha)=\\left\\{ \\begin{aligned} & 1 & t=\\alpha \\\\ & 0 & t\\not =\\alpha \\end{aligned} \\right . f(t; \\alpha)=\\left\\{ \\begin{aligned} & 1 & t=\\alpha \\\\ & 0 & t\\not =\\alpha \\end{aligned} \\right . Poisson \u6d41\uff0c\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\u7684\u65f6\u95f4\u5dee\u72ec\u7acb\u540c\u5206\u5e03\uff0c\u670d\u4ece\u53c2\u6570\u4e3a \\lambda \\lambda \u7684\u6307\u6570\u5206\u5e03 f_{\\xi_i}(t; \\lambda)=\\left\\{ \\begin{aligned} & \\lambda e^{-\\lambda t} & t\\geq 0 \\\\ & 0 & t < 0 \\end{aligned} \\right . f_{\\xi_i}(t; \\lambda)=\\left\\{ \\begin{aligned} & \\lambda e^{-\\lambda t} & t\\geq 0 \\\\ & 0 & t < 0 \\end{aligned} \\right . Erlang \u5206\u5e03\uff0c\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\u7684\u65f6\u95f4\u5dee\u72ec\u7acb\u540c\u5206\u5e03\uff0c\u670d\u4ece\u5982\u4e0b\u516c\u5f0f\u6240\u793a\u7684\u5206\u5e03\u3002\u82e5\u67d0\u4e2a\u7cfb\u7edf\u4e2d\u6709 K K \u4e2a\u5e76\u8054\u7684\u670d\u52a1\u53f0\uff0c\u8f93\u5165\u5b9e\u4f53\u4e3a Poisson \u6d41\uff0c\u5219\u7b2c K K \u4e2a\u670d\u52a1\u53f0\u7684\u987e\u5ba2\u6d41\u4e3a Erlang \u6d41\uff0c\u524d\u9762\u6240\u6709 K - 1 K - 1 \u4e2a\u670d\u52a1\u53f0\u5728\u7b2c\u4e00\u4e2a\u5b9e\u4f53\u5230\u8fbe\u4ee5\u540e\u7684\u8f93\u5165\u6d41\u540c\u6837\u4e3a Erlang \u6d41\u3002 f(t; \\lambda, K)=\\left\\{ \\begin{aligned} & \\frac{\\lambda(\\lambda t)^{K-1}}{(K-1)!} & t\\geq 0 \\\\ & 0 & t < 0 \\end{aligned} \\right . f(t; \\lambda, K)=\\left\\{ \\begin{aligned} & \\frac{\\lambda(\\lambda t)^{K-1}}{(K-1)!} & t\\geq 0 \\\\ & 0 & t < 0 \\end{aligned} \\right .","title":"\u8fdb\u5165\u7cfb\u7edf"},{"location":"math/queue-theory/chapter-12.html#_4","text":"\u7cfb\u7edf\u4e2d\u53ef\u80fd\u6709\u4e00\u4e2a\u6216\u591a\u4e2a\u670d\u52a1\u53f0\u3002\u5728\u7cfb\u7edf\u4e2d\u7684\u6240\u6709\u670d\u52a1\u53f0\u90fd\u5904\u4e8e\u8fd0\u884c\u72b6\u6001\u65f6\uff0c\u65b0\u8fdb\u5165\u7684\u5b9e\u4f53\u65e0\u6cd5\u7acb\u5373\u8fdb\u884c\u5904\u7406\uff0c\u800c\u662f\u8fdb\u5165\u961f\u5217\u6216\u76f4\u63a5\u79bb\u5f00\uff0c\u53d6\u51b3\u4e8e\u7cfb\u7edf\u7684\u6392\u961f\u7b56\u7565\u3002\u6392\u961f\u7b56\u7565\u53ef\u4ee5\u5206\u4e3a\u635f\u5931\u5236\u3001\u7b49\u5f85\u5236\u4e0e\u6df7\u5408\u5236\u3002 \u5728\u635f\u5931\u5236\u7cfb\u7edf\u4e2d\uff0c\u5982\u679c\u65b0\u8fdb\u5165\u7684\u5b9e\u4f53\u4e0d\u80fd\u88ab\u7acb\u5373\u5904\u7406\uff0c\u5219\u4f1a\u79bb\u5f00\u7cfb\u7edf\u3002 \u5728\u7b49\u5f85\u5236\u7cfb\u7edf\u4e2d\uff0c\u5982\u679c\u65b0\u8fdb\u5165\u7684\u5b9e\u4f53\u4e0d\u80fd\u88ab\u7acb\u5373\u5904\u7406\uff0c\u5219\u4f1a\u5728\u961f\u5217\u4e2d\u7b49\u5f85\uff0c\u76f4\u5230\u88ab\u5904\u7406\u3002 \u5728\u6df7\u5408\u5236\u7cfb\u7edf\u4e2d\uff0c\u5982\u679c\u65b0\u8fdb\u5165\u7684\u5b9e\u4f53\u4e0d\u80fd\u88ab\u7acb\u5373\u5904\u7406\u4e14\u6b64\u65f6\u7684\u961f\u5217\u957f\u5ea6\u5927\u4e8e\u67d0\u4e00\u5e38\u6570\u503c\uff0c\u5219\u4f1a\u79bb\u5f00\u7cfb\u7edf\uff0c\u5426\u5219\u4f1a\u8fdb\u5165\u961f\u5217\u7b49\u5f85\u3002 \u5b9e\u4f53\u5728\u6392\u961f\u8fc7\u7a0b\u4e2d\u7684\u884c\u4e3a\u53ef\u4ee5\u5206\u4e3a\u5982\u4e0b\u7c7b\u578b\uff1a \u79bb\u5f00\uff1a\u5f53\u5b9e\u4f53\u5f97\u77e5\u9700\u8981\u7b49\u5f85\u6216\u6ca1\u6709\u8010\u5fc3\u7ee7\u7eed\u7b49\u5f85\u65f6\uff0c\u5b9e\u4f53\u53ef\u80fd\u9000\u51fa\u961f\u5217 \u53d8\u6362\uff1a\u5373\u5b9e\u4f53\u4e3a\u51cf\u5c11\u6392\u961f\u65f6\u95f4\u800c\u5728\u4e0d\u540c\u670d\u52a1\u53f0\u7684\u961f\u5217\u4e4b\u95f4\u79fb\u52a8 \u670d\u52a1\u53f0\u4f1a\u6309\u7167\u5982\u4e0b\u53ef\u80fd\u7684\u65b9\u5f0f\u8fdb\u884c\u670d\u52a1\uff1a FCFS\uff1a\u5148\u8fdb\u5165\u961f\u5217\u7684\u5148\u8fdb\u884c\u5904\u7406 LCFS\uff1a\u540e\u8fdb\u5165\u961f\u5217\u7684\u5148\u8fdb\u884c\u5904\u7406 \u968f\u673a\u5904\u7406 PS\uff1a\u4f18\u5148\u7ea7\u9ad8\u7684\u5b9e\u4f53\u5148\u8fdb\u884c\u5904\u7406 \u65ad\u7eed\u5904\u7406\uff1a\u5728\u5904\u7406\u67d0\u4e2a\u5b9e\u4f53\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u8f6c\u800c\u5904\u7406\u53e6\u4e00\u4e2a\u5b9e\u4f53\uff0c\u4e0d\u65ad\u5faa\u73af\u76f4\u5230\u5b9e\u4f53\u5904\u7406\u5b8c\u6210 \u5728\u7cfb\u7edf\u4e2d\u7684\u670d\u52a1\u53f0\u7684\u670d\u52a1\u65f6\u95f4\u662f\u4e00\u4e2a\u968f\u673a\u53d8\u91cf\uff0c\u6982\u7387\u5206\u5e03\u4e3a\u5e38\u6570\u3001\u6307\u6570\u5206\u5e03\u3001K\u7ea7 Erlang \u5206\u5e03\u3001\u4e00\u822c\u5206\u5e03\u7b49\u3002","title":"\u5b9e\u4f53\u6392\u961f\u4e0e\u5904\u7406"},{"location":"math/queue-theory/chapter-12.html#_5","text":"Kendall\u8bb0\u53f7\uff0c\u683c\u5f0f\u4e3a X/Y/Z/A/B/C X/Y/Z/A/B/C X X \u8868\u793a\u5b9e\u4f53\u5230\u8fbe\u95f4\u9694\u65f6\u95f4\u7684\u5206\u5e03 M M \u8868\u793a\u5230\u8fbe\u8fc7\u7a0b\u4e3a Poisson \u8fc7\u7a0b\uff08\u95f4\u9694\u65f6\u95f4\u670d\u4ece\u6307\u6570\u5206\u5e03\uff09\u6216\u8d1f\u6307\u6570\u5206\u5e03 D D \u8868\u793a\u95f4\u9694\u65f6\u95f4\u4e3a\u5e38\u6570 E_k E_k \u8868\u793a\u95f4\u9694\u65f6\u95f4\u670d\u4ece k k \u9636 Erlang \u5206\u5e03 G G \u8868\u793a\u95f4\u9694\u65f6\u95f4\u670d\u4ece\u4e00\u822c\u3001\u76f8\u4e92\u72ec\u7acb\u7684\u968f\u673a\u5206\u5e03 Y Y \u8868\u793a\u670d\u52a1\u53f0\u5355\u6b21\u670d\u52a1\u65f6\u95f4\u7684\u5206\u5e03\uff0c\u8bb0\u53f7\u4e0e X X \u7684\u542b\u4e49\u76f8\u540c Z Z \u8868\u793a\u670d\u52a1\u53f0\u4e2a\u6570 A A \u8868\u793a\u7cfb\u7edf\u7684\u7b49\u5f85\u7a7a\u95f4\u5bb9\u91cf\uff0c 0 0 \u4e3a\u635f\u5931\u5236\u7cfb\u7edf\uff0c \\infty \\infty \u4e3a\u7b49\u5f85\u5236\u7cfb\u7edf\uff0c\u5426\u5219\u4e3a\u6df7\u5408\u5236\u7cfb\u7edf\u3002 B B \u8868\u793a\u5b9e\u4f53\u7684\u603b\u6570\u91cf\uff0c \\infty \\infty \u8868\u793a\u5b9e\u4f53\u6e90\u65e0\u9650 C C \u8868\u793a\u670d\u52a1\u89c4\u5219 A, B, C A, B, C \u53c2\u6570\u53ef\u4ee5\u7701\u7565\u3002\u5206\u522b\u7b49\u4ef7\u4e8e \\infty, \\infty, \\mathit{FCFS} \\infty, \\infty, \\mathit{FCFS}","title":"\u7cfb\u7edf\u7684\u7b26\u53f7\u8868\u793a"},{"location":"math/queue-theory/chapter-12.html#_6","text":"\u8861\u91cf\u7cfb\u7edf\u6027\u80fd\u7684\u5e38\u7528\u89c2\u6d4b\u6307\u6807\u4e3a\uff1a N(L) N(L) \uff1a\u7a33\u6001\u7cfb\u7edf\u7684\u961f\u957f\uff08\u6307\u7cfb\u7edf\u5185\u6240\u6709\u7684\u5b9e\u4f53\u6570\u91cf\uff09 N_q(L_q) N_q(L_q) \u7a33\u6001\u7cfb\u7edf\u7684\u6392\u961f\u957f T(W) T(W) \uff1a\u987e\u5ba2\u5728\u7a33\u6001\u7cfb\u7edf\u4e2d\u7684\u505c\u7559\u65f6\u95f4\uff08\u5904\u7406+\u7b49\u5f85\uff09 T_q(W_q) T_q(W_q) \uff1a\u987e\u5ba2\u5728\u7a33\u6001\u7cfb\u7edf\u4e2d\u7684\u7b49\u5f85\u65f6\u95f4 p_n p_n \uff1a\u7a33\u6001\u7cfb\u7edf\u4efb\u610f\u65f6\u523b\u72b6\u6001\u4e3a n n \u7684\u6982\u7387\uff0c p_n=P(N=n)=\\lim_{t\\rightarrow \\infty}P(N(t) = n) p_n=P(N=n)=\\lim_{t\\rightarrow \\infty}P(N(t) = n) \\rho \\rho \uff1a\u5229\u7528\u7387 p_D p_D \uff1a\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\u65f6\u9700\u8981\u7b49\u5f85\u7684\u6982\u7387 \u82e5\u5c06\u7cfb\u7edf\u89c6\u4e3a\u7ba1\u9053\uff0c\u7cfb\u7edf\u4e2d\u5b9e\u4f53\u7684\u6570\u91cf\u7b49\u4e8e\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\u7684\u901f\u5ea6\u4e0e\u7cfb\u7edf\u5e73\u5747\u54cd\u5e94\uff08\u5904\u7406\uff09\u65f6\u95f4\u4e4b\u79ef\u3002 \u5bf9\u4e8e M/M/s M/M/s \u7cfb\u7edf\uff0c\u4ee4 \\lambda \\lambda \u4e3a\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\u7684\u901f\u5ea6\uff0c \\mu \\mu \u4e3a\u670d\u52a1\u53f0\u5904\u7406\u5b9e\u4f53\u7684\u901f\u5ea6\uff0c s s \u4e3a\u670d\u52a1\u53f0\u7684\u6570\u91cf\uff0c\u5219\uff1a \\begin{aligned} L &= \\lambda_e W \\\\ L_q &= \\lambda_e W_q \\end{aligned} \\begin{aligned} L &= \\lambda_e W \\\\ L_q &= \\lambda_e W_q \\end{aligned}","title":"\u7cfb\u7edf\u7684\u89c2\u6d4b\u6307\u6807"},{"location":"math/queue-theory/chapter-12.html#_7","text":"\u5e38\u89c1\u7684\u968f\u673a\u8fc7\u7a0b\u6709 Markov \u8fc7\u7a0b\u3001\u751f\u706d\u8fc7\u7a0b\u3001 Poisson \u8fc7\u7a0b\u7b49\u3002\u6240\u6709\u7684 Poisson \u8fc7\u7a0b\u90fd\u662f\u751f\u706d\u8fc7\u7a0b\uff0c\u6240\u6709\u7684\u751f\u706d\u8fc7\u7a0b\u90fd\u662f Markov \u8fc7\u7a0b\u3002","title":"\u968f\u673a\u8fc7\u7a0b"},{"location":"math/queue-theory/chapter-12.html#markov","text":"\u7279\u70b9\uff1a t_0 t_0 \u65f6\u523b\u7684\u72b6\u6001\u4e0e\u4efb\u610f t<t_0 t<t_0 \u65f6\u7684\u72b6\u6001\u65e0\u5173 Markov \u94fe\u7531\u9a6c\u5c14\u53ef\u592b\u8fc7\u7a0b\u4e2d\u7684\u79bb\u6563\u72b6\u6001\u7ec4\u5408\u3002\u5bf9\u4e8e Markov \u8fc7\u7a0b\uff0c\u7cfb\u7edf\u65e0\u8bb0\u5fc6\u6027\uff0c\u5f53\u524d\u7684\u72b6\u6001\u4e0d\u4f1a\u5bf9\u540e\u9762\u7684\u72b6\u6001\u4ea7\u751f\u5f71\u54cd\u3002 M/M/s M/M/s \u7cfb\u7edf\u53ef\u4ee5\u4f7f\u7528 Markov \u8fc7\u7a0b\u5efa\u6a21\u3002\u961f\u5217\u4e2d\u5b9e\u4f53\u7684\u6570\u91cf\u662f\u4e00\u4e2a Markov \u94fe\u3002","title":"Markov \u8fc7\u7a0b"},{"location":"math/queue-theory/chapter-12.html#_8","text":"\u751f\u706d\u8fc7\u7a0b\u6309\u5982\u4e0b\u56fe\u8fdb\u884c\u63cf\u8ff0\uff08\u72b6\u6001\u8f6c\u79fb\u56fe\uff09\uff1a \u5047\u8bbe\u5b9e\u4f53\u79bb\u6563\u8fdb\u5165\u7684 M/M/s M/M/s \u7cfb\u7edf\uff0c\u961f\u5217\u4e2d\u7684\u5b9e\u4f53\u6570\u91cf\u670d\u4ece\u751f\u706d\u8fc7\u7a0b","title":"\u751f\u706d\u8fc7\u7a0b"},{"location":"math/queue-theory/chapter-12.html#poisson","text":"\u5b9e\u4f53\u8fdb\u5165\u7684\u65f6\u95f4\u5dee\u76f8\u4e92\u72ec\u7acb\u4e14\u670d\u4ece\u540c\u4e00\u6307\u6570\u5206\u5e03\u7684\u8fc7\u7a0b","title":"Poisson \u8fc7\u7a0b"},{"location":"math/queue-theory/chapter-12.html#_9","text":"\u5bf9\u4e8e\u751f\u706d\u8fc7\u7a0b\uff0c\u6709\u5982\u4e0b\u5047\u8bbe \u6bcf\u4e2a\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf \u5b9a\u4e49\u7cfb\u7edf\u7684\u72b6\u6001\u4e3a\u7cfb\u7edf\u4e2d\u7684\u5b9e\u4f53\u6570\u91cf n n \u4e00\u4e2a\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\uff0c\u7cfb\u7edf\u7684\u72b6\u6001\u7531 n-1 n-1 \u8f6c\u53d8\u4e3a n n \u4e00\u4e2a\u5b9e\u4f53\u79bb\u5f00\u7cfb\u7edf\uff0c\u7cfb\u7edf\u7684\u72b6\u6001\u7531 n n \u8f6c\u53d8\u4e3a n+1 n+1 \u7cfb\u7edf\u5904\u4e8e\u72b6\u6001 n n \u65f6\uff0c\u5b9a\u4e49\u5b9e\u4f53\u8fdb\u5165\u7684\u901f\u5ea6\u4e3a \\lambda _n \\lambda _n \uff0c\u7cfb\u7edf\u7684\u5904\u7406\u901f\u5ea6\u4e3a \\mu_n \\mu_n \u3002\u5bf9\u4e8e \\lambda_n \\lambda_n \uff0c n\\geq 0 n\\geq 0 \uff1b\u5bf9\u4e8e \\mu_n \\mu_n \uff0c n>0 n>0 \u95ee\u9898\uff1a\u7cfb\u7edf\u5904\u4e8e\u7a33\u5b9a\u72b6\u6001\u65f6\uff0c\u751f\u706d\u7cfb\u7edf\u5904\u4e8e\u72b6\u6001 n n \u7684\u6982\u7387 p_n p_n \uff1f \u5bf9\u4e8e\u5904\u4e8e\u72b6\u6001 j j \u7684\u7cfb\u7edf\uff0c\u8003\u5bdf\u4e00\u4e2a\u6781\u77ed\u7684\u65f6\u95f4\u95f4\u9694 \\Delta t \\Delta t \uff0c\u7531\u4e8e \\Delta t \\Delta t \u6781\u77ed\uff0c\u53ef\u4ee5\u5ffd\u7565 \\Delta t \\Delta t \u65f6\u95f4\u5185\u4e24\u4e2a\u5b9e\u4f53\u540c\u65f6\u8fdb\u5165/\u79bb\u5f00\u7cfb\u7edf\u6216\u4e00\u4e2a\u5b9e\u4f53\u8fdb\u5165\u3001\u4e00\u4e2a\u5b9e\u4f53\u79bb\u5f00\u7cfb\u7edf\u7684\u60c5\u51b5\u3002 \\Delta t \\Delta t \u65f6\u95f4\u5185\u7cfb\u7edf\u53d1\u751f\u53d8\u5316\u7684\u6982\u7387\u5982\u4e0b\uff1a \u4e00\u4e2a\u5b9e\u4f53\u8fdb\u5165\u7cfb\u7edf\uff1a P(n(t+\\Delta t)=j+1 | n(t) = j)=\\lambda_j\\Delta t P(n(t+\\Delta t)=j+1 | n(t) = j)=\\lambda_j\\Delta t \u4e00\u4e2a\u5b9e\u4f53\u79bb\u5f00\u7cfb\u7edf\uff1a P(n(t+\\Delta t)=j-1| n(t) = j) = \\mu_j\\Delta t P(n(t+\\Delta t)=j-1| n(t) = j) = \\mu_j\\Delta t \u7cfb\u7edf\u5728 \\Delta t \\Delta t \u65f6\u95f4\u5185\u6ca1\u6709\u53d1\u751f\u72b6\u6001\u6539\u53d8\uff1a P(n(t+\\Delta t) = j | n(t)=j) = 1 - (\\lambda_j+\\mu_j)\\Delta t P(n(t+\\Delta t) = j | n(t)=j) = 1 - (\\lambda_j+\\mu_j)\\Delta t \u6839\u636e\u5047\u8bbe\uff0c\u5904\u4e8e\u72b6\u6001 i i \u7684\u7cfb\u7edf\u5728 t+\\Delta t t+\\Delta t \u65f6\u53ea\u53ef\u80fd\u5904\u4e8e i-1, i, i+1 i-1, i, i+1 \u4e09\u79cd\u72b6\u6001\u4e2d\u7684\u4e00\u79cd\u3002\u4e5f\u5373\uff0c\u5904\u4e8e\u72b6\u6001 i i \u7684\u7cfb\u7edf\u5728 t-\\Delta t t-\\Delta t \u65f6\u53ea\u53ef\u80fd\u5904\u4e8e i-1, i, i+1 i-1, i, i+1 \u4e09\u79cd\u72b6\u6001\u4e2d\u7684\u4e00\u79cd\u3002\u7531\u6b64\uff0c\u53ef\u4ee5\u5217\u5f0f\u5982\u4e0b\uff1a \\begin{aligned} p_0(t+\\Delta t) &= (1-\\lambda_0\\Delta t)p_0(t) + \\mu_1\\Delta tp_1(t) \\\\ p_j(t+\\Delta t) &= \\lambda_{j-1}\\Delta tp_{j-1}(t)+(1-\\mu_j\\Delta t-\\lambda_j\\Delta t)p_j(t)+\\mu_{j+1}\\Delta tp_{j+1}(t) \\end{aligned} \\begin{aligned} p_0(t+\\Delta t) &= (1-\\lambda_0\\Delta t)p_0(t) + \\mu_1\\Delta tp_1(t) \\\\ p_j(t+\\Delta t) &= \\lambda_{j-1}\\Delta tp_{j-1}(t)+(1-\\mu_j\\Delta t-\\lambda_j\\Delta t)p_j(t)+\\mu_{j+1}\\Delta tp_{j+1}(t) \\end{aligned} \u6574\u7406\u540e\u53d6\u6781\u9650 \\Delta t\\rightarrow 0 \\Delta t\\rightarrow 0 \uff0c\u4e0a\u5f0f\u53d8\u4e3a\u5bfc\u6570\u5f62\u5f0f\uff1a \\begin{aligned} &\\lim_{\\Delta t\\rightarrow 0} \\frac{p_j(t+\\Delta t)-p_j(t)}{\\Delta t}=\\lambda_{j-1}p_{j-1}(t)+\\mu_{j+1}p_{j+1}(t) - (\\mu_j+\\lambda_j)p_j(t) \\\\ \\Rightarrow &\\frac{\\mathrm dp_j(t)}{\\mathrm dt}=\\lambda_{j-1}p_{j-1}(t)+\\mu_{j+1}p_{j+1}(t) - (\\mu_j+\\lambda_j)p_j(t) \\end{aligned} \\begin{aligned} &\\lim_{\\Delta t\\rightarrow 0} \\frac{p_j(t+\\Delta t)-p_j(t)}{\\Delta t}=\\lambda_{j-1}p_{j-1}(t)+\\mu_{j+1}p_{j+1}(t) - (\\mu_j+\\lambda_j)p_j(t) \\\\ \\Rightarrow &\\frac{\\mathrm dp_j(t)}{\\mathrm dt}=\\lambda_{j-1}p_{j-1}(t)+\\mu_{j+1}p_{j+1}(t) - (\\mu_j+\\lambda_j)p_j(t) \\end{aligned} \u5f53 t\\rightarrow \\infty t\\rightarrow \\infty \u65f6\uff0c\u7cfb\u7edf\u8d8b\u4e8e\u7a33\u6001\uff0c\u5219\u6709 \\lim_{t\\rightarrow \\infty}p_j(t) = p_j \\lim_{t\\rightarrow \\infty}p_j(t) = p_j \uff0c\u6536\u655b\u7684\u5145\u5206\u5fc5\u8981\u6761\u4ef6\u4e3a \\lim_{t\\rightarrow\\infty} \\frac{\\mathrm dp_j(t)}{\\mathrm dt}=0 \\lim_{t\\rightarrow\\infty} \\frac{\\mathrm dp_j(t)}{\\mathrm dt}=0 \u3002\u5373 \\lambda_{j-1}p_{j-1}(t)+\\mu_{j+1}p_{j+1}(t) - (\\mu_j+\\lambda_j)p_j(t)=0 \\lambda_{j-1}p_{j-1}(t)+\\mu_{j+1}p_{j+1}(t) - (\\mu_j+\\lambda_j)p_j(t)=0 \u3002 \u89e3 p_{j+1} p_{j+1} \uff0c\u89e3\u5f97\uff1a p_{j+1} = \\left(\\frac{\\mu_j+\\lambda_j}{\\mu{j+1}}\\right)p_j-\\frac{\\lambda_{j-1}}{\\mu_{j+1}}p_{j-1} p_{j+1} = \\left(\\frac{\\mu_j+\\lambda_j}{\\mu{j+1}}\\right)p_j-\\frac{\\lambda_{j-1}}{\\mu_{j+1}}p_{j-1} \u5bf9\u4e8e p_1 p_1 \uff0c\u6709 p_1=\\frac{\\lambda_0}{\\mu_1}p_0 p_1=\\frac{\\lambda_0}{\\mu_1}p_0 \u3002 \u6839\u636e\u9012\u63a8\u516c\u5f0f\uff0c\u53ef\u4ee5\u7528 p_0 p_0 \u8868\u793a\u51fa p_j p_j \uff1a \\begin{aligned} p_2&=\\left(\\frac{\\mu_1+\\lambda_1}{\\mu_2}\\right)p_1-\\frac{\\lambda _0}{\\mu_2}p_0 = \\frac{\\lambda_0(\\mu_1+\\lambda_1)}{\\mu_1\\mu_2}p_0-\\frac{\\lambda_0}{\\mu_2}p_0=\\frac{\\lambda_0\\lambda_1}{\\mu_1\\mu_2}p_0 \\\\ p_3&=\\left(\\frac{\\mu_2+\\lambda_2}{\\mu_3}\\right)p_2-\\frac{\\lambda_1}{\\mu_3}p_1=\\frac{\\lambda_0\\lambda_1(\\mu_2+\\lambda_2)}{\\mu_1\\mu_2\\mu_3}p_0-\\frac{\\lambda_0\\lambda_1}{\\mu_1\\mu_3}p_0=\\frac{\\lambda_0\\lambda_1\\lambda_2}{\\mu_1\\mu_2\\mu_3}p_0 \\\\ &\\vdots \\\\ &p_j = \\frac{\\lambda_0\\lambda_1\\cdots\\lambda_{j-1}}{\\mu_1\\mu_2\\cdots\\mu_j}p_0=p_0\\prod_{i = 1}^{j}\\frac{\\lambda_{i-1}}{\\mu_j} \\end{aligned} \\begin{aligned} p_2&=\\left(\\frac{\\mu_1+\\lambda_1}{\\mu_2}\\right)p_1-\\frac{\\lambda _0}{\\mu_2}p_0 = \\frac{\\lambda_0(\\mu_1+\\lambda_1)}{\\mu_1\\mu_2}p_0-\\frac{\\lambda_0}{\\mu_2}p_0=\\frac{\\lambda_0\\lambda_1}{\\mu_1\\mu_2}p_0 \\\\ p_3&=\\left(\\frac{\\mu_2+\\lambda_2}{\\mu_3}\\right)p_2-\\frac{\\lambda_1}{\\mu_3}p_1=\\frac{\\lambda_0\\lambda_1(\\mu_2+\\lambda_2)}{\\mu_1\\mu_2\\mu_3}p_0-\\frac{\\lambda_0\\lambda_1}{\\mu_1\\mu_3}p_0=\\frac{\\lambda_0\\lambda_1\\lambda_2}{\\mu_1\\mu_2\\mu_3}p_0 \\\\ &\\vdots \\\\ &p_j = \\frac{\\lambda_0\\lambda_1\\cdots\\lambda_{j-1}}{\\mu_1\\mu_2\\cdots\\mu_j}p_0=p_0\\prod_{i = 1}^{j}\\frac{\\lambda_{i-1}}{\\mu_j} \\end{aligned} \u7531\u4e8e\u7cfb\u7edf\u7684\u72b6\u6001\u53ea\u53ef\u80fd\u53d6 0\\sim\\infty 0\\sim\\infty \u4e4b\u95f4\u7684\u6574\u6570\u503c\uff0c\u6982\u7387\u4e4b\u548c\u4e3a 1 1 \uff0c\u53ef\u4ee5\u8ba1\u7b97\u51fa p_0 p_0 \uff1a p_0=\\frac{1}{1+\\sum_{n=1}^\\infty \\prod_{i=0}^{n}\\frac{\\lambda_{i-1}}{\\mu_i}} p_0=\\frac{1}{1+\\sum_{n=1}^\\infty \\prod_{i=0}^{n}\\frac{\\lambda_{i-1}}{\\mu_i}}","title":"\u751f\u706d\u8fc7\u7a0b"},{"location":"math/queue-theory/chapter-12.html#mm1","text":"\u5bf9\u4e8e M/M/1 M/M/1 \u7cfb\u7edf\uff0c \\lambda_0=\\lambda_1=\\cdots=\\lambda_n=\\lambda, \\mu_1=\\cdots=\\mu_n=\\mu \\lambda_0=\\lambda_1=\\cdots=\\lambda_n=\\lambda, \\mu_1=\\cdots=\\mu_n=\\mu \u3002 \u7531\u6b64\uff0c\u8ba1\u7b97\u51fa M/M/1 M/M/1 \u7cfb\u7edf\u5728\u7a33\u6001\u65f6\u5904\u4e8e p_0 p_0 \u7684\u6982\u7387\uff1a p_0=\\frac{1}{1+\\sum_{n=1}^\\infty \\prod_{i=0}^{n}\\frac{\\lambda}{\\mu}} = \\frac{1}{1+\\sum_{n=1}^\\infty \\rho^n}=\\frac{1}{\\sum_{n=0}^\\infty \\rho^n}=1-\\rho p_0=\\frac{1}{1+\\sum_{n=1}^\\infty \\prod_{i=0}^{n}\\frac{\\lambda}{\\mu}} = \\frac{1}{1+\\sum_{n=1}^\\infty \\rho^n}=\\frac{1}{\\sum_{n=0}^\\infty \\rho^n}=1-\\rho \u6982\u7387\u5206\u5e03\u4e3a\uff1a P(N=n)=\\rho^n(1-\\rho) P(N=n)=\\rho^n(1-\\rho)","title":"M/M/1\u961f\u5217"},{"location":"math/queue-theory/chapter-12.html#mms","text":"\u5bf9\u4e8e M/M/s M/M/s \u7cfb\u7edf\uff0c \\lambda_i, \\mu_i \\lambda_i, \\mu_i \u670d\u4ece\u5982\u4e0b\u89c4\u5f8b\uff1a \\lambda_i = \\lambda \\qquad i=0, 1\\cdots, \\infty \\lambda_i = \\lambda \\qquad i=0, 1\\cdots, \\infty \\mu_i = \\max\\{i, s\\}\\mu \\qquad i=1, 2, \\cdots, \\infty \\mu_i = \\max\\{i, s\\}\\mu \\qquad i=1, 2, \\cdots, \\infty \u8ba1\u7b97\u51fa M/M/s M/M/s \u7cfb\u7edf\u5728\u7a33\u6001\u65f6\u5904\u4e8e p_0 p_0 \u7684\u6982\u7387\uff0c\u4ee4 \\rho_0=\\frac{\\lambda}{\\mu} \\rho_0=\\frac{\\lambda}{\\mu} \uff1a \\begin{aligned} p_0&=\\frac{1}{1+\\sum_{n=1}^\\infty \\prod_{i=0}^{n}\\frac{\\lambda}{\\max\\{i, s\\}\\mu}} \\\\ &= \\frac{1}{\\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}+\\sum_{i=s}^\\infty \\frac{\\rho_0^i}{s!s^{i-s}}} \\\\ &=\\frac{1}{\\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}+\\frac{\\rho_0^s}{s!}\\sum_{i=0}^\\infty \\frac{\\rho_0^i}{s^i}} \\\\ &=\\frac{1}{\\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}} \\end{aligned} \\begin{aligned} p_0&=\\frac{1}{1+\\sum_{n=1}^\\infty \\prod_{i=0}^{n}\\frac{\\lambda}{\\max\\{i, s\\}\\mu}} \\\\ &= \\frac{1}{\\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}+\\sum_{i=s}^\\infty \\frac{\\rho_0^i}{s!s^{i-s}}} \\\\ &=\\frac{1}{\\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}+\\frac{\\rho_0^s}{s!}\\sum_{i=0}^\\infty \\frac{\\rho_0^i}{s^i}} \\\\ &=\\frac{1}{\\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}} \\end{aligned} \u8bbe \\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}=T \\sum_{i=0}^{s-1}\\frac{\\rho_0^i}{i!}=T \uff0c p_i p_i \u53ef\u4ee5\u901a\u8fc7 p_0 p_0 \u63a8\u5bfc\u5f97\uff1a p_i=\\frac{\\lambda_0\\lambda_1\\cdots\\lambda_{i-1}}{\\mu_1\\mu_2\\cdots\\mu_i}p_0=\\left\\{ \\begin{aligned} & \\frac{\\rho_0^i}{i!}p_0=\\frac{\\rho_0^i}{i!\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)} & i\\leq s \\\\ & \\frac{\\rho_0^i}{s!s^{i-s}}p_0=\\frac{\\rho_0^i}{s!s^{i-s}\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)} & i > s \\end{aligned} \\right. p_i=\\frac{\\lambda_0\\lambda_1\\cdots\\lambda_{i-1}}{\\mu_1\\mu_2\\cdots\\mu_i}p_0=\\left\\{ \\begin{aligned} & \\frac{\\rho_0^i}{i!}p_0=\\frac{\\rho_0^i}{i!\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)} & i\\leq s \\\\ & \\frac{\\rho_0^i}{s!s^{i-s}}p_0=\\frac{\\rho_0^i}{s!s^{i-s}\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)} & i > s \\end{aligned} \\right. \u5f53 n \\geq s n \\geq s \u65f6\uff0c\u987e\u5ba2\u5230\u8fbe\u7cfb\u7edf\u65f6\u9700\u8981\u7b49\u5f85\uff0c\u5219\u6709\uff1a p_D=\\sum_{i=s}^\\infty p_i= \\sum_{i=s}^\\infty \\frac{\\rho^i_0}{s!s^{i-s}}p_0 = \\frac{\\rho^s_0p_0}{(s-1)!(s-\\rho_0)}=\\frac{\\rho^s_0}{(s-1)!(s-\\rho_0)T+\\rho_0^s} p_D=\\sum_{i=s}^\\infty p_i= \\sum_{i=s}^\\infty \\frac{\\rho^i_0}{s!s^{i-s}}p_0 = \\frac{\\rho^s_0p_0}{(s-1)!(s-\\rho_0)}=\\frac{\\rho^s_0}{(s-1)!(s-\\rho_0)T+\\rho_0^s} \u5f53 N\\leq s N\\leq s \u65f6\uff0c\u7cfb\u7edf\u4e2d\u6ca1\u6709\u961f\u5217\uff0c L_q=0 L_q=0 \uff0c\u5f53 N>s N>s \u65f6\uff0c\u961f\u5217\u957f\u5ea6\u4e3a N-s N-s \uff0c\u56e0\u6b64\u7a33\u6001\u65f6\u7684\u5e73\u5747\u6392\u961f\u957f\u4e3a\uff1a \\begin{aligned} L_q&=\\sum_{i=s + 1}^\\infty (i - s)p_i \\\\ &=\\sum_{i=s}^\\infty (i-s)\\frac{\\rho^i_0}{s!s^{i-s}}p_0 \\\\ &= \\frac{\\rho^s_0p_0}{s!}\\sum_{i=0}^\\infty \\frac{i\\rho_0^i}{s^i} \\\\ &= \\frac{\\rho^s_0p_0}{s!}\\sum_{i=1}^\\infty \\left(\\frac{\\rho_0}{s}\\right)^i\\frac{s}{s-\\rho_0} \\\\ &= \\frac{\\rho^s_0p_0}{(s-1)!(s-\\rho)}\\frac{\\rho_0/s}{1-\\rho_0/s} \\\\ &= \\frac{\\rho^{s+1}_0p_0}{(s-1)!(s-\\rho_0)^2} \\end{aligned} \\begin{aligned} L_q&=\\sum_{i=s + 1}^\\infty (i - s)p_i \\\\ &=\\sum_{i=s}^\\infty (i-s)\\frac{\\rho^i_0}{s!s^{i-s}}p_0 \\\\ &= \\frac{\\rho^s_0p_0}{s!}\\sum_{i=0}^\\infty \\frac{i\\rho_0^i}{s^i} \\\\ &= \\frac{\\rho^s_0p_0}{s!}\\sum_{i=1}^\\infty \\left(\\frac{\\rho_0}{s}\\right)^i\\frac{s}{s-\\rho_0} \\\\ &= \\frac{\\rho^s_0p_0}{(s-1)!(s-\\rho)}\\frac{\\rho_0/s}{1-\\rho_0/s} \\\\ &= \\frac{\\rho^{s+1}_0p_0}{(s-1)!(s-\\rho_0)^2} \\end{aligned} \u72b6\u6001\u4e3a n n \u7684\u7a33\u6001\u65f6\u7cfb\u7edf\u63a5\u53d7\u670d\u52a1\u7684\u5b9e\u4f53\u6570\u91cf\u4e3a\uff1a \\left\\{ \\begin{aligned} &n & n\\leq s \\\\ &s & n> s \\end{aligned} \\right . \\left\\{ \\begin{aligned} &n & n\\leq s \\\\ &s & n> s \\end{aligned} \\right . \u56e0\u6b64\uff0c\u7a33\u6001\u7cfb\u7edf\u4e2d\u63a5\u53d7\u670d\u52a1\u7684\u5b9e\u4f53\u5e73\u5747\u6570\u91cf\u4e3a\uff1a \\begin{aligned} L-L_q&=\\sum_{i=0}^s ip_i+\\sum_{i=s+1}^\\infty sp_i \\\\ &=\\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}p_0+s\\sum_{i=s+1}^\\infty \\frac{\\rho_0^i}{s!s^{i-s}}p_0 \\\\ &= \\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}p_0 + \\frac{\\rho_0^sp_0}{(s-1)!}\\sum_{i=1}^\\infty \\frac{\\rho_0^i}{s^i} \\\\ &= \\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}p_0 + \\frac{\\rho_0^{s+1}p_0}{(s-1)!(s-\\rho_0)} \\\\ &= \\frac{\\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}}{\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)} + \\frac{\\rho_0^{s+1}p_0}{(s-1)!(s-\\rho_0)} \\\\ &= \\frac{\\rho_0 T+1}{T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}} + \\frac{\\rho_0^{s+1}}{(s-1)!(s-\\rho_0)T+\\rho_0^s} \\\\ &= \\frac{(\\rho_0 T+1)(s-1)!(s-\\rho_0) + \\rho_0^{s+1}}{(s-1)!(s-\\rho_0)T+\\rho_0^s}\\\\ &= \\rho_0 + \\frac{(s-1)!(s-\\rho_0)}{(s-1)!(s-\\rho_0)T+\\rho_0^s} \\end{aligned} \\begin{aligned} L-L_q&=\\sum_{i=0}^s ip_i+\\sum_{i=s+1}^\\infty sp_i \\\\ &=\\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}p_0+s\\sum_{i=s+1}^\\infty \\frac{\\rho_0^i}{s!s^{i-s}}p_0 \\\\ &= \\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}p_0 + \\frac{\\rho_0^sp_0}{(s-1)!}\\sum_{i=1}^\\infty \\frac{\\rho_0^i}{s^i} \\\\ &= \\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}p_0 + \\frac{\\rho_0^{s+1}p_0}{(s-1)!(s-\\rho_0)} \\\\ &= \\frac{\\sum_{i=0}^s \\frac{\\rho_0^i}{(i-1)!}}{\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)} + \\frac{\\rho_0^{s+1}p_0}{(s-1)!(s-\\rho_0)} \\\\ &= \\frac{\\rho_0 T+1}{T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}} + \\frac{\\rho_0^{s+1}}{(s-1)!(s-\\rho_0)T+\\rho_0^s} \\\\ &= \\frac{(\\rho_0 T+1)(s-1)!(s-\\rho_0) + \\rho_0^{s+1}}{(s-1)!(s-\\rho_0)T+\\rho_0^s}\\\\ &= \\rho_0 + \\frac{(s-1)!(s-\\rho_0)}{(s-1)!(s-\\rho_0)T+\\rho_0^s} \\end{aligned} \u987e\u5ba2\u7684\u5e73\u5747\u9017\u7559\u65f6\u95f4 W=\\frac{L}{\\lambda} W=\\frac{L}{\\lambda} \uff1a \\begin{aligned} W&=\\frac{L}{\\lambda} \\\\ &= \\frac{\\sum_{i=0}^\\infty ip_i}{\\lambda} \\\\ &= \\frac{\\sum_{i=1}^s \\left(\\frac{\\rho_0^i}{(i-1)!\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)}\\right) + \\sum_{i=s+1}^\\infty \\left(i\\frac{\\rho_0^i}{s!s^{i-s}\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)}\\right) }{\\lambda} \\\\ &= \\frac{\\frac{T(s-1)!(s-\\rho_0)}{T(s-1)!(s-\\rho_0) + \\rho_0^s} + \\frac{\\rho_0^{s+1}(s-\\rho_0+1)/(s-\\rho_0)}{T(s-1)!(s-\\rho_0) + \\rho_0^s}}{\\lambda} \\\\ &= \\frac{T(s-1)!(s-\\rho_0) + \\rho_0^{s+1}(s-\\rho_0+1)/(s-\\rho_0)}{\\lambda(T(s-1)!(s-\\rho_0) + \\rho_0^s)} \\end{aligned} \\begin{aligned} W&=\\frac{L}{\\lambda} \\\\ &= \\frac{\\sum_{i=0}^\\infty ip_i}{\\lambda} \\\\ &= \\frac{\\sum_{i=1}^s \\left(\\frac{\\rho_0^i}{(i-1)!\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)}\\right) + \\sum_{i=s+1}^\\infty \\left(i\\frac{\\rho_0^i}{s!s^{i-s}\\left(T+\\frac{\\rho_0^s}{(s-1)!(s-\\rho_0)}\\right)}\\right) }{\\lambda} \\\\ &= \\frac{\\frac{T(s-1)!(s-\\rho_0)}{T(s-1)!(s-\\rho_0) + \\rho_0^s} + \\frac{\\rho_0^{s+1}(s-\\rho_0+1)/(s-\\rho_0)}{T(s-1)!(s-\\rho_0) + \\rho_0^s}}{\\lambda} \\\\ &= \\frac{T(s-1)!(s-\\rho_0) + \\rho_0^{s+1}(s-\\rho_0+1)/(s-\\rho_0)}{\\lambda(T(s-1)!(s-\\rho_0) + \\rho_0^s)} \\end{aligned}","title":"M/M/s\u961f\u5217"}],"index":{"fieldVectors":[["title/index.html",[0,5.805]],["text/index.html",[1,3.854,2,7.041,3,0.783,4,3.854,5,5.699,6,3.854,7,3.854,8,3.854,9,5.57,10,5.57,11,7.166,12,7.166,13,5.57,14,7.601,15,7.166,16,5.57,17,5.57,18,7.166,19,5.57,20,5.57,21,5.57,22,7.166,23,3.854,24,5.57,25,3.854,26,5.57,27,5.57,28,5.57,29,7.166,30,7.166,31,3.854,32,5.57,33,5.57,34,5.57,35,4.853,36,3.854,37,3.854,38,5.57,39,3.854,40,3.854,41,3.854,42,3.854,43,3.854,44,3.854,45,3.854,46,3.854,47,4.404,48,3.854,49,3.358,50,3.854,51,5.16,52,3.854,53,3.047,54,3.854,55,3.854,56,5.16,57,3.854,58,5.57,59,3.854,60,3.358,61,3.358,62,3.854,63,3.854,64,3.854,65,3.854,66,3.854,67,3.358,68,5.57,69,3.854,70,3.854,71,3.854,72,3.854,73,3.854]],["title/index.html#welcome-to-mkdocs",[1,3.943,2,3.652]],["text/index.html#welcome-to-mkdocs",[3,0.624,4,7.471,5,6.509,6,7.471,7,7.471]],["title/index.html#customization",[8,5.221]],["text/index.html#customization",[3,0.776,9,6.436,10,6.436,11,7.845,12,7.845,13,6.436,14,8.204,15,7.845,16,6.436,17,6.436,18,7.845,19,6.436,20,6.436,21,6.436,22,7.845,23,4.736,24,6.436,25,4.736,26,6.436,27,6.436,28,6.436,29,7.845,30,7.845,31,4.736,32,6.436,33,6.436,34,6.436,35,5.608,36,4.736,37,4.736,38,6.436,39,4.736,40,4.736,41,4.736,42,4.736,43,4.736,44,4.736,45,4.736]],["title/index.html#commands",[46,5.221]],["text/index.html#commands",[2,8.23,5,5.754,47,6.3,48,6.604,49,5.754,50,6.604,51,6.117,52,6.604,53,5.222,54,6.604,55,6.604,56,6.117,57,6.604,58,7.968,59,6.604,60,5.754,61,5.754,62,6.604,63,6.604,64,6.604]],["title/index.html#project-layout",[51,3.652,65,3.943]],["text/index.html#project-layout",[3,0.756,5,6.108,56,6.494,66,7.011,67,6.108,68,8.257,69,7.011,70,7.011,71,7.011,72,7.011,73,7.011]],["title/about.html",[]],["text/about.html",[3,0.715,74,8.307,75,6.18,76,8.307]],["title/weixin-2020.html",[77,5.805]],["text/weixin-2020.html",[3,0.811]],["title/weixin-2020.html#_1",[3,0.436]],["text/weixin-2020.html#_1",[3,0.807]],["title/coding/index.html",[3,0.436]],["text/coding/index.html",[3,0.795,78,5.756,79,5.528]],["title/coding/index.html#_1",[3,0.436]],["text/coding/index.html#_1",[3,0.782,78,5.83,79,5.599]],["title/coding/dsa.html",[3,0.436]],["text/coding/dsa.html",[3,0.812]],["title/coding/dsa.html#_1",[3,0.436]],["text/coding/dsa.html#_1",[3,0.809]],["title/coding/leetcode.html",[3,0.436]],["text/coding/leetcode.html",[3,0.814,78,4.218,80,0.721,81,2.876,82,3.551,83,5.335,84,2.532,85,4.051,86,4.051,87,3.775,88,4.414,89,3.775,90,4.414,91,5.335,92,4.414,93,4.414,94,4.051,95,3.905,96,4.218,97,1.996,98,4.414,99,4.414,100,4.414,101,4.414,102,4.394,103,4.414,104,4.414,105,4.414,106,4.414,107,4.414,108,4.414,109,4.414,110,4.414,111,4.414,112,4.414,113,4.414]],["title/coding/leetcode.html#leetcode",[3,0.329,78,3.117]],["text/coding/leetcode.html#leetcode",[3,0.813,80,0.731,81,2.917,82,3.602,83,5.411,84,2.569,85,4.109,86,4.109,87,3.829,88,4.477,89,3.829,90,4.477,91,5.411,92,4.477,93,4.477,94,4.109,95,3.961,96,4.279,97,2.025,98,4.477,99,4.477,100,4.477,101,4.477,102,4.434,103,4.477,104,4.477,105,4.477,106,4.477,107,4.477,108,4.477,109,4.477,110,4.477,111,4.477,112,4.477,113,4.477]],["title/coding/python.html",[3,0.436]],["text/coding/python.html",[3,0.752,79,6.505]],["title/coding/python.html#python",[79,3.964]],["text/coding/python.html#python",[]],["title/coding/python.html#_1",[3,0.436]],["text/coding/python.html#_1",[79,5.826]],["title/coding/dsa/vector-and-list.html",[3,0.436]],["text/coding/dsa/vector-and-list.html",[3,0.824,114,3.525,115,4.816,116,3.808,117,4.816,118,4.816,119,4.816,120,4.816,121,4.816,122,4.816,123,4.816,124,4.816,125,4.816,126,4.463,127,4.196,128,4.816,129,4.816,130,4.816,131,4.816,132,1.018,133,4.816,134,4.816,135,4.816,136,4.816]],["title/coding/dsa/vector-and-list.html#_1",[3,0.436]],["text/coding/dsa/vector-and-list.html#_1",[3,0.723]],["title/coding/dsa/vector-and-list.html#_2",[3,0.436]],["text/coding/dsa/vector-and-list.html#_2",[3,0.815,114,4.778,115,6.528,116,5.162,117,6.528,118,6.528,119,6.528,120,6.528,121,6.528]],["title/coding/dsa/vector-and-list.html#_3",[3,0.436]],["text/coding/dsa/vector-and-list.html#_3",[3,0.821,122,5.653,123,5.653,124,5.653,125,5.653,126,4.959,127,4.925,128,5.653,129,5.653,130,5.653,131,5.653,132,1.194,133,5.653,134,5.653,135,5.653,136,5.653]],["title/coding/leetcode/1.html",[3,0.329,80,0.533]],["text/coding/leetcode/1.html",[3,0.824,80,0.593,81,1.844,84,1.623,132,1.483,137,4.092,138,4.682,139,1.007,140,1.508,141,1.796,142,2.061,143,2.061,144,1.596,145,0.445,146,1.334,147,0.991,148,1.267,149,1.863,150,1.334,151,1.334,152,1.209,153,1.157,154,2.103,155,2.061,156,3.848,157,2.061,158,2.642,159,4.474,160,3.88,161,4.474,162,2.061,163,3.58,164,2.695,165,5.633,166,4.496,167,2.046,168,1.709,169,6.767,170,4.451,171,5.551,172,1.03,173,2.345,174,1.508,175,1.334,176,0.978]],["title/coding/leetcode/1.html#1",[3,0.329,80,0.533]],["text/coding/leetcode/1.html#1",[3,0.723]],["title/coding/leetcode/1.html#_1",[3,0.436]],["text/coding/leetcode/1.html#_1",[3,0.808,80,0.853,81,4.178,84,3.679,137,4.178,138,6.412,139,1.38,140,4.619,141,5.499,142,6.311,143,6.311,144,1.246,145,1.364]],["title/coding/leetcode/1.html#_2",[3,0.436]],["text/coding/leetcode/1.html#_2",[3,0.824,80,0.302,132,1.527,137,4.009,138,3.833,139,0.825,144,1.607,146,1.444,147,1.048,148,1.372,149,1.969,150,1.444,151,1.444,152,1.308,153,1.253,154,2.245,155,2.231,156,3.998,157,2.231,158,2.757,159,4.669,160,4.049,161,4.669,162,2.231,163,3.719,164,2.849,165,5.831,166,4.57,167,2.147,168,1.806,169,6.985,170,4.573,171,5.716,172,1.115,173,2.503,174,1.633,175,1.444,176,1.059]],["title/coding/leetcode/101.html",[3,0.329,177,3.652]],["text/coding/leetcode/101.html",[3,0.821,80,0.737,132,0.79,139,1.258,145,0.808,147,1.698,158,3.66,176,1.775,177,3.465,178,3.74,179,2.108,180,2.185,181,3.74,182,2.194,183,2.957,184,2.957,185,2.646,186,6.199,187,3.335,188,4.844,189,4.703,190,3.197,191,7.066,192,7.84,193,7.84,194,1.904,195,3.74,196,5.587,197,1.87]],["title/coding/leetcode/101.html#101",[3,0.329,177,3.652]],["text/coding/leetcode/101.html#101",[3,0.723]],["title/coding/leetcode/101.html#_1",[3,0.436]],["text/coding/leetcode/101.html#_1",[3,0.81,80,1.051,139,1.56,145,1.372,178,6.346,179,2.615,180,3.118,181,6.346]],["title/coding/leetcode/101.html#_2",[3,0.436]],["text/coding/leetcode/101.html#_2",[3,0.819,132,0.913,147,1.796,158,3.841,176,2.052,182,2.535,183,3.418,184,3.418,185,3.058,186,6.505,187,3.614,188,5.173,189,5.023,190,3.545,191,7.546,192,8.227,193,8.227,194,2.201,195,4.323,196,5.966,197,2.161]],["title/coding/leetcode/102.html",[3,0.329,198,3.652]],["text/coding/leetcode/102.html",[3,0.824,80,0.963,81,0.984,84,0.867,114,2.262,132,1.761,141,1.591,144,1.268,145,0.395,146,1.182,147,1.298,148,3.529,149,2.246,150,1.182,151,1.182,152,1.071,153,3.433,154,1.123,158,2.206,164,4.117,167,2.857,168,2.237,175,1.182,176,2.902,179,0.922,182,1.071,183,1.444,184,1.444,185,1.292,186,3.737,187,1.603,188,2.119,189,2.057,196,4.179,198,1.692,199,1.826,200,1.826,201,1.826,202,1.826,203,4.118,204,1.591,205,1.591,206,1.444,207,2.357,208,1.419,209,4.118,210,6.113,211,5.739,212,6.113,213,5.286,214,2.001,215,4.018,216,5.286,217,5.286,218,5.286,219,5.286,220,5.739]],["title/coding/leetcode/102.html#102",[3,0.329,198,3.652]],["text/coding/leetcode/102.html#102",[3,0.723]],["title/coding/leetcode/102.html#_1",[3,0.436]],["text/coding/leetcode/102.html#_1",[3,0.809,81,3.58,84,3.153,141,5.787,145,1.436,179,2.385,199,6.643,200,6.643,201,6.643,202,6.643]],["title/coding/leetcode/102.html#_2",[3,0.436]],["text/coding/leetcode/102.html#_2",[3,0.824,80,0.982,114,2.368,132,1.781,144,1.299,146,1.248,147,1.335,148,3.629,149,2.317,150,1.248,151,1.248,152,1.131,153,3.522,154,1.186,158,2.285,164,4.207,167,2.912,168,2.301,175,1.248,176,2.977,182,1.131,183,1.525,184,1.525,185,1.364,186,3.87,187,1.678,188,2.218,189,2.154,196,4.312,203,4.264,204,1.68,205,1.68,206,1.525,207,2.452,208,1.486,209,4.264,210,6.272,211,5.903,212,6.272,213,5.453,214,2.095,215,4.18,216,5.453,217,5.453,218,5.453,219,5.453,220,5.903]],["title/coding/leetcode/118.html",[3,0.329,100,3.262]],["text/coding/leetcode/118.html",[3,0.824,80,1.118,100,1.973,114,2.821,132,1.828,139,0.686,144,1.099,145,0.515,146,1.544,147,1.479,148,4.022,149,2.926,150,1.544,151,1.544,152,1.399,153,2.724,164,2.983,167,2.967,168,2.793,176,1.829,203,5.328,204,2.078,205,2.078,214,2.495,221,7.957,222,0.943,223,2.385,224,2.385,225,2.078,226,2.385,227,3.854,228,3.358,229,5.571,230,3.55,231,4.851,232,6.115]],["title/coding/leetcode/118.html#118",[3,0.329,100,3.262]],["text/coding/leetcode/118.html#118",[3,0.723]],["title/coding/leetcode/118.html#_1",[3,0.436]],["text/coding/leetcode/118.html#_1",[3,0.797,80,0.93,145,1.488,221,7.566,222,2.721,223,6.884,224,6.884,225,5.997,226,6.884]],["title/coding/leetcode/118.html#_2",[3,0.436]],["text/coding/leetcode/118.html#_2",[3,0.824,80,1.12,114,2.956,132,1.847,139,0.719,144,1.137,146,1.637,147,1.518,148,4.129,149,2.995,150,1.637,151,1.637,152,1.483,153,2.832,164,3.101,167,3.026,168,2.854,176,1.917,203,5.487,204,2.202,205,2.202,214,2.615,221,7.917,227,4.039,228,3.519,229,5.761,230,3.692,231,5.044,232,6.298]],["title/coding/leetcode/119.html",[3,0.264,101,2.62,102,1.997]],["text/coding/leetcode/119.html",[3,0.822,80,1.061,101,3.104,102,2.366,132,1.817,144,1.271,145,0.811,146,2.429,147,1.457,148,2.307,149,2.322,150,2.429,151,2.429,152,2.201,153,2.107,164,4.624,167,2.837,168,2.13,172,1.876,179,1.119,225,3.269,233,3.974,234,5.464,235,5.464,236,2.107,237,6.443,238,7.849,239,7.077,240,3.753]],["title/coding/leetcode/119.html#119-ii",[3,0.264,101,2.62,102,1.997]],["text/coding/leetcode/119.html#119-ii",[3,0.723]],["title/coding/leetcode/119.html#_1",[3,0.436]],["text/coding/leetcode/119.html#_1",[3,0.802,145,1.453,179,2.005,225,5.856,233,5.018,234,8.052,235,8.052]],["title/coding/leetcode/119.html#_2",[3,0.436]],["text/coding/leetcode/119.html#_2",[3,0.821,80,1.101,132,1.862,144,1.353,146,2.716,147,1.55,148,2.579,149,2.515,150,2.716,151,2.716,152,2.461,153,2.356,164,4.828,167,2.986,168,2.307,172,2.097,236,2.356,237,6.856,238,8.149,239,7.447,240,4.195]],["title/coding/leetcode/120.html",[3,0.329,241,3.262]],["text/coding/leetcode/120.html",[3,0.822,80,1.1,97,2.064,132,1.597,139,0.982,140,4.037,144,1.556,145,0.822,147,1.247,154,2.338,170,5.124,174,2.783,179,1.134,207,3.808,208,2.534,222,1.503,241,3.146,242,3.803,243,3.803,244,3.803,245,4.806,246,3.007,247,3.803,248,6.492,249,7.121,250,5.516,251,7.561]],["title/coding/leetcode/120.html#120",[3,0.329,241,3.262]],["text/coding/leetcode/120.html#120",[3,0.723]],["title/coding/leetcode/120.html#_1",[3,0.436]],["text/coding/leetcode/120.html#_1",[3,0.815,80,1.027,97,2.842,139,1.352,140,5.559,145,1.32,179,1.822,222,2.415,242,6.108,243,6.108,244,6.108,245,6.618]],["title/coding/leetcode/120.html#_2",[3,0.436]],["text/coding/leetcode/120.html#_2",[3,0.82,80,1.092,132,1.706,144,1.647,147,1.412,154,2.785,170,5.359,174,3.315,207,4.19,208,2.867,246,3.581,247,4.529,248,7.143,249,7.699,250,6.242,251,8.076]],["title/coding/leetcode/121.html",[3,0.329,252,3.262]],["text/coding/leetcode/121.html",[3,0.823,80,1.046,81,2.173,132,1.546,139,1.024,144,1.587,145,0.871,147,0.912,160,5.015,170,3.538,175,5.008,222,2.652,252,3.335,253,3.513,254,4.343,255,3.513,256,5.753,257,5.753,258,3.513,259,6.373,260,5.013,261,7.315]],["title/coding/leetcode/121.html#121",[3,0.329,252,3.262]],["text/coding/leetcode/121.html#121",[3,0.723]],["title/coding/leetcode/121.html#_1",[3,0.436]],["text/coding/leetcode/121.html#_1",[3,0.817,80,1.156,81,3.19,139,1.326,144,1.47,145,1.279,222,3.221,253,5.156,254,5.275,255,5.156]],["title/coding/leetcode/121.html#_2",[3,0.436]],["text/coding/leetcode/121.html#_2",[3,0.82,80,0.674,132,1.692,144,1.581,147,1.127,160,5.492,170,4.097,175,5.404,256,6.662,257,6.662,258,4.343,259,6.979,260,5.804,261,8.01]],["title/coding/leetcode/122.html",[3,0.264,102,1.997,103,2.62]],["text/coding/leetcode/122.html",[3,0.823,80,1.164,81,1.808,102,2.115,103,2.775,132,1.416,139,1.193,144,1.417,145,0.725,147,1.137,166,4.213,173,2.3,179,2.249,180,3.022,222,2.98,253,2.923,254,3.256,255,2.923,258,4.381,259,5.839,260,5.839,262,3.355,263,3.355,264,2.608,265,3.355,266,5.029,267,4.136]],["title/coding/leetcode/122.html#122-ii",[3,0.264,102,1.997,103,2.62]],["text/coding/leetcode/122.html#122-ii",[3,0.723]],["title/coding/leetcode/122.html#_1",[3,0.436]],["text/coding/leetcode/122.html#_1",[3,0.822,80,1.179,81,2.451,139,1.274,144,1.413,145,0.983,179,2.493,180,3.351,222,3.304,253,3.961,254,4.052,255,3.961,262,4.547,263,4.547,264,3.246,265,4.547]],["title/coding/leetcode/122.html#_2",[3,0.436]],["text/coding/leetcode/122.html#_2",[3,0.819,80,1.087,132,1.698,139,0.895,144,1.323,147,1.515,166,4.738,173,3.448,258,5.839,259,7.003,260,7.003,266,6.702,267,5.167]],["title/coding/leetcode/125.html",[3,0.329,104,3.262]],["text/coding/leetcode/125.html",[3,0.823,80,0.636,84,1.459,94,2.334,104,2.543,132,0.649,139,0.547,144,1.364,145,0.664,147,1.449,190,3.355,194,2.396,197,2.353,267,4.394,268,3.074,269,3.074,270,3.074,271,3.074,272,3.074,273,2.678,274,3.074,275,2.678,276,3.074,277,6.909,278,3.263,279,5.236,280,3.445,281,4.707,282,6.909,283,6.909,284,3.227,285,2.43,286,2.43,287,4.802,288,6.472]],["title/coding/leetcode/125.html#125",[3,0.329,104,3.262]],["text/coding/leetcode/125.html#125",[3,0.723]],["title/coding/leetcode/125.html#_1",[3,0.436]],["text/coding/leetcode/125.html#_1",[3,0.796,80,0.919,139,1.211,145,1.47,194,3.463,197,3.4,268,6.801,269,6.801,270,6.801,271,6.801,272,6.801,273,5.926]],["title/coding/leetcode/125.html#_2",[3,0.436]],["text/coding/leetcode/125.html#_2",[3,0.823,80,0.451,84,1.583,94,2.532,132,0.705,144,1.413,147,1.511,190,3.526,194,1.698,197,1.667,267,4.581,274,3.335,275,2.905,276,3.335,277,7.161,278,3.402,279,5.315,280,3.665,281,5.007,282,7.161,283,7.161,284,3.433,285,2.637,286,2.637,287,4.904,288,6.61]],["title/coding/leetcode/13.html",[3,0.329,85,2.994]],["text/coding/leetcode/13.html",[3,0.823,80,1.072,84,2.214,85,1.711,95,3.942,102,2.942,132,0.777,139,0.655,144,0.445,145,0.487,147,0.509,166,4.022,167,3.125,173,4.07,179,1.392,180,2.554,208,3.087,222,2.657,264,2.793,278,1.873,279,2.209,289,6.226,290,5.037,291,4.241,292,4.911,293,4.368,294,4.09,295,4.989,296,4.665,297,2.253,298,2.253,299,2.253,300,2.253,301,2.253,302,2.253,303,4.665,304,3.68,305,2.253,306,3.206,307,1.963,308,3.68,309,2.253,310,3.68,311,2.253,312,2.253,313,2.253,314,2.253,315,2.253,316,2.253,317,2.253,318,2.253,319,2.253,320,2.253,321,2.253,322,2.253,323,2.253,324,2.253,325,2.253,326,6.722]],["title/coding/leetcode/13.html#13",[3,0.329,85,2.994]],["text/coding/leetcode/13.html#13",[3,0.723]],["title/coding/leetcode/13.html#_1",[3,0.436]],["text/coding/leetcode/13.html#_1",[3,0.819,80,0.984,84,2.92,95,4.503,102,3.879,139,0.918,145,0.749,179,1.835,180,3.059,208,3.344,222,3.016,264,2.673,289,6.744,290,5.386,291,4.535,292,5.09,293,4.67,294,3.914,295,4.774,296,6.152,297,3.467,298,3.467,299,3.467,300,3.467,301,3.467,302,3.467,303,6.152,304,5.154,305,3.467,306,4.491,307,3.021,308,5.154,309,3.467,310,5.154,311,3.467,312,3.467,313,3.467,314,3.467,315,3.467,316,3.467,317,3.467,318,3.467,319,3.467,320,3.467,321,3.467,322,3.467,323,3.467]],["title/coding/leetcode/13.html#_2",[3,0.436]],["text/coding/leetcode/13.html#_2",[3,0.823,80,1.11,95,2.642,132,1.122,144,0.712,147,0.816,166,4.594,167,3.505,173,5.076,208,2.439,222,1.427,264,2.754,278,2.704,279,3.188,289,4.919,290,4.199,291,3.535,292,4.393,293,3.641,294,4.032,295,4.919,324,3.61,325,3.61,326,8.004]],["title/coding/leetcode/136.html",[3,0.329,105,3.262]],["text/coding/leetcode/136.html",[3,0.822,80,0.853,105,3.807,132,1.638,137,3.402,139,0.819,144,1.53,145,0.995,147,1.041,156,5.417,163,3.702,167,2.888,180,1.845,291,5.406,327,4.602,328,4.602,329,4.602,330,4.602]],["title/coding/leetcode/136.html#136",[3,0.329,105,3.262]],["text/coding/leetcode/136.html#136",[3,0.723]],["title/coding/leetcode/136.html#_1",[3,0.436]],["text/coding/leetcode/136.html#_1",[3,0.802,80,1.108,139,1.233,145,1.497,180,2.777,327,6.926,328,6.926]],["title/coding/leetcode/136.html#_2",[3,0.436]],["text/coding/leetcode/136.html#_2",[3,0.82,132,1.713,137,3.666,144,1.601,147,1.163,156,5.573,163,3.99,167,3.056,291,5.615,329,5.143,330,5.143]],["title/coding/leetcode/14.html",[3,0.329,86,2.994]],["text/coding/leetcode/14.html",[3,0.824,80,1.089,86,1.928,97,0.95,132,1.069,139,1.028,144,1.492,145,0.549,147,1.427,149,2.15,167,2.028,168,2.753,172,2.529,173,1.741,176,1.205,214,1.644,230,4.227,267,4.327,278,4.315,280,1.858,331,2.539,332,2.539,333,2.539,334,2.212,335,5.059,336,5.059,337,4.053,338,4.227,339,4.227,340,4.053,341,6.152,342,7.333,343,6.312]],["title/coding/leetcode/14.html#14",[3,0.329,86,2.994]],["text/coding/leetcode/14.html#14",[3,0.723]],["title/coding/leetcode/14.html#_1",[3,0.436]],["text/coding/leetcode/14.html#_1",[3,0.813,80,0.903,139,1.189,145,1.444,280,4.89,331,6.682,332,6.682,333,6.682]],["title/coding/leetcode/14.html#_2",[3,0.436]],["text/coding/leetcode/14.html#_2",[3,0.824,80,1.092,97,1.023,132,1.122,139,0.945,144,1.528,147,1.48,149,2.257,167,2.129,168,2.833,172,2.655,173,1.875,176,1.298,214,1.77,230,4.406,267,4.486,278,4.38,334,2.382,335,5.311,336,5.311,337,4.298,338,4.406,339,4.406,340,4.298,341,6.331,342,7.527,343,6.544]],["title/coding/leetcode/155.html",[3,0.329,344,3.652]],["text/coding/leetcode/155.html",[3,0.822,47,1.994,75,2.087,80,0.681,132,1.546,139,0.897,144,0.994,145,0.545,147,1.139,149,1.072,152,1.479,153,1.416,154,1.551,158,2.686,159,3.188,160,4.599,168,1.572,172,1.261,174,1.846,179,1.502,187,2.612,207,2.954,208,3.36,236,2.828,246,1.994,344,2.336,345,2.522,346,5.037,347,7.45,348,2.522,349,4.032,350,2.522,351,2.522,352,2.522,353,2.522,354,7.759,355,4.032,356,2.522,357,4.032,358,2.522,359,2.522,360,5.754,361,2.197,362,2.522,363,2.522,364,2.522,365,2.522,366,4.032,367,2.522,368,7.614,369,2.522,370,2.522,371,2.522,372,2.522,373,2.197,374,2.197,375,2.522,376,2.522,377,2.522,378,2.522,379,2.522,380,2.522,381,2.522]],["title/coding/leetcode/155.html#155",[3,0.329,344,3.652]],["text/coding/leetcode/155.html#155",[3,0.723]],["title/coding/leetcode/155.html#_1",[3,0.436]],["text/coding/leetcode/155.html#_1",[3,0.815,47,4.238,139,1.384,144,1.058,145,1.158,179,2.32,208,2.462,345,5.36,346,7.778,347,7.204,348,5.36,349,6.99,350,5.36,351,5.36,352,5.36,353,5.36,354,7.204,355,6.99,356,5.36,357,6.99,358,5.36,359,5.36]],["title/coding/leetcode/155.html#_2",[3,0.436]],["text/coding/leetcode/155.html#_2",[3,0.821,75,2.496,80,0.764,132,1.643,144,0.916,147,1.278,149,1.282,152,1.77,153,1.694,154,1.855,158,2.963,159,3.668,160,4.96,168,1.809,172,1.508,174,2.208,187,2.932,207,3.316,208,3.461,236,3.174,246,2.385,347,7.39,354,7.79,360,6.347,361,2.628,362,3.017,363,3.017,364,3.017,365,3.017,366,4.64,367,3.017,368,7.836,369,3.017,370,3.017,371,3.017,372,3.017,373,2.628,374,2.628,375,3.017,376,3.017,377,3.017,378,3.017,379,3.017,380,3.017,381,3.017]],["title/coding/leetcode/189.html",[3,0.329,106,3.262]],["text/coding/leetcode/189.html",[3,0.822,80,1.085,106,2.759,132,1.589,137,4.424,139,1.275,144,0.988,145,0.721,147,0.754,163,4.576,179,1.494,233,5.042,236,2.811,287,4.201,288,5.662,294,3.802,382,3.335,383,5.007,384,3.335,385,3.335,386,3.335,387,5.007,388,3.335,389,3.335,390,3.665,391,5.283,392,3.892,393,2.905]],["title/coding/leetcode/189.html#189",[3,0.329,106,3.262]],["text/coding/leetcode/189.html#189",[3,0.723]],["title/coding/leetcode/189.html#_1",[3,0.436]],["text/coding/leetcode/189.html#_1",[3,0.816,80,1.208,139,1.47,145,1.164,179,2.092,233,4.636,294,5.324,382,5.386,383,7.011,384,5.386,385,5.386,386,5.386,387,7.011,388,5.386,389,5.386,390,5.131]],["title/coding/leetcode/189.html#_2",[3,0.436]],["text/coding/leetcode/189.html#_2",[3,0.82,80,0.573,132,1.728,137,4.699,139,0.755,144,1.177,147,0.959,163,4.928,233,5.102,236,3.349,287,4.625,288,6.235,391,5.917,392,4.466,393,3.696]],["title/coding/leetcode/19.html",[97,1.475,394,3.652]],["text/coding/leetcode/19.html",[3,0.822,80,0.939,97,3.073,132,1.331,139,1.121,144,1.048,145,0.78,147,1.425,158,3.456,166,4.658,176,2.99,179,1.584,180,1.447,182,2.117,187,1.872,222,2.099,287,4.075,392,2.337,394,3.344,395,2.475,396,2.475,397,2.337,398,4.552,399,4.917,400,3.61,401,6.947]],["title/coding/leetcode/19.html#19-n",[97,1.475,394,3.652]],["text/coding/leetcode/19.html#19-n",[3,0.723]],["title/coding/leetcode/19.html#_1",[3,0.436]],["text/coding/leetcode/19.html#_1",[3,0.807,80,1.066,97,3.178,139,1.512,145,1.403,179,2.352,180,2.603,222,3.117]],["title/coding/leetcode/19.html#_2",[3,0.436]],["text/coding/leetcode/19.html#_2",[3,0.821,80,0.786,97,2.755,132,1.428,144,1.147,147,1.529,158,3.631,166,4.78,176,3.209,182,2.399,187,2.121,287,4.319,392,2.648,395,2.804,396,2.804,397,2.648,398,4.782,399,5.07,400,4.09,401,7.363]],["title/coding/leetcode/198.html",[3,0.329,402,3.652]],["text/coding/leetcode/198.html",[3,0.823,80,1.174,84,2.193,132,1.589,137,3.891,139,1.285,144,1.484,145,0.649,147,1.045,149,1.275,154,1.845,163,4.411,168,1.801,172,1.5,175,2.992,179,1.888,180,1.853,206,2.373,207,3.305,208,2.122,222,1.186,294,2.279,307,2.614,402,2.78,403,2.614,404,3.001,405,3.269,406,2.614,407,2.614,408,7.219,409,4.621,410,4.621,411,4.621,412,3.001,413,7.521]],["title/coding/leetcode/198.html#198",[3,0.329,402,3.652]],["text/coding/leetcode/198.html#198",[3,0.723]],["title/coding/leetcode/198.html#_1",[3,0.436]],["text/coding/leetcode/198.html#_1",[3,0.82,80,1.199,84,3.258,139,1.366,144,1.354,145,1.127,179,2.432,180,2.752,222,2.061,294,3.958,307,4.542,403,4.542,404,5.213,405,4.856,406,4.542,407,4.542]],["title/coding/leetcode/198.html#_2",[3,0.436]],["text/coding/leetcode/198.html#_2",[3,0.821,80,1.126,132,1.719,137,4.25,139,1.156,144,1.492,147,1.247,149,1.616,154,2.338,163,4.772,168,2.151,172,1.901,175,3.571,206,3.007,207,3.808,208,2.534,408,7.885,409,5.516,410,5.516,411,5.516,412,3.803,413,8.135]],["title/coding/leetcode/204.html",[3,0.329,414,3.652]],["text/coding/leetcode/204.html",[3,0.823,53,2.411,80,1.104,81,3.44,97,3.109,132,1.348,139,1.293,144,0.923,145,0.659,147,0.689,149,1.296,167,2.282,168,1.824,170,4.467,172,1.524,179,2.437,180,1.875,222,1.205,264,2.426,278,3.698,414,2.824,415,4.075,416,3.049,417,5.691,418,3.049,419,6.329,420,6.884,421,3.049,422,4.678,423,3.049,424,3.049]],["title/coding/leetcode/204.html#204",[3,0.329,414,3.652]],["text/coding/leetcode/204.html#204",[3,0.723]],["title/coding/leetcode/204.html#_1",[3,0.436]],["text/coding/leetcode/204.html#_1",[3,0.803,81,3.644,97,2.53,139,1.204,145,1.461,179,2.017,180,3.24,222,2.673,264,4.191]],["title/coding/leetcode/204.html#_2",[3,0.436]],["text/coding/leetcode/204.html#_2",[3,0.823,53,2.621,80,1.128,81,3.229,97,3.124,132,1.408,139,1.272,144,0.984,147,0.75,149,1.409,167,2.402,168,1.943,170,4.614,172,1.658,179,2.445,278,3.82,415,4.343,416,3.316,417,5.991,418,3.316,419,6.538,420,7.143,421,3.316,422,4.985,423,3.316,424,3.316]],["title/coding/leetcode/206.html",[3,0.329,107,3.262]],["text/coding/leetcode/206.html",[3,0.821,80,0.768,107,3.277,132,0.837,139,1.011,145,0.856,147,1.285,158,3.587,176,3.153,179,1.695,180,2.278,182,2.324,187,2.055,222,2.246,287,4.831,338,5.311,339,6.028,395,2.716,396,2.716,397,2.565,398,4.724,399,5.106,425,3.962,426,6.694]],["title/coding/leetcode/206.html#206",[3,0.329,107,3.262]],["text/coding/leetcode/206.html#206",[3,0.723]],["title/coding/leetcode/206.html#_1",[3,0.436]],["text/coding/leetcode/206.html#_1",[3,0.778,80,1.1,139,1.449,145,1.479,176,3.863,179,2.428,180,3.263,222,3.217]],["title/coding/leetcode/206.html#_2",[3,0.436]],["text/coding/leetcode/206.html#_2",[3,0.82,132,0.927,147,1.381,158,3.728,176,2.083,182,2.575,187,2.276,287,4.975,338,5.559,339,6.207,395,3.009,396,3.009,397,2.842,398,4.91,399,5.218,425,4.389,426,6.957]],["title/coding/leetcode/21.html",[3,0.329,87,2.789]],["text/coding/leetcode/21.html",[3,0.82,80,1.01,87,2.99,132,0.893,139,1.059,145,0.913,147,1.689,158,3.676,179,1.775,180,2.996,182,2.479,187,3.57,395,2.897,396,2.897,397,2.736,398,4.842,399,4.619,427,6.884,428,8.568,429,8.568]],["title/coding/leetcode/21.html#21",[3,0.329,87,2.789]],["text/coding/leetcode/21.html#21",[3,0.723]],["title/coding/leetcode/21.html#_1",[3,0.436]],["text/coding/leetcode/21.html#_1",[3,0.753,80,1.22,139,1.459,145,1.497,179,2.445,180,3.619]],["title/coding/leetcode/21.html#_2",[3,0.436]],["text/coding/leetcode/21.html#_2",[3,0.819,132,0.988,147,1.765,158,3.813,182,2.744,187,3.768,395,3.207,396,3.207,397,3.028,398,5.022,399,4.791,427,7.265,428,8.783,429,8.783]],["title/coding/leetcode/217.html",[3,0.329,108,3.262]],["text/coding/leetcode/217.html",[3,0.822,80,0.929,108,3.483,132,1.771,137,4.021,139,1.056,144,0.831,145,0.91,147,1.687,156,3.741,163,4.375,168,1.641,179,1.256,190,2.47,194,3.797,197,3.729,236,3.332,403,3.668,430,4.211,431,4.211,432,5.933,433,5.933,434,4.211,435,4.211]],["title/coding/leetcode/217.html#217",[3,0.329,108,3.262]],["text/coding/leetcode/217.html#217",[3,0.723]],["title/coding/leetcode/217.html#_1",[3,0.436]],["text/coding/leetcode/217.html#_1",[3,0.806,80,0.893,139,1.176,145,1.427,179,1.97,194,4.056,197,4.278,403,5.754,430,6.604,431,6.604]],["title/coding/leetcode/217.html#_2",[3,0.436]],["text/coding/leetcode/217.html#_2",[3,0.821,80,0.88,132,1.837,137,4.258,139,0.857,144,0.95,147,1.786,156,4.105,163,4.633,168,1.878,190,2.825,194,3.314,197,2.408,236,3.655,432,6.51,433,6.51,434,4.816,435,4.816]],["title/coding/leetcode/234.html",[3,0.329,436,3.652]],["text/coding/leetcode/234.html",[3,0.822,80,0.881,132,1.377,139,1.248,144,0.953,145,0.687,147,1.32,149,1.35,158,3.78,167,2.614,168,1.238,176,2.771,182,1.863,187,3.979,190,1.863,194,2.457,197,2.413,245,4.205,267,4.002,285,2.512,287,3.424,338,5.926,339,5.132,390,3.533,391,5.155,395,2.178,396,2.178,397,2.057,398,4.979,399,4.501,436,2.943,437,4.827]],["title/coding/leetcode/234.html#234",[3,0.329,436,3.652]],["text/coding/leetcode/234.html#234",[3,0.723]],["title/coding/leetcode/234.html#_1",[3,0.436]],["text/coding/leetcode/234.html#_1",[3,0.8,80,1.199,139,1.579,145,1.419,194,3.343,197,3.283,245,6.918,390,5.811]],["title/coding/leetcode/234.html#_2",[3,0.436]],["text/coding/leetcode/234.html#_2",[3,0.821,132,1.45,139,0.627,144,1.029,147,1.404,149,1.496,158,3.888,167,2.752,168,1.372,176,2.947,182,2.065,187,4.118,190,2.065,194,1.792,197,1.76,267,4.256,285,2.784,287,3.642,338,6.095,339,5.363,391,5.427,395,2.414,396,2.414,397,2.279,398,5.12,399,4.658,437,5.213]],["title/coding/leetcode/237.html",[3,0.329,109,3.262]],["text/coding/leetcode/237.html",[3,0.82,80,1.068,84,3.09,109,3.984,139,0.857,145,1.041,158,2.248,180,2.61,185,6.151,187,3.376,222,2.915,236,2.704,287,4.326,398,2.961,399,4.633,438,7.375,439,4.816,440,4.816,441,4.816]],["title/coding/leetcode/237.html#237",[3,0.329,109,3.262]],["text/coding/leetcode/237.html#237",[3,0.723]],["title/coding/leetcode/237.html#_1",[3,0.436]],["text/coding/leetcode/237.html#_1",[3,0.814,80,1.152,84,3.512,139,1.043,145,1.266,180,2.966,185,5.234,222,3.206,287,4.757,438,8.11,439,5.857,440,5.857]],["title/coding/leetcode/237.html#_2",[3,0.436]],["text/coding/leetcode/237.html#_2",[3,0.811,158,2.946,185,6.354,187,4.02,236,3.544,398,3.881,399,5.132,441,6.311]],["title/coding/leetcode/24.html",[3,0.329,88,3.262]],["text/coding/leetcode/24.html",[3,0.82,80,0.846,88,3.762,132,0.961,139,1.114,145,0.983,147,1.415,158,3.775,179,1.867,180,2.51,182,2.667,187,2.358,287,5.023,395,3.117,396,3.117,397,2.944,398,4.973,399,4.903,442,6.26,443,7.712,444,6.26]],["title/coding/leetcode/24.html#24",[3,0.329,88,3.262]],["text/coding/leetcode/24.html#24",[3,0.723]],["title/coding/leetcode/24.html#_1",[3,0.436]],["text/coding/leetcode/24.html#_1",[3,0.773,80,1.12,139,1.475,145,1.524,179,2.472,180,3.322]],["title/coding/leetcode/24.html#_2",[3,0.436]],["text/coding/leetcode/24.html#_2",[3,0.818,132,1.058,147,1.511,158,3.903,182,2.937,187,2.597,287,5.15,395,3.433,396,3.433,397,3.241,398,5.14,399,5.045,442,6.682,443,8.024,444,6.682]],["title/coding/leetcode/242.html",[3,0.329,110,3.262]],["text/coding/leetcode/242.html",[3,0.824,80,0.521,89,4.628,110,3.188,126,5.431,132,1.177,139,0.686,144,1.414,145,0.833,147,1.26,166,4.508,190,2.261,194,2.836,197,2.785,273,3.358,278,3.33,279,4.755,445,3.854,446,3.854,447,3.854,448,3.854,449,3.854,450,6.541,451,6.541]],["title/coding/leetcode/242.html#242",[3,0.329,110,3.262]],["text/coding/leetcode/242.html#242",[3,0.723]],["title/coding/leetcode/242.html#_1",[3,0.436]],["text/coding/leetcode/242.html#_1",[3,0.812,80,0.83,126,5.941,139,1.093,145,1.327,194,3.126,197,3.07,273,5.35,279,5.202,445,6.141,446,6.141,447,6.141,448,6.141]],["title/coding/leetcode/242.html#_2",[3,0.436]],["text/coding/leetcode/242.html#_2",[3,0.823,89,5.086,126,4.315,132,1.33,144,1.527,147,1.423,166,4.711,190,2.689,194,2.333,197,2.292,278,3.659,279,3.778,449,4.584,450,7.188,451,7.188]],["title/coding/leetcode/26.html",[3,0.329,89,2.789]],["text/coding/leetcode/26.html",[3,0.824,80,1.098,89,2.682,132,1.664,137,4.646,139,1.344,144,1.403,145,0.819,147,1.244,163,4.429,179,1.131,180,1.52,222,1.498,267,3.773,390,4.028,452,3.79,453,3.79,454,3.79,455,3.79,456,3.79,457,8.127]],["title/coding/leetcode/26.html#26",[3,0.329,89,2.789]],["text/coding/leetcode/26.html#26",[3,0.723]],["title/coding/leetcode/26.html#_1",[3,0.436]],["text/coding/leetcode/26.html#_1",[3,0.82,80,1.044,132,1.463,137,4.587,139,1.459,144,1.367,145,1.142,179,1.577,180,2.119,222,2.09,267,4.748,390,5.069,452,5.286,453,5.286,454,5.286,455,5.286]],["title/coding/leetcode/26.html#_2",[3,0.436]],["text/coding/leetcode/26.html#_2",[3,0.82,80,1.092,132,1.707,137,4.533,139,0.907,144,1.334,147,1.529,163,4.933,456,5.097,457,8.819]],["title/coding/leetcode/28.html",[3,0.264,90,2.62,458,2.62]],["text/coding/leetcode/28.html",[3,0.823,80,1.076,90,2.688,132,1.037,139,0.874,144,1.639,145,0.702,147,1.491,278,2.5,286,3.882,291,2.163,338,5.659,339,5.183,426,6.169,458,5.456,459,7.548,460,7.693,461,3.249,462,2.831,463,3.249,464,3.249,465,3.249,466,3.249,467,5.918,468,7.081,469,7.081]],["title/coding/leetcode/28.html#28-strstr",[3,0.264,90,2.62,458,2.62]],["text/coding/leetcode/28.html#28-strstr",[3,0.723]],["title/coding/leetcode/28.html#_1",[3,0.436]],["text/coding/leetcode/28.html#_1",[3,0.813,80,1.086,139,1.3,144,1.441,145,1.24,291,3.82,458,6.042,459,7.833,460,8.268,461,5.739,462,5,463,5.739,464,5.739,465,5.739,466,5.739]],["title/coding/leetcode/28.html#_2",[3,0.436]],["text/coding/leetcode/28.html#_2",[3,0.822,80,1.036,132,1.194,144,1.66,147,1.636,278,2.878,286,4.47,338,6.015,339,5.608,426,6.676,458,3.255,459,7.098,460,6.701,467,6.617,468,7.663,469,7.663]],["title/coding/leetcode/315.html",[3,0.329,111,3.262]],["text/coding/leetcode/315.html",[3,0.823,80,1.038,111,2.037,116,4.487,132,1.688,137,3.059,139,0.882,144,1.31,145,0.532,146,1.594,147,1.405,148,1.514,149,2.106,150,1.594,151,1.594,152,1.444,153,1.383,158,3.493,163,3.893,164,2.432,167,3.078,168,1.932,172,1.231,176,2.693,187,2.57,188,3.89,189,3.777,222,0.973,254,1.594,406,2.145,407,4.318,470,3.955,471,2.462,472,2.462,473,2.462,474,2.462,475,3.955,476,7.482,477,5.675,478,7.678,479,6.215,480,5.675,481,2.462,482,4.956]],["title/coding/leetcode/315.html#315",[3,0.329,111,3.262]],["text/coding/leetcode/315.html#315",[3,0.723]],["title/coding/leetcode/315.html#_1",[3,0.436]],["text/coding/leetcode/315.html#_1",[3,0.812,80,1.205,137,3.924,139,1.427,144,1.437,145,1.234,222,2.257,254,3.697,406,4.975,407,6.983,470,7.28,471,5.71,472,5.71,473,5.71,474,5.71,475,7.28]],["title/coding/leetcode/315.html#_2",[3,0.436]],["text/coding/leetcode/315.html#_2",[3,0.822,80,0.83,116,4.856,132,1.751,137,2.384,144,1.212,146,1.836,147,1.506,148,1.744,149,2.311,150,1.836,151,1.836,152,1.664,153,1.593,158,3.656,163,4.138,164,2.72,167,3.21,168,2.12,172,1.418,176,2.915,187,2.82,188,4.211,189,4.088,476,7.831,477,6.141,478,8.008,479,6.659,480,6.141,481,2.836,482,5.438]],["title/coding/leetcode/344.html",[3,0.329,112,3.262]],["text/coding/leetcode/344.html",[3,0.82,80,1.123,112,4.07,132,1.04,139,1.176,144,0.971,145,1.063,147,1.113,236,2.763,278,3.795,279,5.137,390,3.601,392,4.826,483,4.92,484,4.92,485,4.92,486,6.604,487,6.604,488,8.311]],["title/coding/leetcode/344.html#344",[3,0.329,112,3.262]],["text/coding/leetcode/344.html#344",[3,0.723]],["title/coding/leetcode/344.html#_1",[3,0.436]],["text/coding/leetcode/344.html#_1",[3,0.793,80,0.93,139,1.225,145,1.488,278,3.504,390,5.038,483,6.884,484,6.884,485,6.884,486,8.168]],["title/coding/leetcode/344.html#_2",[3,0.436]],["text/coding/leetcode/344.html#_2",[3,0.816,80,1.13,132,1.177,139,0.992,144,1.099,147,1.26,236,3.128,278,3.648,279,5.316,392,5.129,487,7.166,488,8.652]],["title/coding/leetcode/350.html",[3,0.264,102,1.997,489,2.934]],["text/coding/leetcode/350.html",[3,0.825,80,0.763,102,1.293,132,1.601,139,0.365,144,1.593,145,0.443,147,0.464,149,1.447,154,1.26,158,2.634,159,4.461,160,4.173,164,2.685,165,5.882,166,4.682,167,1.751,168,1.702,171,6.526,172,1.025,207,2.561,208,1.564,246,1.621,489,1.899,490,5.338,491,2.05,492,5.54,493,3.405,494,2.05,495,2.05,496,2.05,497,6.45,498,6.45,499,2.05,500,4.43,501,4.43]],["title/coding/leetcode/350.html#350-ii",[3,0.264,102,1.997,489,2.934]],["text/coding/leetcode/350.html#350-ii",[3,0.723]],["title/coding/leetcode/350.html#_1",[3,0.436]],["text/coding/leetcode/350.html#_1",[3,0.81,80,0.853,139,1.123,145,1.364,490,6.633,491,6.311,492,6.917,493,7.751,494,6.311,495,6.311,496,6.311]],["title/coding/leetcode/350.html#_2",[3,0.436]],["text/coding/leetcode/350.html#_2",[3,0.824,80,0.722,132,1.64,144,1.624,147,0.502,149,1.546,154,1.366,158,2.751,159,4.66,160,4.339,164,2.841,165,6.076,166,4.745,167,1.853,168,1.801,171,6.641,172,1.111,207,2.71,208,1.671,246,1.757,490,4.66,492,4.66,497,6.682,498,6.682,499,2.222,500,4.654,501,4.654]],["title/coding/leetcode/36.html",[3,0.329,92,3.262]],["text/coding/leetcode/36.html",[3,0.824,80,1.078,82,2.27,84,2.416,92,1.699,132,1.287,139,0.366,144,1.613,145,0.444,147,1.151,168,1.705,170,5.125,172,2.186,179,2.487,190,1.205,194,2.592,197,1.705,222,0.812,233,4.258,278,1.045,502,3.41,503,3.41,504,2.054,505,3.41,506,3.41,507,3.41,508,3.41,509,3.41,510,3.41,511,3.41,512,3.41,513,2.054,514,2.054,515,7.729,516,7.011,517,2.054,518,6.455,519,5.091]],["title/coding/leetcode/36.html#36",[3,0.329,92,3.262]],["text/coding/leetcode/36.html#36",[3,0.723]],["title/coding/leetcode/36.html#_1",[3,0.436]],["text/coding/leetcode/36.html#_1",[3,0.818,80,1.162,82,4.448,84,3.809,139,0.891,145,1.082,194,2.549,197,2.503,222,1.979,502,6.682,503,6.682,504,5.007,505,6.682,506,6.682,507,6.682,508,6.682,509,6.682,510,6.682,511,6.682,512,6.682,513,5.007]],["title/coding/leetcode/36.html#_2",[3,0.436]],["text/coding/leetcode/36.html#_2",[3,0.824,80,1.009,132,1.398,144,1.676,147,1.278,168,1.924,170,5.307,172,2.467,179,2.575,190,1.435,194,2.512,197,1.223,233,4.479,278,1.245,514,2.446,515,8.106,516,7.466,517,2.446,518,6.956,519,5.654]],["title/coding/leetcode/38.html",[3,0.329,93,3.262]],["text/coding/leetcode/38.html",[3,0.824,80,1.166,87,3.433,93,1.574,97,2.878,132,1.025,139,1.252,140,3.961,144,1.291,145,0.411,147,0.936,149,1.759,153,2.324,161,4.279,166,3.16,167,3.084,168,2.11,172,1.599,176,0.903,179,0.954,180,1.283,222,0.752,230,3.961,264,2.517,278,3.846,286,2.529,287,2.846,288,4.279,392,4.553,405,2.263,520,4.228,521,2.787,522,5.412,523,3.199,524,1.903,525,4.139,526,3.199,527,7.033,528,5.412,529,3.199]],["title/coding/leetcode/38.html#38",[3,0.329,93,3.262]],["text/coding/leetcode/38.html#38",[3,0.723]],["title/coding/leetcode/38.html#_1",[3,0.436]],["text/coding/leetcode/38.html#_1",[3,0.817,80,1.267,87,5.383,97,3.177,139,1.511,140,5.852,145,0.952,179,1.827,180,2.456,222,1.742,405,4.333,520,6.629,521,5.336,522,7.996,523,6.125]],["title/coding/leetcode/38.html#_2",[3,0.436]],["text/coding/leetcode/38.html#_2",[3,0.824,80,0.968,97,2.574,132,1.175,139,0.862,144,1.413,147,1.095,149,2.058,153,2.72,161,4.83,166,3.522,167,3.273,168,2.381,172,1.924,176,1.13,230,4.471,264,2.885,278,4.097,286,3.042,287,3.263,288,4.83,392,4.918,524,2.38,525,4.844,526,3.848,527,7.596,528,6.109,529,3.848]],["title/coding/leetcode/384.html",[3,0.329,530,3.652]],["text/coding/leetcode/384.html",[3,0.823,47,1.764,67,1.943,80,0.302,114,5.112,132,1.818,137,3.765,139,0.397,144,0.72,145,0.789,147,1.335,148,2.245,149,2.275,152,1.308,153,2.602,158,1.704,163,3.464,167,2.982,168,2.472,179,0.665,207,3.141,208,2.459,214,2.363,228,5.524,236,1.253,361,1.943,368,6.998,373,1.943,374,1.943,392,3,419,4.037,530,2.066,531,4.669,532,7.2,533,2.231,534,3.65,535,2.231,536,3.65,537,3.65,538,2.231,539,2.231,540,1.943,541,2.231,542,2.231,543,2.231,544,2.231,545,5.906,546,2.231,547,2.231,548,2.231,549,2.231,550,2.231,551,2.231,552,2.231,553,2.231,554,2.231]],["title/coding/leetcode/384.html#384",[3,0.329,530,3.652]],["text/coding/leetcode/384.html#384",[3,0.723]],["title/coding/leetcode/384.html#_1",[3,0.436]],["text/coding/leetcode/384.html#_1",[3,0.803,47,5.046,80,0.863,132,1.348,137,3.44,139,1.136,145,1.379,179,1.904,531,7.123,532,7.229,533,6.382,534,7.804,535,6.382]],["title/coding/leetcode/384.html#_2",[3,0.436]],["text/coding/leetcode/384.html#_2",[3,0.823,67,2.109,114,5.274,132,1.833,137,3.733,144,0.77,145,0.523,147,1.393,148,2.398,149,2.388,152,1.42,153,2.751,158,1.821,163,3.614,167,3.062,168,2.567,207,3.296,208,2.58,214,2.525,228,5.737,236,1.359,361,2.109,368,7.142,373,2.109,374,2.109,392,3.172,419,4.268,532,7.074,536,3.901,537,3.901,538,2.42,539,2.42,540,2.109,541,2.42,542,2.42,543,2.42,544,2.42,545,6.161,546,2.42,547,2.42,548,2.42,549,2.42,550,2.42,551,2.42,552,2.42,553,2.42,554,2.42]],["title/coding/leetcode/387.html",[3,0.329,113,3.262]],["text/coding/leetcode/387.html",[3,0.823,78,3.639,80,0.974,89,3.256,113,3.807,132,1.522,139,0.819,144,1.246,145,0.995,147,1.427,166,4.784,171,5.695,278,3.213,279,5.036,555,4.602,556,4.602]],["title/coding/leetcode/387.html#387",[3,0.329,113,3.262]],["text/coding/leetcode/387.html#387",[3,0.723]],["title/coding/leetcode/387.html#_1",[3,0.436]],["text/coding/leetcode/387.html#_1",[3,0.798,78,5.476,80,0.936,139,1.233,144,1.367,145,1.497,279,4.921,555,6.926]],["title/coding/leetcode/387.html#_2",[3,0.436]],["text/coding/leetcode/387.html#_2",[3,0.821,80,0.919,89,3.638,132,1.61,144,1.015,147,1.538,166,4.894,171,6.026,278,3.463,279,4.868,556,5.143]],["title/coding/leetcode/48.html",[3,0.329,94,2.994]],["text/coding/leetcode/48.html",[3,0.823,80,0.952,81,1.732,82,2.139,84,1.525,85,2.439,86,2.439,94,2.439,97,1.821,132,1.385,139,1.167,144,1.391,145,0.694,170,5.408,179,1.452,180,1.952,222,1.924,236,1.804,254,3.151,306,2.799,392,4.562,393,2.799,405,2.273,531,2.54,557,7.795,558,3.213,559,3.213,560,3.213,561,3.213,562,3.213,563,3.213,564,3.213,565,3.213,566,3.213,567,3.213,568,3.213,569,7.703,570,3.213]],["title/coding/leetcode/48.html#48",[3,0.329,94,2.994]],["text/coding/leetcode/48.html#48",[3,0.723]],["title/coding/leetcode/48.html#_1",[3,0.436]],["text/coding/leetcode/48.html#_1",[3,0.81,80,1.056,81,2.917,82,3.602,84,2.569,85,4.109,86,4.109,97,2.632,139,1.391,145,1.169,179,2.098,180,2.82,222,2.78,254,4.553,306,4.715,405,3.829,531,4.279,557,6.514,558,5.411,559,5.411,560,5.411,561,5.411,562,5.411,563,5.411,564,5.411,565,5.411,566,5.411,567,5.411,568,5.411]],["title/coding/leetcode/48.html#_2",[3,0.436]],["text/coding/leetcode/48.html#_2",[3,0.823,80,0.778,132,1.546,139,0.718,144,1.527,170,5.616,236,2.264,392,5.008,393,3.513,557,7.98,569,8.279,570,4.032]],["title/coding/leetcode/50.html",[95,2.318,96,2.504,97,1.185]],["text/coding/leetcode/50.html",[3,0.822,80,1.155,95,2.667,96,4.228,97,3.196,132,1.13,139,1.323,144,1.377,145,0.788,147,1.209,167,2.54,179,1.595,208,3.568,264,1.89,284,3.667,571,5.348,572,3.645,573,3.645,574,3.645,575,3.645,576,3.645,577,3.645,578,3.645,579,5.348,580,5.518,581,2.882,582,6.335,583,5.348,584,6.143]],["title/coding/leetcode/50.html#50-powx-n",[95,2.318,96,2.504,97,1.185]],["text/coding/leetcode/50.html#50-powx-n",[3,0.723]],["title/coding/leetcode/50.html#_1",[3,0.436]],["text/coding/leetcode/50.html#_1",[3,0.812,80,1.068,96,4.383,97,2.957,139,1.486,145,1.198,179,2.131,208,3.281,264,2.875,284,3.8,571,7.143,572,5.543,573,5.543,574,5.543,575,5.543,576,5.543,577,5.543,578,5.543,579,7.143,580,6.6]],["title/coding/leetcode/50.html#_2",[3,0.436]],["text/coding/leetcode/50.html#_2",[3,0.821,80,1.165,97,3.151,132,1.345,139,0.829,144,1.538,147,1.439,167,2.906,208,3.578,284,3.194,581,3.683,582,7.249,583,6.364,584,6.657]],["title/coding/leetcode/509.html",[3,0.329,585,3.652]],["text/coding/leetcode/509.html",[3,0.823,80,1.164,97,3.169,132,1.731,139,1.282,144,1.467,145,0.522,147,1.269,149,1.026,167,2.468,168,1.518,172,1.208,176,1.146,179,1.674,180,0.968,399,2.87,584,6.169,585,2.237,586,6.155,587,3.894,588,4.892,589,4.892,590,3.894,591,2.415,592,3.894,593,3.894,594,5.612,595,7.2,596,7.434,597,3.607,598,4.892]],["title/coding/leetcode/509.html#509",[3,0.329,585,3.652]],["text/coding/leetcode/509.html#509",[3,0.723]],["title/coding/leetcode/509.html#_1",[3,0.436]],["text/coding/leetcode/509.html#_1",[3,0.813,80,1.244,97,2.5,139,1.531,144,1.484,145,1.082,179,2.394,180,2.007,586,8.36,587,6.682,588,7.521,589,7.521,590,6.682,591,5.007,592,6.682,593,6.682]],["title/coding/leetcode/509.html#_2",[3,0.436]],["text/coding/leetcode/509.html#_2",[]],["title/coding/leetcode/509.html#_3",[3,0.436]],["text/coding/leetcode/509.html#_3",[3,0.823,80,1.063,97,3.234,132,1.803,139,0.907,144,1.428,147,1.379,149,1.451,168,1.987,172,1.707,176,1.621,584,6.749,594,6.762,595,8.081,596,8.261,597,3.163]],["title/coding/leetcode/509.html#_4",[3,0.436]],["text/coding/leetcode/509.html#_4",[3,0.814,80,0.8,97,3.049,132,1.722,144,1.168,147,1.338,167,3.533,399,4.78,597,5.481,598,8.149]],["title/coding/leetcode/66.html",[3,0.329,98,3.262]],["text/coding/leetcode/66.html",[3,0.824,80,1.109,84,1.708,98,2.977,132,1.733,139,0.641,144,1.459,145,0.778,146,2.33,147,1.198,148,2.213,149,2.252,150,2.33,151,2.33,152,2.111,153,2.021,164,3.258,167,3.206,168,2.065,214,2.33,531,2.845,599,3.598,600,3.135,601,3.598,602,3.598,603,3.598,604,3.598,605,3.598,606,5.298,607,7.996,608,6.288]],["title/coding/leetcode/66.html#66",[3,0.329,98,3.262]],["text/coding/leetcode/66.html#66",[3,0.723]],["title/coding/leetcode/66.html#_1",[3,0.436]],["text/coding/leetcode/66.html#_1",[3,0.81,80,0.893,139,1.176,144,1.303,145,1.427,531,5.222,599,6.604,600,5.754,601,6.604,602,6.604,603,6.604]],["title/coding/leetcode/66.html#_2",[3,0.436]],["text/coding/leetcode/66.html#_2",[3,0.823,80,1.119,84,1.914,132,1.788,144,1.444,146,2.61,147,1.301,148,2.479,149,2.445,150,2.61,151,2.61,152,2.365,153,2.264,164,3.538,167,3.319,168,2.243,214,2.61,604,4.032,605,4.032,606,5.753,607,8.279,608,6.708]],["title/coding/leetcode/7.html",[3,0.329,81,2.125]],["text/coding/leetcode/7.html",[3,0.821,80,1.069,81,2.304,87,3.024,132,1.267,139,0.761,144,1.561,145,0.924,147,0.966,167,3.17,179,1.275,208,3.181,241,3.536,264,3.592,284,4.748,391,3.379,580,5.937,581,3.379,600,5.224,609,5.996,610,4.741,611,8.592,612,4.274]],["title/coding/leetcode/7.html#7",[3,0.329,81,2.125]],["text/coding/leetcode/7.html#7",[3,0.723]],["title/coding/leetcode/7.html#_1",[3,0.436]],["text/coding/leetcode/7.html#_1",[3,0.809,80,1.126,87,4.392,139,1.105,144,1.225,145,1.342,179,1.852,241,5.136,284,5.26,580,6.878,600,6.685,609,7.673]],["title/coding/leetcode/7.html#_2",[3,0.436]],["text/coding/leetcode/7.html#_2",[3,0.819,80,0.919,132,1.437,144,1.601,147,1.163,167,3.382,208,3.5,264,3.953,284,3.526,391,4.066,581,4.066,610,5.378,611,8.973,612,5.143]],["title/coding/leetcode/70.html",[3,0.329,99,3.262]],["text/coding/leetcode/70.html",[3,0.823,80,1.206,97,3.311,99,2.877,132,1.716,139,1.526,144,0.686,145,0.752,147,1.394,149,1.478,168,2.014,172,1.739,176,2.452,179,1.839,584,6.679,613,6.822,614,3.478]],["title/coding/leetcode/70.html#70",[3,0.329,99,3.262]],["text/coding/leetcode/70.html#70",[3,0.723]],["title/coding/leetcode/70.html#_1",[3,0.436]],["text/coding/leetcode/70.html#_1",[3,0.817,80,1.264,97,2.673,139,1.64,145,1.198,179,2.358]],["title/coding/leetcode/70.html#_2",[3,0.436]],["text/coding/leetcode/70.html#_2",[3,0.821,80,1.025,97,3.391,132,1.826,139,1.084,144,0.863,147,1.585,149,1.858,168,2.375,172,2.186,176,2.892,584,7.028,613,7.583,614,4.372]],["title/coding/leetcode/779.html",[233,2.214,615,3.652]],["text/coding/leetcode/779.html",[3,0.821,80,1.234,97,3.279,132,1.514,139,1.276,144,1.563,145,0.833,147,1.26,180,1.545,222,1.524,233,4.973,264,1.999,521,3.358,615,3.57,616,4.853,617,3.854,618,3.854,619,3.854,620,3.854,621,5.57,622,6.541]],["title/coding/leetcode/779.html#779-k",[233,2.214,615,3.652]],["text/coding/leetcode/779.html#779-k",[3,0.723]],["title/coding/leetcode/779.html#_1",[3,0.436]],["text/coding/leetcode/779.html#_1",[3,0.817,80,1.23,97,3.275,139,1.33,144,1.643,145,1.068,180,1.981,222,1.953,233,4.994,264,2.563,521,4.305,616,5.771,617,4.942,618,4.942,619,4.942]],["title/coding/leetcode/779.html#_2",[3,0.436]],["text/coding/leetcode/779.html#_2",[3,0.816,80,1.199,97,3.135,132,1.77,139,0.996,144,1.105,147,1.625,233,4.458,620,5.598,621,7.188,622,7.94]],["title/coding/leetcode/8.html",[3,0.264,82,2.108,623,2.759]],["text/coding/leetcode/8.html",[3,0.825,80,0.89,82,1.842,84,2.54,132,0.917,139,0.493,144,1.534,145,0.598,147,1.21,161,5.204,166,4.502,167,2.927,179,1.294,180,1.11,222,1.094,264,1.435,278,2.209,284,2.975,341,3.78,580,5.976,581,2.188,610,4.791,623,3.78,624,4.958,625,5.613,626,6.582,627,4.339,628,4.339,629,2.768,630,2.411,631,4.339,632,2.768,633,2.768]],["title/coding/leetcode/8.html#8-atoi",[3,0.264,82,2.108,623,2.759]],["text/coding/leetcode/8.html#8-atoi",[3,0.723]],["title/coding/leetcode/8.html#_1",[3,0.436]],["text/coding/leetcode/8.html#_1",[3,0.822,80,1.088,139,0.8,144,1.225,145,0.971,179,1.852,180,1.801,222,1.776,284,4.256,580,6.878,581,3.553,623,3.915,624,4.162,625,5.751,626,8.053,627,6.208,628,6.208,629,4.493,630,3.915,631,6.208,632,4.493]],["title/coding/leetcode/8.html#_2",[3,0.436]],["text/coding/leetcode/8.html#_2",[3,0.824,84,3.105,132,1.177,144,1.612,147,1.479,161,6.01,166,4.818,167,3.275,264,1.999,278,2.836,341,4.853,610,5.666,624,5.16,625,5.16,633,3.854]],["title/coding/leetcode/88.html",[3,0.329,634,3.652]],["text/coding/leetcode/88.html",[3,0.822,80,0.935,97,2.759,132,1.73,144,1.236,145,0.773,154,2.199,168,1.394,175,2.315,179,1.573,206,2.827,207,5.059,208,3.762,209,3.115,214,2.315,236,2.008,293,5.056,490,6.9,492,6.611,500,3.115,501,3.115,634,3.312,635,3.576,636,3.576,637,3.576]],["title/coding/leetcode/88.html#88",[3,0.329,634,3.652]],["text/coding/leetcode/88.html#88",[3,0.723]],["title/coding/leetcode/88.html#_1",[3,0.436]],["text/coding/leetcode/88.html#_1",[3,0.814,97,3.035,145,1.266,179,2.207,293,5.56,490,7.095,492,6.947,635,5.857,636,5.857,637,5.857]],["title/coding/leetcode/88.html#_2",[3,0.436]],["text/coding/leetcode/88.html#_2",[3,0.82,80,1.022,97,2.267,132,1.822,144,1.378,154,2.668,168,1.691,175,2.809,206,3.431,207,5.261,208,3.961,209,3.78,214,2.809,236,2.436,293,4.154,490,6.513,492,5.976,500,3.78,501,3.78]],["title/coding/leetcode/9.html",[3,0.329,84,1.871]],["text/coding/leetcode/9.html",[3,0.822,80,0.63,84,2.211,132,0.984,139,0.829,144,1.431,145,1.007,147,1.439,179,1.39,190,2.733,194,3.691,197,2.329,208,3.867,252,6.445,264,4.04,285,3.683,540,5.545,610,3.683,616,4.059,638,7.791]],["title/coding/leetcode/9.html#9",[3,0.329,84,1.871]],["text/coding/leetcode/9.html#9",[3,0.723]],["title/coding/leetcode/9.html#_1",[3,0.436]],["text/coding/leetcode/9.html#_1",[3,0.816,80,0.839,139,1.105,145,1.342,179,1.852,194,3.906,197,3.104,252,7.196,264,3.22,616,5.409]],["title/coding/leetcode/9.html#_2",[3,0.436]],["text/coding/leetcode/9.html#_2",[3,0.815,132,1.206,144,1.582,147,1.646,190,3.349,194,2.907,208,4.094,264,4.157,285,4.515,540,6.343,610,4.515,638,8.441]],["title/coding/leetcode/98.html",[3,0.329,639,3.652]],["text/coding/leetcode/98.html",[3,0.822,80,0.747,116,3.567,132,0.953,139,0.803,145,0.629,147,1.612,149,1.236,158,3.892,166,3.842,167,2.496,168,1.134,173,1.994,176,2.955,179,1.346,180,1.809,182,1.706,183,2.3,184,2.3,185,2.058,186,5.327,187,3.857,188,3.093,189,3.003,190,1.706,194,2.297,196,6.077,197,3.112,222,1.783,230,3.302,254,1.883,397,5.316,398,4.573,399,3.652,639,2.694,640,2.909,641,6.225,642,2.909]],["title/coding/leetcode/98.html#98",[3,0.329,639,3.652]],["text/coding/leetcode/98.html#98",[3,0.723]],["title/coding/leetcode/98.html#_1",[3,0.436]],["text/coding/leetcode/98.html#_1",[3,0.815,80,1.12,139,1.357,145,1.327,179,2.274,180,3.056,194,3.126,197,3.07,222,3.013,254,3.976,640,6.141]],["title/coding/leetcode/98.html#_2",[3,0.436]],["text/coding/leetcode/98.html#_2",[3,0.821,116,3.933,132,1.051,147,1.695,149,1.405,158,4.007,166,4.04,167,2.667,168,1.289,173,2.266,176,3.158,182,1.939,183,2.614,184,2.614,185,2.339,186,5.641,187,4.034,188,3.41,189,3.311,190,1.939,194,1.683,196,6.328,197,2.99,230,3.641,397,5.485,398,4.782,399,3.902,641,6.653,642,3.306]],["title/coding/python/killable-thread.html",[3,0.436]],["text/coding/python/killable-thread.html",[3,0.82,35,2.998,49,4.465,53,1.642,61,4.465,75,1.718,79,1.576,80,0.596,127,4.465,138,1.718,139,0.37,144,0.679,147,1.467,160,1.423,197,1.038,643,5.682,644,4.406,645,8.55,646,6.486,647,2.998,648,3.441,649,7.04,650,5.125,651,8.996,652,5.125,653,3.441,654,2.076,655,1.576,656,5.125,657,6.125,658,2.076,659,3.441,660,5.125,661,3.441,662,2.613,663,3.441,664,6.125,665,5.125,666,5.125,667,3.441,668,3.441,669,6.486,670,4.406,671,3.441,672,5.125,673,2.076,674,2.076,675,2.076,676,2.076,677,2.076,678,2.076,679,4.406,680,3.441,681,3.441,682,3.441,683,5.125,684,3.441,685,2.998,686,3.441,687,2.076,688,3.441,689,2.076,690,3.441,691,2.076,692,4.406,693,4.406,694,2.076,695,2.076,696,2.721,697,2.076,698,2.076,699,2.076]],["title/coding/python/killable-thread.html#python",[79,3.964]],["text/coding/python/killable-thread.html#python",[3,0.82,35,3.007,49,4.475,53,1.648,61,4.475,75,1.724,80,0.597,127,4.475,138,1.724,139,0.371,144,0.681,147,1.469,160,1.429,197,1.042,643,5.693,644,4.418,645,8.556,646,6.497,647,3.007,648,3.451,649,7.05,650,5.137,651,9,652,5.137,653,3.451,654,2.084,655,1.582,656,5.137,657,6.136,658,2.084,659,3.451,660,5.137,661,3.451,662,2.621,663,3.451,664,6.136,665,5.137,666,5.137,667,3.451,668,3.451,669,6.497,670,4.418,671,3.451,672,5.137,673,2.084,674,2.084,675,2.084,676,2.084,677,2.084,678,2.084,679,4.418,680,3.451,681,3.451,682,3.451,683,5.137,684,3.451,685,3.007,686,3.451,687,2.084,688,3.451,689,2.084,690,3.451,691,2.084,692,4.418,693,4.418,694,2.084,695,2.084,696,2.729,697,2.084,698,2.084,699,2.084]],["title/latex/index.html",[3,0.436]],["text/latex/index.html",[3,0.619,700,6.072]],["title/latex/index.html#latex",[700,3.38]],["text/latex/index.html#latex",[700,5.998]],["title/latex/cheatsheet.html",[3,0.436]],["text/latex/cheatsheet.html",[3,0.783,60,3.238,97,1.39,126,2.548,156,3.42,174,2.72,175,2.406,208,1.707,233,2.087,275,3.238,280,2.72,293,2.548,462,3.238,520,3.238,647,3.238,685,3.238,696,2.938,700,2.406,701,4.411,702,4.411,703,3.716,704,3.716,705,3.716,706,3.716,707,3.716,708,3.716,709,1.644,710,1.644,711,1.644,712,1.644,713,1.644,714,1.644,715,1.644,716,1.644,717,1.644,718,2.826,719,1.644,720,3.238,721,3.716,722,5.425,723,3.716,724,4.726,725,3.716,726,2.826,727,1.644,728,3.716,729,3.716,730,3.716,731,5.425,732,3.716,733,3.716,734,3.716,735,3.716,736,4.119,737,3.716,738,3.238,739,3.716,740,5.425,741,3.716,742,5.425,743,5.425,744,4.411,745,1.644,746,3.074,747,3.716,748,5.425,749,4.411,750,1.644,751,3.716,752,5.425,753,3.716,754,5.425,755,4.411,756,1.644,757,3.716,758,5.425,759,3.716,760,5.425,761,3.716,762,3.716,763,3.716,764,3.716,765,3.716,766,3.716,767,4.411,768,4.411,769,2.826,770,2.826,771,4.411,772,4.411,773,2.826,774,2.826,775,2.826,776,2.826,777,2.826,778,3.716,779,3.716,780,3.238,781,3.716,782,3.716,783,3.716,784,3.716,785,3.716,786,3.716,787,3.716,788,3.716,789,3.716,790,3.716,791,3.716,792,3.716,793,3.716,794,3.716,795,2.826,796,2.826,797,1.644,798,2.826,799,5.425,800,1.644,801,2.826,802,1.644,803,3.716,804,3.716,805,7.044,806,3.716,807,3.716,808,3.716,809,3.716,810,3.716,811,3.716,812,3.716,813,3.716,814,3.716,815,3.716,816,3.716,817,3.716,818,3.716,819,3.716,820,3.716,821,3.716,822,3.716,823,3.716,824,3.716,825,3.716,826,3.716,827,3.716,828,3.716,829,3.716,830,3.716,831,3.716,832,3.716,833,3.716,834,3.716,835,3.716,836,3.716]],["title/latex/cheatsheet.html#latex",[3,0.329,700,2.552]],["text/latex/cheatsheet.html#latex",[3,0.718,700,5.567]],["title/latex/cheatsheet.html#_1",[3,0.436]],["text/latex/cheatsheet.html#_1",[3,0.809,701,8.302,702,8.302,703,7.849,704,7.849,705,7.849,706,7.849,707,7.849,708,7.849,709,5.463,710,5.463,711,5.463,712,5.463,713,5.463,714,5.463,715,5.463,716,5.463,717,5.463,718,7.077,719,5.463]],["title/latex/cheatsheet.html#_2",[3,0.436]],["text/latex/cheatsheet.html#_2",[3,0.629,60,5.256,97,2.257,126,4.136,156,3.804,208,2.771,233,3.387,275,5.256,280,4.415,293,4.136,696,4.77,720,5.256,721,6.033,722,7.537,723,6.033,724,6.567,725,6.033,726,5.029,727,3.355,728,6.033,729,6.033,730,6.033,731,7.537,732,6.033,733,6.033,734,6.033,735,6.033,736,5.723,737,6.033,738,5.256,739,6.033,740,7.537,741,6.033,742,7.537,743,7.537,744,6.702,745,3.355,746,4.991,747,6.033,748,7.537,749,6.702,750,3.355,751,6.033,752,7.537,753,6.033,754,7.537,755,6.702,756,3.355,757,6.033,758,7.537,759,6.033,760,7.537,761,6.033]],["title/latex/cheatsheet.html#_3",[3,0.436]],["text/latex/cheatsheet.html#_3",[3,0.64]],["title/latex/cheatsheet.html#_4",[3,0.436]],["text/latex/cheatsheet.html#_4",[3,0.684,647,7.607,762,8.732,763,8.732,764,8.732,765,8.732]],["title/latex/cheatsheet.html#_5",[3,0.436]],["text/latex/cheatsheet.html#_5",[3,0.63,766,8.227,767,8.616,768,8.616,769,7.546,770,7.546,771,8.616,772,8.616,773,7.546,774,7.546,775,7.546,776,7.546,777,7.546,778,8.227,779,8.227]],["title/latex/cheatsheet.html#_6",[3,0.436]],["text/latex/cheatsheet.html#_6",[3,0.636,462,7.22,520,7.22,780,7.22,781,8.287,782,8.287,783,8.287,784,8.287,785,8.287,786,8.287,787,8.287,788,8.287,789,8.287]],["title/latex/cheatsheet.html#_7",[3,0.436]],["text/latex/cheatsheet.html#_7",[3,0.684,790,8.732,791,8.732,792,8.732,793,8.732,794,8.732]],["title/latex/cheatsheet.html#_8",[3,0.436]],["text/latex/cheatsheet.html#_8",[3,0.494,156,4.323,174,5.018,175,4.439,685,5.973,795,5.918,796,5.918,797,4.195,798,5.918,799,8.149,800,4.195,801,5.918,802,4.195,803,6.856,804,6.856,805,8.997,806,6.856,807,6.856,808,6.856,809,6.856,810,6.856,811,6.856,812,6.856,813,6.856,814,6.856,815,6.856,816,6.856,817,6.856,818,6.856,819,6.856,820,6.856,821,6.856,822,6.856,823,6.856,824,6.856,825,6.856,826,6.856,827,6.856,828,6.856,829,6.856,830,6.856]],["title/latex/cheatsheet.html#_9",[3,0.436]],["text/latex/cheatsheet.html#_9",[3,0.798,831,8.472,832,8.472,833,8.472,834,8.472,835,8.472,836,8.472]],["title/latex/environ.html",[700,3.38]],["text/latex/environ.html",[3,0.814,80,0.622,139,0.819,156,2.902,179,1.373,291,3.063,655,5.47,662,7.376,700,4.086,837,7.733,838,4.602,839,5.959,840,4.602,841,4.602]],["title/latex/environ.html#latex",[700,3.38]],["text/latex/environ.html#latex",[]],["title/latex/environ.html#_1",[3,0.436]],["text/latex/environ.html#_1",[3,0.778,662,6.385,700,4.683,837,6.302,838,7.234]],["title/latex/environ.html#enumerate",[837,4.548]],["text/latex/environ.html#enumerate",[3,0.803,80,0.764,139,1.006,156,3.565,179,1.686,291,3.763,655,5.493,662,7.309,837,7.875,839,5.984,840,5.653,841,5.653]],["title/latex/environ.html#itemize",[662,3.964]],["text/latex/environ.html#itemize",[3,0.796,655,4.986,662,7.347,839,5.432]],["title/latex/slides.html",[3,0.436]],["text/latex/slides.html",[3,0.818,655,4.47,700,3.811,839,4.87,842,7.423,843,7.423,844,8.129,845,5.887,846,5.887,847,5.887,848,5.887,849,5.887,850,5.887,851,5.887,852,5.887]],["title/latex/slides.html#latex",[700,3.38]],["text/latex/slides.html#latex",[3,0.817,655,4.517,839,4.921,842,7.471,843,7.471,844,8.168,845,5.949,846,5.949,847,5.949,848,5.949,849,5.949,850,5.949,851,5.949,852,5.949]],["title/math/index.html",[3,0.436]],["text/math/index.html",[3,0.804]],["title/math/index.html#_1",[3,0.436]],["text/math/index.html#_1",[3,0.797]],["title/math/queue-theory/index.html",[3,0.436]],["text/math/queue-theory/index.html",[3,0.737,80,0.877,81,3.499,82,4.321,84,3.081,139,1.155,140,4.751,179,1.936,180,2.603,222,2.566,254,4.202,264,3.366,405,4.593,853,8.896]],["title/math/queue-theory/index.html#_1",[3,0.436]],["text/math/queue-theory/index.html#_1",[3,0.663,80,0.888,81,3.539,82,4.371,84,3.117,139,1.169,140,4.806,179,1.959,180,2.633,222,2.596,254,4.251,264,3.405,405,4.646,853,8.908]],["title/math/queue-theory/chapter-12.html",[405,2.789,853,3.652]],["text/math/queue-theory/chapter-12.html",[3,0.814,80,0.883,97,2.583,126,5.373,139,0.259,144,1.289,156,1.601,170,2.079,188,0.996,189,3.064,207,0.852,208,1.166,233,2.438,279,3.789,280,1.064,290,2.008,291,1.69,292,1.202,293,0.996,334,1.266,415,1.266,630,1.266,696,1.149,720,1.266,724,4.744,736,4.385,738,1.266,746,2.797,780,1.266,854,2.539,855,1.453,856,5.711,857,1.453,858,1.453,859,5.711,860,2.797,861,1.453,862,1.453,863,2.539,864,2.601,865,1.453,866,1.453,867,1.453,868,1.453,869,0.783,870,0.783,871,0.783,872,0.783,873,1.453,874,1.453,875,1.453,876,4.744,877,1.453,878,1.453,879,1.453,880,1.453,881,1.453,882,2.352,883,1.453,884,1.453,885,1.453,886,3.827,887,2.539,888,1.453,889,1.453,890,3.254,891,1.453,892,1.453,893,1.453,894,2.539,895,1.453,896,1.453,897,1.453,898,3.381,899,1.453,900,2.539,901,1.453,902,1.453,903,2.539,904,1.453,905,1.453,906,1.453,907,2.539,908,1.453,909,1.453,910,1.453,911,1.453,912,1.453,913,1.453,914,2.539,915,1.453,916,1.453,917,1.453,918,1.453,919,1.453,920,1.453,921,3.381,922,1.453,923,1.453,924,1.453,925,1.453,926,3.381,927,3.381,928,2.539,929,1.453,930,2.539,931,2.539,932,1.453,933,1.453,934,1.453,935,3.381,936,1.453,937,1.453,938,1.453,939,2.539,940,1.453,941,1.453,942,1.453,943,1.453,944,1.453,945,4.01,946,1.453,947,1.453,948,1.453,949,1.453,950,1.453,951,1.453,952,1.453,953,1.453,954,1.453,955,1.453,956,1.453,957,1.453,958,1.453,959,1.453,960,2.352,961,1.453,962,1.453,963,2.765,964,1.453,965,1.453,966,1.453,967,1.453,968,1.453,969,1.453,970,1.453,971,2.539,972,2.539,973,2.539,974,1.453,975,1.453,976,1.453,977,2.539,978,1.453,979,1.453,980,1.453,981,1.453,982,3.381,983,1.453,984,3.381,985,1.453,986,2.539,987,1.453,988,7.989,989,6.532,990,1.453,991,1.453,992,2.539,993,1.453,994,1.453,995,1.453,996,3.381,997,1.453,998,1.453,999,2.539,1000,1.453,1001,2.539,1002,1.453,1003,3.381,1004,2.539,1005,1.453,1006,4.053,1007,2.539,1008,1.453,1009,1.453,1010,1.453,1011,1.453,1012,1.453,1013,1.453,1014,1.453,1015,1.453,1016,1.453,1017,1.453,1018,1.453,1019,1.453,1020,1.453,1021,1.453,1022,1.453,1023,1.453,1024,1.453,1025,3.381,1026,4.053,1027,1.453,1028,2.539,1029,1.453,1030,1.453,1031,2.539,1032,1.453,1033,1.453,1034,1.453,1035,1.453,1036,1.453,1037,1.453,1038,1.453,1039,1.453,1040,1.453,1041,1.453,1042,1.453,1043,1.453,1044,1.453,1045,1.453,1046,1.453,1047,1.453,1048,1.453,1049,2.539,1050,1.453,1051,1.453,1052,1.453,1053,2.539,1054,2.539,1055,1.453,1056,2.539,1057,1.453,1058,1.453,1059,1.453,1060,1.453]],["title/math/queue-theory/chapter-12.html#_1",[3,0.436]],["text/math/queue-theory/chapter-12.html#_1",[3,0.773]],["title/math/queue-theory/chapter-12.html#_2",[3,0.436]],["text/math/queue-theory/chapter-12.html#_2",[]],["title/math/queue-theory/chapter-12.html#_3",[3,0.436]],["text/math/queue-theory/chapter-12.html#_3",[3,0.813,80,1.068,126,5.923,144,1.776,189,5.261,233,4.438,696,4.383,720,4.829,736,6.339,854,7.143,855,5.543,856,6.538,857,5.543,858,5.543,859,6.538,860,4.586,861,5.543,862,5.543,863,7.143,864,5.677,865,5.543,866,5.543,867,5.543,868,5.543]],["title/math/queue-theory/chapter-12.html#_4",[3,0.436]],["text/math/queue-theory/chapter-12.html#_4",[3,0.806,233,3.912,864,6.071,869,6.968,870,6.968,871,6.968]],["title/math/queue-theory/chapter-12.html#_5",[3,0.436]],["text/math/queue-theory/chapter-12.html#_5",[3,0.801,144,1.397,156,5.235,207,4.151,208,3.813,233,3.973,280,5.179,291,5.526,292,5.854,293,4.852,860,4.52,864,4.76,872,5.463,873,7.077,874,7.077,875,7.077,876,7.919,877,7.077]],["title/math/queue-theory/chapter-12.html#_6",[3,0.436]],["text/math/queue-theory/chapter-12.html#_6",[3,0.806,97,3.062,279,4.145,290,5.459,630,6.016,736,5.243,738,6.016,746,5.712,856,5.712,859,5.712,878,6.905,879,6.905,880,6.905,881,6.905,882,6.396,883,6.905,884,6.905,885,6.905,886,5.459,887,8.183,888,6.905,889,6.905]],["title/math/queue-theory/chapter-12.html#_7",[3,0.436]],["text/math/queue-theory/chapter-12.html#_7",[3,0.779,860,6.982,890,7.354]],["title/math/queue-theory/chapter-12.html#markov",[3,0.329,890,3.435]],["text/math/queue-theory/chapter-12.html#markov",[3,0.793,886,6.458,890,7.848,891,8.168,892,8.168]],["title/math/queue-theory/chapter-12.html#_8",[3,0.436]],["text/math/queue-theory/chapter-12.html#_8",[3,0.752,886,6.774]],["title/math/queue-theory/chapter-12.html#poisson",[3,0.329,860,3.262]],["text/math/queue-theory/chapter-12.html#poisson",[3,0.64]],["title/math/queue-theory/chapter-12.html#_9",[3,0.436]],["text/math/queue-theory/chapter-12.html#_9",[3,0.807,80,1.106,97,2.882,126,6.181,144,1.233,170,3.842,334,3.101,724,6.942,736,2.703,856,5.169,859,5.169,876,3.101,882,3.297,893,3.559,894,5.256,895,3.559,896,3.559,897,3.559,898,6.248,899,3.559,900,5.256,901,3.559,902,3.559,903,5.256,904,3.559,905,3.559,906,3.559,907,5.256,908,3.559,909,3.559,910,3.559,911,3.559,912,3.559,913,3.559,914,5.256,915,3.559,916,3.559,917,3.559,918,3.559,919,3.559,920,3.559,921,6.248,922,3.559,923,3.559,924,3.559,925,3.559,926,6.248,927,6.248,928,5.256,929,3.559,930,5.256,931,5.256,932,3.559,933,3.559,934,3.559,935,6.248,936,3.559,937,3.559,938,3.559,939,5.256,940,3.559,941,3.559,942,3.559,943,3.559,944,3.559,945,4.579,946,3.559,947,3.559,948,3.559,949,3.559,950,3.559,951,3.559,952,3.559,953,3.559,954,3.559,955,3.559,956,3.559,957,3.559,958,3.559,959,3.559,960,3.297,961,3.559,962,3.559]],["title/math/queue-theory/chapter-12.html#mm1",[963,4.836]],["text/math/queue-theory/chapter-12.html#mm1",[3,0.785,746,7.21,945,6.707,960,7.131,963,8.073,964,7.699,965,7.699,966,7.699,967,7.699,968,7.699,969,7.699,970,7.699]],["title/math/queue-theory/chapter-12.html#mms",[886,4.128]],["text/math/queue-theory/chapter-12.html#mms",[3,0.81,97,2.508,139,0.512,188,1.972,189,2.976,279,4.721,290,2.274,415,2.506,736,3.395,780,2.506,856,5.87,859,5.87,876,3.895,886,3.535,945,3.895,971,4.471,972,4.471,973,4.471,974,2.876,975,2.876,976,2.876,977,4.471,978,2.876,979,2.876,980,2.876,981,2.876,982,5.486,983,2.876,984,5.486,985,2.876,986,4.471,987,2.876,988,9.06,989,8.187,990,2.876,991,2.876,992,4.471,993,2.876,994,2.876,995,2.876,996,5.486,997,2.876,998,2.876,999,4.471,1000,2.876,1001,4.471,1002,2.876,1003,5.486,1004,4.471,1005,2.876,1006,6.187,1007,4.471,1008,2.876,1009,2.876,1010,2.876,1011,2.876,1012,2.876,1013,2.876,1014,2.876,1015,2.876,1016,2.876,1017,2.876,1018,2.876,1019,2.876,1020,2.876,1021,2.876,1022,2.876,1023,2.876,1024,2.876,1025,5.486,1026,6.187,1027,2.876,1028,4.471,1029,2.876,1030,2.876,1031,4.471,1032,2.876,1033,2.876,1034,2.876,1035,2.876,1036,2.876,1037,2.876,1038,2.876,1039,2.876,1040,2.876,1041,2.876,1042,2.876,1043,2.876,1044,2.876,1045,2.876,1046,2.876,1047,2.876,1048,2.876,1049,4.471,1050,2.876,1051,2.876,1052,2.876,1053,4.471,1054,4.471,1055,2.876,1056,4.471,1057,2.876,1058,2.876,1059,2.876,1060,2.876]]],"fields":["title","text"],"invertedIndex":[["",{"_index":3,"text":{"about.html":{},"coding/dsa.html":{},"coding/dsa.html#_1":{},"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_1":{},"coding/dsa/vector-and-list.html#_2":{},"coding/dsa/vector-and-list.html#_3":{},"coding/index.html":{},"coding/index.html#_1":{},"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/1.html":{},"coding/leetcode/1.html#1":{},"coding/leetcode/1.html#_1":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/101.html":{},"coding/leetcode/101.html#101":{},"coding/leetcode/101.html#_1":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#102":{},"coding/leetcode/102.html#_1":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#118":{},"coding/leetcode/118.html#_1":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#119-ii":{},"coding/leetcode/119.html#_1":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#120":{},"coding/leetcode/120.html#_1":{},"coding/leetcode/120.html#_2":{},"coding/leetcode/121.html":{},"coding/leetcode/121.html#121":{},"coding/leetcode/121.html#_1":{},"coding/leetcode/121.html#_2":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#122-ii":{},"coding/leetcode/122.html#_1":{},"coding/leetcode/122.html#_2":{},"coding/leetcode/125.html":{},"coding/leetcode/125.html#125":{},"coding/leetcode/125.html#_1":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#13":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/136.html":{},"coding/leetcode/136.html#136":{},"coding/leetcode/136.html#_1":{},"coding/leetcode/136.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#14":{},"coding/leetcode/14.html#_1":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#155":{},"coding/leetcode/155.html#_1":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#189":{},"coding/leetcode/189.html#_1":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#19-n":{},"coding/leetcode/19.html#_1":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#198":{},"coding/leetcode/198.html#_1":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#204":{},"coding/leetcode/204.html#_1":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#206":{},"coding/leetcode/206.html#_1":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#21":{},"coding/leetcode/21.html#_1":{},"coding/leetcode/21.html#_2":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#217":{},"coding/leetcode/217.html#_1":{},"coding/leetcode/217.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#234":{},"coding/leetcode/234.html#_1":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#237":{},"coding/leetcode/237.html#_1":{},"coding/leetcode/237.html#_2":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#24":{},"coding/leetcode/24.html#_1":{},"coding/leetcode/24.html#_2":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#242":{},"coding/leetcode/242.html#_1":{},"coding/leetcode/242.html#_2":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#26":{},"coding/leetcode/26.html#_1":{},"coding/leetcode/26.html#_2":{},"coding/leetcode/28.html":{},"coding/leetcode/28.html#28-strstr":{},"coding/leetcode/28.html#_1":{},"coding/leetcode/28.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#315":{},"coding/leetcode/315.html#_1":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/344.html":{},"coding/leetcode/344.html#344":{},"coding/leetcode/344.html#_1":{},"coding/leetcode/344.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#350-ii":{},"coding/leetcode/350.html#_1":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#36":{},"coding/leetcode/36.html#_1":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#38":{},"coding/leetcode/38.html#_1":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#384":{},"coding/leetcode/384.html#_1":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/387.html":{},"coding/leetcode/387.html#387":{},"coding/leetcode/387.html#_1":{},"coding/leetcode/387.html#_2":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#48":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/48.html#_2":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#50-powx-n":{},"coding/leetcode/50.html#_1":{},"coding/leetcode/50.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#509":{},"coding/leetcode/509.html#_1":{},"coding/leetcode/509.html#_3":{},"coding/leetcode/509.html#_4":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#66":{},"coding/leetcode/66.html#_1":{},"coding/leetcode/66.html#_2":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#7":{},"coding/leetcode/7.html#_1":{},"coding/leetcode/7.html#_2":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#70":{},"coding/leetcode/70.html#_1":{},"coding/leetcode/70.html#_2":{},"coding/leetcode/779.html":{},"coding/leetcode/779.html#779-k":{},"coding/leetcode/779.html#_1":{},"coding/leetcode/779.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#8-atoi":{},"coding/leetcode/8.html#_1":{},"coding/leetcode/8.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#88":{},"coding/leetcode/88.html#_1":{},"coding/leetcode/88.html#_2":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#9":{},"coding/leetcode/9.html#_1":{},"coding/leetcode/9.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#98":{},"coding/leetcode/98.html#_1":{},"coding/leetcode/98.html#_2":{},"coding/python.html":{},"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{},"index.html":{},"index.html#customization":{},"index.html#project-layout":{},"index.html#welcome-to-mkdocs":{},"latex/cheatsheet.html":{},"latex/cheatsheet.html#_1":{},"latex/cheatsheet.html#_2":{},"latex/cheatsheet.html#_3":{},"latex/cheatsheet.html#_4":{},"latex/cheatsheet.html#_5":{},"latex/cheatsheet.html#_6":{},"latex/cheatsheet.html#_7":{},"latex/cheatsheet.html#_8":{},"latex/cheatsheet.html#_9":{},"latex/cheatsheet.html#latex":{},"latex/environ.html":{},"latex/environ.html#_1":{},"latex/environ.html#enumerate":{},"latex/environ.html#itemize":{},"latex/index.html":{},"latex/slides.html":{},"latex/slides.html#latex":{},"math/index.html":{},"math/index.html#_1":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_1":{},"math/queue-theory/chapter-12.html#_3":{},"math/queue-theory/chapter-12.html#_4":{},"math/queue-theory/chapter-12.html#_5":{},"math/queue-theory/chapter-12.html#_6":{},"math/queue-theory/chapter-12.html#_7":{},"math/queue-theory/chapter-12.html#_8":{},"math/queue-theory/chapter-12.html#_9":{},"math/queue-theory/chapter-12.html#markov":{},"math/queue-theory/chapter-12.html#mm1":{},"math/queue-theory/chapter-12.html#mms":{},"math/queue-theory/chapter-12.html#poisson":{},"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{},"weixin-2020.html":{},"weixin-2020.html#_1":{}},"title":{"coding/dsa.html":{},"coding/dsa.html#_1":{},"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_1":{},"coding/dsa/vector-and-list.html#_2":{},"coding/dsa/vector-and-list.html#_3":{},"coding/index.html":{},"coding/index.html#_1":{},"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/1.html":{},"coding/leetcode/1.html#1":{},"coding/leetcode/1.html#_1":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/101.html":{},"coding/leetcode/101.html#101":{},"coding/leetcode/101.html#_1":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#102":{},"coding/leetcode/102.html#_1":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#118":{},"coding/leetcode/118.html#_1":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#119-ii":{},"coding/leetcode/119.html#_1":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#120":{},"coding/leetcode/120.html#_1":{},"coding/leetcode/120.html#_2":{},"coding/leetcode/121.html":{},"coding/leetcode/121.html#121":{},"coding/leetcode/121.html#_1":{},"coding/leetcode/121.html#_2":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#122-ii":{},"coding/leetcode/122.html#_1":{},"coding/leetcode/122.html#_2":{},"coding/leetcode/125.html":{},"coding/leetcode/125.html#125":{},"coding/leetcode/125.html#_1":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#13":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/136.html":{},"coding/leetcode/136.html#136":{},"coding/leetcode/136.html#_1":{},"coding/leetcode/136.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#14":{},"coding/leetcode/14.html#_1":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#155":{},"coding/leetcode/155.html#_1":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#189":{},"coding/leetcode/189.html#_1":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/19.html#_1":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#198":{},"coding/leetcode/198.html#_1":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#204":{},"coding/leetcode/204.html#_1":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#206":{},"coding/leetcode/206.html#_1":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#21":{},"coding/leetcode/21.html#_1":{},"coding/leetcode/21.html#_2":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#217":{},"coding/leetcode/217.html#_1":{},"coding/leetcode/217.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#234":{},"coding/leetcode/234.html#_1":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#237":{},"coding/leetcode/237.html#_1":{},"coding/leetcode/237.html#_2":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#24":{},"coding/leetcode/24.html#_1":{},"coding/leetcode/24.html#_2":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#242":{},"coding/leetcode/242.html#_1":{},"coding/leetcode/242.html#_2":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#26":{},"coding/leetcode/26.html#_1":{},"coding/leetcode/26.html#_2":{},"coding/leetcode/28.html":{},"coding/leetcode/28.html#28-strstr":{},"coding/leetcode/28.html#_1":{},"coding/leetcode/28.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#315":{},"coding/leetcode/315.html#_1":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/344.html":{},"coding/leetcode/344.html#344":{},"coding/leetcode/344.html#_1":{},"coding/leetcode/344.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#350-ii":{},"coding/leetcode/350.html#_1":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#36":{},"coding/leetcode/36.html#_1":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#38":{},"coding/leetcode/38.html#_1":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#384":{},"coding/leetcode/384.html#_1":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/387.html":{},"coding/leetcode/387.html#387":{},"coding/leetcode/387.html#_1":{},"coding/leetcode/387.html#_2":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#48":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/48.html#_2":{},"coding/leetcode/50.html#_1":{},"coding/leetcode/50.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#509":{},"coding/leetcode/509.html#_1":{},"coding/leetcode/509.html#_2":{},"coding/leetcode/509.html#_3":{},"coding/leetcode/509.html#_4":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#66":{},"coding/leetcode/66.html#_1":{},"coding/leetcode/66.html#_2":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#7":{},"coding/leetcode/7.html#_1":{},"coding/leetcode/7.html#_2":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#70":{},"coding/leetcode/70.html#_1":{},"coding/leetcode/70.html#_2":{},"coding/leetcode/779.html#_1":{},"coding/leetcode/779.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#8-atoi":{},"coding/leetcode/8.html#_1":{},"coding/leetcode/8.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#88":{},"coding/leetcode/88.html#_1":{},"coding/leetcode/88.html#_2":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#9":{},"coding/leetcode/9.html#_1":{},"coding/leetcode/9.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#98":{},"coding/leetcode/98.html#_1":{},"coding/leetcode/98.html#_2":{},"coding/python.html":{},"coding/python.html#_1":{},"coding/python/killable-thread.html":{},"latex/cheatsheet.html":{},"latex/cheatsheet.html#_1":{},"latex/cheatsheet.html#_2":{},"latex/cheatsheet.html#_3":{},"latex/cheatsheet.html#_4":{},"latex/cheatsheet.html#_5":{},"latex/cheatsheet.html#_6":{},"latex/cheatsheet.html#_7":{},"latex/cheatsheet.html#_8":{},"latex/cheatsheet.html#_9":{},"latex/cheatsheet.html#latex":{},"latex/environ.html#_1":{},"latex/index.html":{},"latex/slides.html":{},"math/index.html":{},"math/index.html#_1":{},"math/queue-theory/chapter-12.html#_1":{},"math/queue-theory/chapter-12.html#_2":{},"math/queue-theory/chapter-12.html#_3":{},"math/queue-theory/chapter-12.html#_4":{},"math/queue-theory/chapter-12.html#_5":{},"math/queue-theory/chapter-12.html#_6":{},"math/queue-theory/chapter-12.html#_7":{},"math/queue-theory/chapter-12.html#_8":{},"math/queue-theory/chapter-12.html#_9":{},"math/queue-theory/chapter-12.html#markov":{},"math/queue-theory/chapter-12.html#poisson":{},"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{},"weixin-2020.html#_1":{}}}],["0",{"_index":144,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_1":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_2":{},"coding/leetcode/121.html":{},"coding/leetcode/121.html#_1":{},"coding/leetcode/121.html#_2":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{},"coding/leetcode/122.html#_2":{},"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/136.html":{},"coding/leetcode/136.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_2":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{},"coding/leetcode/26.html#_2":{},"coding/leetcode/28.html":{},"coding/leetcode/28.html#_1":{},"coding/leetcode/28.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/344.html":{},"coding/leetcode/344.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/387.html":{},"coding/leetcode/387.html#_1":{},"coding/leetcode/387.html#_2":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_2":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{},"coding/leetcode/509.html#_3":{},"coding/leetcode/509.html#_4":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_1":{},"coding/leetcode/66.html#_2":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_1":{},"coding/leetcode/7.html#_2":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#_2":{},"coding/leetcode/779.html":{},"coding/leetcode/779.html#_1":{},"coding/leetcode/779.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{},"coding/leetcode/8.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_2":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_2":{},"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{},"math/queue-theory/chapter-12.html#_5":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["0,0,1,1,1,2,2,3,3,4",{"_index":453,"text":{"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{}},"title":{}}],["0.25",{"_index":578,"text":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{}},"title":{}}],["0.25000",{"_index":575,"text":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{}},"title":{}}],["01",{"_index":616,"text":{"coding/leetcode/779.html":{},"coding/leetcode/779.html#_1":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_1":{}},"title":{}}],["0110",{"_index":617,"text":{"coding/leetcode/779.html":{},"coding/leetcode/779.html#_1":{}},"title":{}}],["01101001",{"_index":618,"text":{"coding/leetcode/779.html":{},"coding/leetcode/779.html#_1":{}},"title":{}}],["0\\leq",{"_index":592,"text":{"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{}},"title":{}}],["0\\sim\\infti",{"_index":959,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["0x51",{"_index":424,"text":{"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{}},"title":{}}],["0x55",{"_index":421,"text":{"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{}},"title":{}}],["1",{"_index":80,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/1.html":{},"coding/leetcode/1.html#_1":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/101.html":{},"coding/leetcode/101.html#_1":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_1":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_1":{},"coding/leetcode/120.html#_2":{},"coding/leetcode/121.html":{},"coding/leetcode/121.html#_1":{},"coding/leetcode/121.html#_2":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{},"coding/leetcode/122.html#_2":{},"coding/leetcode/125.html":{},"coding/leetcode/125.html#_1":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/136.html":{},"coding/leetcode/136.html#_1":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_1":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_1":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_1":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_1":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_1":{},"coding/leetcode/217.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_1":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#_1":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_1":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_1":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{},"coding/leetcode/26.html#_2":{},"coding/leetcode/28.html":{},"coding/leetcode/28.html#_1":{},"coding/leetcode/28.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/344.html":{},"coding/leetcode/344.html#_1":{},"coding/leetcode/344.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_1":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_1":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_1":{},"coding/leetcode/387.html":{},"coding/leetcode/387.html#_1":{},"coding/leetcode/387.html#_2":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/48.html#_2":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{},"coding/leetcode/50.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{},"coding/leetcode/509.html#_3":{},"coding/leetcode/509.html#_4":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_1":{},"coding/leetcode/66.html#_2":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_1":{},"coding/leetcode/7.html#_2":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#_1":{},"coding/leetcode/70.html#_2":{},"coding/leetcode/779.html":{},"coding/leetcode/779.html#_1":{},"coding/leetcode/779.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_2":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_1":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_1":{},"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{},"latex/environ.html":{},"latex/environ.html#enumerate":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{},"math/queue-theory/chapter-12.html#_9":{},"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{}},"title":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#1":{}}}],["1)!(",{"_index":988,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["1)!\\left(t+\\frac{\\rho_0^s}{(",{"_index":1048,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["1)!}\\sum_{i=1}^\\infti",{"_index":1030,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["1)!}p_0",{"_index":1028,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["1)!}p_0+s\\sum_{i=s+1}^\\infti",{"_index":1027,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["1)!}}{\\left(t+\\frac{\\rho_0^s}{(",{"_index":1033,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["1)\\right",{"_index":411,"text":{"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{}},"title":{}}],["1,1",{"_index":223,"text":{"coding/leetcode/118.html":{},"coding/leetcode/118.html#_1":{}},"title":{}}],["1,1,1,3,3,4,3,2,4,2",{"_index":431,"text":{"coding/leetcode/217.html":{},"coding/leetcode/217.html#_1":{}},"title":{}}],["1,1,2",{"_index":452,"text":{"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{}},"title":{}}],["1,2,1",{"_index":224,"text":{"coding/leetcode/118.html":{},"coding/leetcode/118.html#_1":{}},"title":{}}],["1,2,2,1",{"_index":491,"text":{"coding/leetcode/350.html":{},"coding/leetcode/350.html#_1":{}},"title":{}}],["1,2,2,3,4,4,3",{"_index":178,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_1":{}},"title":{}}],["1,2,2,3,5,6",{"_index":637,"text":{"coding/leetcode/88.html":{},"coding/leetcode/88.html#_1":{}},"title":{}}],["1,2,2,null,3,null,3",{"_index":181,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_1":{}},"title":{}}],["1,2,3",{"_index":531,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_1":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_1":{}},"title":{}}],["1,2,3,0,0,0",{"_index":635,"text":{"coding/leetcode/88.html":{},"coding/leetcode/88.html#_1":{}},"title":{}}],["1,2,3,1",{"_index":403,"text":{"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_1":{}},"title":{}}],["1,2,3,4",{"_index":430,"text":{"coding/leetcode/217.html":{},"coding/leetcode/217.html#_1":{}},"title":{}}],["1,2,3,4,5",{"_index":262,"text":{"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{}},"title":{}}],["1,2,3,4,5,6,7",{"_index":382,"text":{"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{}},"title":{}}],["1,2,4",{"_index":599,"text":{"coding/leetcode/66.html":{},"coding/leetcode/66.html#_1":{}},"title":{}}],["1,3,3,1",{"_index":225,"text":{"coding/leetcode/118.html":{},"coding/leetcode/118.html#_1":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_1":{}},"title":{}}],["1,4,6,4,1",{"_index":226,"text":{"coding/leetcode/118.html":{},"coding/leetcode/118.html#_1":{}},"title":{}}],["1/2)^2",{"_index":576,"text":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{}},"title":{}}],["1/4",{"_index":577,"text":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{}},"title":{}}],["10",{"_index":264,"text":{"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_1":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_2":{},"coding/leetcode/779.html":{},"coding/leetcode/779.html#_1":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_2":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_1":{},"coding/leetcode/9.html#_2":{},"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{}},"title":{}}],["100",{"_index":294,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{}},"title":{}}],["100,3",{"_index":389,"text":{"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{}},"title":{}}],["100,3,99",{"_index":386,"text":{"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{}},"title":{}}],["100.0",{"_index":579,"text":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{}},"title":{}}],["1000",{"_index":296,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["10000",{"_index":362,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["101",{"_index":177,"text":{"coding/leetcode/101.html":{}},"title":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#101":{}}}],["102",{"_index":198,"text":{"coding/leetcode/102.html":{}},"title":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#102":{}}}],["1024.00000",{"_index":572,"text":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{}},"title":{}}],["10^4",{"_index":475,"text":{"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{}},"title":{}}],["10^5",{"_index":474,"text":{"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{}},"title":{}}],["10\uff0c\u800c\u6570\u5b57\u90e8\u5206\u4e0d\u4f1a\u8d85\u8fc710",{"_index":524,"text":{"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{}},"title":{}}],["11",{"_index":140,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_1":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_1":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_1":{},"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{}},"title":{}}],["111221",{"_index":523,"text":{"coding/leetcode/38.html":{},"coding/leetcode/38.html#_1":{}},"title":{}}],["118",{"_index":100,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/118.html":{}},"title":{"coding/leetcode/118.html":{},"coding/leetcode/118.html#118":{}}}],["119",{"_index":101,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/119.html":{}},"title":{"coding/leetcode/119.html":{},"coding/leetcode/119.html#119-ii":{}}}],["12",{"_index":405,"text":{"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_1":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{},"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{}},"title":{"math/queue-theory/chapter-12.html":{}}}],["120",{"_index":241,"text":{"coding/leetcode/120.html":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_1":{}},"title":{"coding/leetcode/120.html":{},"coding/leetcode/120.html#120":{}}}],["121",{"_index":252,"text":{"coding/leetcode/121.html":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_1":{}},"title":{"coding/leetcode/121.html":{},"coding/leetcode/121.html#121":{}}}],["1211",{"_index":522,"text":{"coding/leetcode/38.html":{},"coding/leetcode/38.html#_1":{}},"title":{}}],["122",{"_index":103,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/122.html":{}},"title":{"coding/leetcode/122.html":{},"coding/leetcode/122.html#122-ii":{}}}],["123",{"_index":600,"text":{"coding/leetcode/66.html":{},"coding/leetcode/66.html#_1":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_1":{}},"title":{}}],["125",{"_index":104,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/125.html":{}},"title":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#125":{}}}],["13",{"_index":85,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/13.html":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{}},"title":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#13":{}}}],["136",{"_index":105,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/136.html":{}},"title":{"coding/leetcode/136.html":{},"coding/leetcode/136.html#136":{}}}],["14",{"_index":86,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/14.html":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{}},"title":{"coding/leetcode/14.html":{},"coding/leetcode/14.html#14":{}}}],["15",{"_index":141,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_1":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_1":{}},"title":{}}],["15,13",{"_index":566,"text":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{}},"title":{}}],["15,14,12,16",{"_index":565,"text":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{}},"title":{}}],["15,7",{"_index":202,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_1":{}},"title":{}}],["155",{"_index":344,"text":{"coding/leetcode/155.html":{}},"title":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#155":{}}}],["16",{"_index":567,"text":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{}},"title":{}}],["189",{"_index":106,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/189.html":{}},"title":{"coding/leetcode/189.html":{},"coding/leetcode/189.html#189":{}}}],["19",{"_index":394,"text":{"coding/leetcode/19.html":{}},"title":{"coding/leetcode/19.html":{},"coding/leetcode/19.html#19-n":{}}}],["198",{"_index":402,"text":{"coding/leetcode/198.html":{}},"title":{"coding/leetcode/198.html":{},"coding/leetcode/198.html#198":{}}}],["1994",{"_index":314,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["1\\cdot",{"_index":975,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["1}(t)+(1",{"_index":917,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["1}(t)+\\mu_{j+1}p_{j+1}(t",{"_index":927,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["1}\\delta",{"_index":915,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["1}\\frac{\\rho_0^i}{i!}+\\frac{\\rho_0^s}{(",{"_index":987,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["1}\\frac{\\rho_0^i}{i!}+\\frac{\\rho_0^s}{s!}\\sum_{i=0}^\\infti",{"_index":985,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["1}\\frac{\\rho_0^i}{i!}+\\sum_{i=s}^\\infti",{"_index":983,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["1}\\frac{\\rho_0^i}{i!}=t",{"_index":991,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["1}^\\infti",{"_index":1011,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["1}^{j}\\frac{\\lambda_{i",{"_index":957,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["1}p_{j",{"_index":926,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["1}}{(k",{"_index":868,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{}},"title":{}}],["1}}{\\mu_1\\mu_2\\cdots\\mu_i}p_0=\\left",{"_index":994,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["1}}{\\mu_1\\mu_2\\cdots\\mu_j}p_0=p_0\\prod_{i",{"_index":956,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["1}}{\\mu_i",{"_index":962,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["1}}{\\mu_j",{"_index":958,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["1}}{\\mu_{j+1}}p_{j",{"_index":942,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["1\u30012\uff0c\u5f02\u6216\u8fd0\u7b97\u7684\u7ed3\u679c\u4e0e\u53c2\u4e0e\u8fd0\u7b97\u7684\u6240\u6709\u6570\u503c\u7684\u6392\u5217\u987a\u5e8f\u65e0\u5173\u3002\u6839\u636e\u6027\u8d283\u30014\uff0c\u76f8\u540c\u6574\u6570\u7684\u5f02\u6216\u503c\u4e3a0\uff0c0",{"_index":329,"text":{"coding/leetcode/136.html":{},"coding/leetcode/136.html#_2":{}},"title":{}}],["1\u300212",{"_index":297,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["2",{"_index":139,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_1":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/101.html":{},"coding/leetcode/101.html#_1":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_1":{},"coding/leetcode/121.html":{},"coding/leetcode/121.html#_1":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{},"coding/leetcode/122.html#_2":{},"coding/leetcode/125.html":{},"coding/leetcode/125.html#_1":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/136.html":{},"coding/leetcode/136.html#_1":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_1":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_1":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_1":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_1":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_1":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_1":{},"coding/leetcode/217.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_1":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#_1":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_1":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_1":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{},"coding/leetcode/26.html#_2":{},"coding/leetcode/28.html":{},"coding/leetcode/28.html#_1":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{},"coding/leetcode/344.html":{},"coding/leetcode/344.html#_1":{},"coding/leetcode/344.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_1":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_1":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_1":{},"coding/leetcode/387.html":{},"coding/leetcode/387.html#_1":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/48.html#_2":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{},"coding/leetcode/50.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{},"coding/leetcode/509.html#_3":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_1":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_1":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#_1":{},"coding/leetcode/70.html#_2":{},"coding/leetcode/779.html":{},"coding/leetcode/779.html#_1":{},"coding/leetcode/779.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_1":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_1":{},"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{},"latex/environ.html":{},"latex/environ.html#enumerate":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{},"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{}},"title":{}}],["2,1,1,0",{"_index":473,"text":{"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{}},"title":{}}],["2,2",{"_index":493,"text":{"coding/leetcode/350.html":{},"coding/leetcode/350.html#_1":{}},"title":{}}],["2,2,1",{"_index":327,"text":{"coding/leetcode/136.html":{},"coding/leetcode/136.html#_1":{}},"title":{}}],["2,5,6",{"_index":636,"text":{"coding/leetcode/88.html":{},"coding/leetcode/88.html#_1":{}},"title":{}}],["2,7,9,3,1",{"_index":404,"text":{"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{}},"title":{}}],["2.00000",{"_index":571,"text":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{}},"title":{}}],["2.10000",{"_index":573,"text":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{}},"title":{}}],["20",{"_index":200,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_1":{}},"title":{}}],["2020",{"_index":77,"text":{},"title":{"weixin-2020.html":{}}}],["204",{"_index":414,"text":{"coding/leetcode/204.html":{}},"title":{"coding/leetcode/204.html":{},"coding/leetcode/204.html#204":{}}}],["206",{"_index":107,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/206.html":{}},"title":{"coding/leetcode/206.html":{},"coding/leetcode/206.html#206":{}}}],["21",{"_index":87,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/21.html":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_1":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_1":{}},"title":{"coding/leetcode/21.html":{},"coding/leetcode/21.html#21":{}}}],["2147483648",{"_index":581,"text":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#_2":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{}},"title":{}}],["217",{"_index":108,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/217.html":{}},"title":{"coding/leetcode/217.html":{},"coding/leetcode/217.html#217":{}}}],["231",{"_index":632,"text":{"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{}},"title":{}}],["234",{"_index":436,"text":{"coding/leetcode/234.html":{}},"title":{"coding/leetcode/234.html":{},"coding/leetcode/234.html#234":{}}}],["237",{"_index":109,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/237.html":{}},"title":{"coding/leetcode/237.html":{},"coding/leetcode/237.html#237":{}}}],["24",{"_index":88,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/24.html":{}},"title":{"coding/leetcode/24.html":{},"coding/leetcode/24.html#24":{}}}],["242",{"_index":110,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/242.html":{}},"title":{"coding/leetcode/242.html":{},"coding/leetcode/242.html#242":{}}}],["26",{"_index":89,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_2":{},"coding/leetcode/26.html":{},"coding/leetcode/387.html":{},"coding/leetcode/387.html#_2":{}},"title":{"coding/leetcode/26.html":{},"coding/leetcode/26.html#26":{}}}],["27",{"_index":299,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["28",{"_index":90,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/28.html":{}},"title":{"coding/leetcode/28.html":{},"coding/leetcode/28.html#28-strstr":{}}}],["2],[0",{"_index":351,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{}},"title":{}}],["2^(n",{"_index":619,"text":{"coding/leetcode/779.html":{},"coding/leetcode/779.html#_1":{}},"title":{}}],["2^{31",{"_index":580,"text":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_1":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{}},"title":{}}],["2\u7684\u500d\u6570\uff0c\u5269\u4e0b\u7684\u7b2c\u4e00\u4e2a\u6ca1\u6709\u88ab\u5212\u53bb\u7684\u6570\u5b573\u5373\u4e3a\u8d28\u6570\uff0c\u518d\u82b1\u65d7\u6240\u67093\u7684\u500d\u6570\uff0c\u5269\u4e0b\u7684\u7b2c\u4e00\u4e2a\u6ca1\u6709\u88ab\u5212\u53bb\u7684\u6570\u5b575",{"_index":416,"text":{"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{}},"title":{}}],["3",{"_index":179,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_1":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_1":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_1":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_1":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_1":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_1":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_1":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_1":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_1":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_1":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_1":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_1":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_1":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#_1":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_1":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_1":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_1":{},"latex/environ.html":{},"latex/environ.html#enumerate":{},"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{}},"title":{}}],["3,4",{"_index":242,"text":{"coding/leetcode/120.html":{},"coding/leetcode/120.html#_1":{}},"title":{}}],["3,9,20,null,null,15,7",{"_index":199,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_1":{}},"title":{}}],["3,99",{"_index":387,"text":{"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{}},"title":{}}],["3,null,0",{"_index":353,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{}},"title":{}}],["30",{"_index":521,"text":{"coding/leetcode/38.html":{},"coding/leetcode/38.html#_1":{},"coding/leetcode/779.html":{},"coding/leetcode/779.html#_1":{}},"title":{}}],["31",{"_index":612,"text":{"coding/leetcode/7.html":{},"coding/leetcode/7.html#_2":{}},"title":{}}],["315",{"_index":111,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/315.html":{}},"title":{"coding/leetcode/315.html":{},"coding/leetcode/315.html#315":{}}}],["32",{"_index":284,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{},"coding/leetcode/50.html#_2":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_1":{},"coding/leetcode/7.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{}},"title":{}}],["321",{"_index":609,"text":{"coding/leetcode/7.html":{},"coding/leetcode/7.html#_1":{}},"title":{}}],["344",{"_index":112,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/344.html":{}},"title":{"coding/leetcode/344.html":{},"coding/leetcode/344.html#344":{}}}],["350",{"_index":489,"text":{"coding/leetcode/350.html":{}},"title":{"coding/leetcode/350.html":{},"coding/leetcode/350.html#350-ii":{}}}],["36",{"_index":92,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/36.html":{}},"title":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#36":{}}}],["38",{"_index":93,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/38.html":{}},"title":{"coding/leetcode/38.html":{},"coding/leetcode/38.html#38":{}}}],["384",{"_index":530,"text":{"coding/leetcode/384.html":{}},"title":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#384":{}}}],["387",{"_index":113,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/387.html":{}},"title":{"coding/leetcode/387.html":{},"coding/leetcode/387.html#387":{}}}],["3999",{"_index":309,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["3x3",{"_index":503,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{}},"title":{}}],["4",{"_index":180,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_1":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/136.html":{},"coding/leetcode/136.html#_1":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_1":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_1":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_1":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_1":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#_1":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_1":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_1":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{},"coding/leetcode/779.html":{},"coding/leetcode/779.html#_1":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_1":{},"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{}},"title":{}}],["4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1",{"_index":508,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{}},"title":{}}],["4\",\"1\",\"9\",\".\",\".\",\"5",{"_index":511,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{}},"title":{}}],["4,1,2,1,2",{"_index":328,"text":{"coding/leetcode/136.html":{},"coding/leetcode/136.html#_1":{}},"title":{}}],["4,1,8,3",{"_index":244,"text":{"coding/leetcode/120.html":{},"coding/leetcode/120.html#_1":{}},"title":{}}],["4,1,9",{"_index":439,"text":{"coding/leetcode/237.html":{},"coding/leetcode/237.html#_1":{}},"title":{}}],["4,3,2,1",{"_index":601,"text":{"coding/leetcode/66.html":{},"coding/leetcode/66.html#_1":{}},"title":{}}],["4,3,2,2",{"_index":602,"text":{"coding/leetcode/66.html":{},"coding/leetcode/66.html#_1":{}},"title":{}}],["4,5,1,9",{"_index":438,"text":{"coding/leetcode/237.html":{},"coding/leetcode/237.html#_1":{}},"title":{}}],["4,5,6",{"_index":558,"text":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{}},"title":{}}],["4,5,9",{"_index":440,"text":{"coding/leetcode/237.html":{},"coding/leetcode/237.html#_1":{}},"title":{}}],["4,9",{"_index":496,"text":{"coding/leetcode/350.html":{},"coding/leetcode/350.html#_1":{}},"title":{}}],["4,9,5",{"_index":494,"text":{"coding/leetcode/350.html":{},"coding/leetcode/350.html#_1":{}},"title":{}}],["40",{"_index":305,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["400",{"_index":307,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{}},"title":{}}],["4193",{"_index":627,"text":{"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{}},"title":{}}],["42",{"_index":626,"text":{"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{}},"title":{}}],["4321",{"_index":603,"text":{"coding/leetcode/66.html":{},"coding/leetcode/66.html#_1":{}},"title":{}}],["48",{"_index":94,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/48.html":{}},"title":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#48":{}}}],["49",{"_index":319,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["4\u4e2a\u7b49\u957f\u7684\u90e8\u5206\uff0c\u5176\u4e2d\u7b2c1\u30014\u90e8\u5206\u76f8\u540c\uff0c2\u30013",{"_index":620,"text":{"coding/leetcode/779.html":{},"coding/leetcode/779.html#_2":{}},"title":{}}],["5",{"_index":222,"text":{"coding/leetcode/118.html":{},"coding/leetcode/118.html#_1":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_1":{},"coding/leetcode/121.html":{},"coding/leetcode/121.html#_1":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_1":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_1":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_1":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#_1":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_1":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/779.html":{},"coding/leetcode/779.html#_1":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_1":{},"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{}},"title":{}}],["5\",\"3\",\".\",\".\",\"7",{"_index":504,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{}},"title":{}}],["5,1,4,null,null,3,6",{"_index":640,"text":{"coding/leetcode/98.html":{},"coding/leetcode/98.html#_1":{}},"title":{}}],["5,2,6,1",{"_index":472,"text":{"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{}},"title":{}}],["5,6,7,1,2,3,4",{"_index":383,"text":{"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{}},"title":{}}],["50",{"_index":95,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/50.html":{}},"title":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#50-powx-n":{}}}],["500",{"_index":295,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/13.html#_2":{}},"title":{}}],["509",{"_index":585,"text":{"coding/leetcode/509.html":{}},"title":{"coding/leetcode/509.html":{},"coding/leetcode/509.html#509":{}}}],["58",{"_index":312,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["6",{"_index":254,"text":{"coding/leetcode/121.html":{},"coding/leetcode/121.html#_1":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_1":{},"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{}},"title":{}}],["6\",\".\",\".\",\".\",\".\",\"2\",\"8",{"_index":510,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{}},"title":{}}],["6\",\".\",\".\",\"1\",\"9\",\"5",{"_index":505,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{}},"title":{}}],["6,5,7",{"_index":243,"text":{"coding/leetcode/120.html":{},"coding/leetcode/120.html#_1":{}},"title":{}}],["6,7,1,2,3,4,5",{"_index":385,"text":{"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{}},"title":{}}],["66",{"_index":98,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/66.html":{}},"title":{"coding/leetcode/66.html":{},"coding/leetcode/66.html#66":{}}}],["7",{"_index":81,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/1.html":{},"coding/leetcode/1.html#_1":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_1":{},"coding/leetcode/121.html":{},"coding/leetcode/121.html#_1":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_1":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/7.html":{},"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{}},"title":{"coding/leetcode/7.html":{},"coding/leetcode/7.html#7":{}}}],["7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6",{"_index":509,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{}},"title":{}}],["7,1,2,3,4,5,6",{"_index":384,"text":{"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{}},"title":{}}],["7,1,5,3,6,4",{"_index":253,"text":{"coding/leetcode/121.html":{},"coding/leetcode/121.html#_1":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{}},"title":{}}],["7,10,11",{"_index":568,"text":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{}},"title":{}}],["7,4,1",{"_index":560,"text":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{}},"title":{}}],["7,6,4,3,1",{"_index":255,"text":{"coding/leetcode/121.html":{},"coding/leetcode/121.html#_1":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{}},"title":{}}],["7,8,9",{"_index":559,"text":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{}},"title":{}}],["70",{"_index":99,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/70.html":{}},"title":{"coding/leetcode/70.html":{},"coding/leetcode/70.html#70":{}}}],["779",{"_index":615,"text":{"coding/leetcode/779.html":{}},"title":{"coding/leetcode/779.html":{},"coding/leetcode/779.html#779-k":{}}}],["8",{"_index":82,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/8.html":{},"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{}},"title":{"coding/leetcode/8.html":{},"coding/leetcode/8.html#8-atoi":{}}}],["8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3",{"_index":507,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{}},"title":{}}],["8\",\".\",\".\",\"7\",\"9",{"_index":512,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{}},"title":{}}],["8\",\"3\",\".\",\".\",\"7",{"_index":513,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{}},"title":{}}],["8,10",{"_index":564,"text":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{}},"title":{}}],["8,5,2",{"_index":561,"text":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{}},"title":{}}],["80",{"_index":276,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{}},"title":{}}],["88",{"_index":634,"text":{"coding/leetcode/88.html":{}},"title":{"coding/leetcode/88.html":{},"coding/leetcode/88.html#88":{}}}],["9",{"_index":84,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/1.html":{},"coding/leetcode/1.html#_1":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_1":{},"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#_1":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_2":{},"coding/leetcode/9.html":{},"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{}},"title":{"coding/leetcode/9.html":{},"coding/leetcode/9.html#9":{}}}],["9\",\"8\",\".\",\".\",\".\",\".\",\"6",{"_index":506,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{}},"title":{}}],["9,11",{"_index":563,"text":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{}},"title":{}}],["9,20",{"_index":201,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_1":{}},"title":{}}],["9,4,9,8,4",{"_index":495,"text":{"coding/leetcode/350.html":{},"coding/leetcode/350.html#_1":{}},"title":{}}],["9,6,3",{"_index":562,"text":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{}},"title":{}}],["9.26100",{"_index":574,"text":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{}},"title":{}}],["90",{"_index":306,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{}},"title":{}}],["900",{"_index":308,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["91283472332",{"_index":631,"text":{"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{}},"title":{}}],["98",{"_index":639,"text":{"coding/leetcode/98.html":{}},"title":{"coding/leetcode/98.html":{},"coding/leetcode/98.html#98":{}}}],["987",{"_index":629,"text":{"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{}},"title":{}}],["99",{"_index":388,"text":{"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{}},"title":{}}],["999",{"_index":321,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["9999+1",{"_index":604,"text":{"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{}},"title":{}}],["9x9",{"_index":502,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{}},"title":{}}],["_0}{\\mu_2}p_0",{"_index":948,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["__init__",{"_index":650,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["_activ",{"_index":661,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["_capac",{"_index":133,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{}},"title":{}}],["_elem",{"_index":134,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{}},"title":{}}],["_n",{"_index":893,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["_size",{"_index":131,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{}},"title":{}}],["_thread_id",{"_index":660,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["a\\mod",{"_index":814,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["a_i",{"_index":256,"text":{"coding/leetcode/121.html":{},"coding/leetcode/121.html#_2":{}},"title":{}}],["a_j",{"_index":257,"text":{"coding/leetcode/121.html":{},"coding/leetcode/121.html#_2":{}},"title":{}}],["a_{i",{"_index":410,"text":{"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{}},"title":{}}],["aaaaa",{"_index":463,"text":{"coding/leetcode/28.html":{},"coding/leetcode/28.html#_1":{}},"title":{}}],["ab",{"_index":796,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["accent",{"_index":40,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["accent\",this.dataset.mdcoloracc",{"_index":43,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["add",{"_index":608,"text":{"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{}},"title":{}}],["alpha",{"_index":720,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{}},"title":{}}],["alpha)=\\left",{"_index":855,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{}},"title":{}}],["amber",{"_index":21,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["anagram",{"_index":445,"text":{"coding/leetcode/242.html":{},"coding/leetcode/242.html#_1":{}},"title":{}}],["approx",{"_index":789,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_6":{}},"title":{}}],["arcco",{"_index":824,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["arcsin",{"_index":823,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["arctan",{"_index":825,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["arg",{"_index":685,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{},"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["array",{"_index":148,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{}},"title":{}}],["array.prototype.foreach.call(button",{"_index":32,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["ascii",{"_index":483,"text":{"coding/leetcode/344.html":{},"coding/leetcode/344.html#_1":{}},"title":{}}],["ascii\u6570\u503c\u76f8\u5dee32\uff0c\u4f46ascii\u6570\u503c\u76f8\u5dee32",{"_index":274,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{}},"title":{}}],["assum",{"_index":150,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{}},"title":{}}],["atoi",{"_index":623,"text":{"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{}},"title":{"coding/leetcode/8.html":{},"coding/leetcode/8.html#8-atoi":{}}}],["author",{"_index":848,"text":{"latex/slides.html":{},"latex/slides.html#latex":{}},"title":{}}],["b",{"_index":156,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/136.html":{},"coding/leetcode/136.html#_2":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_2":{},"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{},"latex/cheatsheet.html#_8":{},"latex/environ.html":{},"latex/environ.html#enumerate":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_5":{}},"title":{}}],["baseexcept",{"_index":695,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["bba",{"_index":464,"text":{"coding/leetcode/28.html":{},"coding/leetcode/28.html#_1":{}},"title":{}}],["beamer",{"_index":843,"text":{"latex/slides.html":{},"latex/slides.html#latex":{}},"title":{}}],["begin",{"_index":839,"text":{"latex/environ.html":{},"latex/environ.html#enumerate":{},"latex/environ.html#itemize":{},"latex/slides.html":{},"latex/slides.html#latex":{}},"title":{}}],["begin{align",{"_index":856,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{},"math/queue-theory/chapter-12.html#_6":{},"math/queue-theory/chapter-12.html#_9":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["begin{enumer",{"_index":840,"text":{"latex/environ.html":{},"latex/environ.html#enumerate":{}},"title":{}}],["beta",{"_index":721,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["binari",{"_index":183,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["blue",{"_index":14,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["board",{"_index":515,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{}},"title":{}}],["boardcols",{"_index":517,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{}},"title":{}}],["boardsiz",{"_index":516,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{}},"title":{}}],["boldsymbol",{"_index":706,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_1":{}},"title":{}}],["boldsymbol{a",{"_index":714,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_1":{}},"title":{}}],["bool",{"_index":190,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_2":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["both",{"_index":204,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{}},"title":{}}],["break",{"_index":173,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_2":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["brown",{"_index":23,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["build",{"_index":58,"text":{"index.html":{},"index.html#commands":{}},"title":{}}],["button",{"_index":27,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["button.addeventlistener(\"click",{"_index":34,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["c",{"_index":291,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/136.html":{},"coding/leetcode/136.html#_2":{},"coding/leetcode/28.html":{},"coding/leetcode/28.html#_1":{},"latex/environ.html":{},"latex/environ.html#enumerate":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_5":{}},"title":{}}],["c++\u63d0\u4f9b\u4e86\u6a21\u677f\u7c7b\u7684\u529f\u80fd\u7528\u6765\u9488\u5bf9\u4e0d\u540c\u7c7b\u578b\u7684\u5143\u7d20\u63d0\u4f9b\u76f8\u540c\u7684\u529f\u80fd\u3002\u5bf9\u4e8e\u67d0\u4e2aadt",{"_index":123,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{}},"title":{}}],["c/c",{"_index":122,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{}},"title":{}}],["cach",{"_index":584,"text":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_3":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#_2":{}},"title":{}}],["call",{"_index":152,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{}},"title":{}}],["callabl",{"_index":684,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["caller",{"_index":151,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{}},"title":{}}],["canal",{"_index":270,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_1":{}},"title":{}}],["cap",{"_index":778,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_5":{}},"title":{}}],["car",{"_index":273,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_1":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_1":{}},"title":{}}],["case",{"_index":326,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_2":{}},"title":{}}],["cdot",{"_index":415,"text":{"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["cell",{"_index":159,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{}},"title":{}}],["chapter",{"_index":853,"text":{"math/queue-theory/index.html":{},"math/queue-theory/index.html#_1":{}},"title":{"math/queue-theory/chapter-12.html":{}}}],["char",{"_index":278,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_2":{},"coding/leetcode/28.html":{},"coding/leetcode/28.html#_2":{},"coding/leetcode/344.html":{},"coding/leetcode/344.html#_1":{},"coding/leetcode/344.html#_2":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/387.html":{},"coding/leetcode/387.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_2":{}},"title":{}}],["chi",{"_index":757,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["class",{"_index":127,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{},"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["climbstair",{"_index":614,"text":{"coding/leetcode/70.html":{},"coding/leetcode/70.html#_2":{}},"title":{}}],["climbstairs_cach",{"_index":613,"text":{"coding/leetcode/70.html":{},"coding/leetcode/70.html#_2":{}},"title":{}}],["cm",{"_index":315,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["cmxcix",{"_index":322,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["co",{"_index":816,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["color",{"_index":30,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["columns",{"_index":205,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{}},"title":{}}],["command",{"_index":46,"text":{"index.html":{}},"title":{"index.html#commands":{}}}],["comp",{"_index":432,"text":{"coding/leetcode/217.html":{},"coding/leetcode/217.html#_2":{}},"title":{}}],["comparetwo",{"_index":335,"text":{"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{}},"title":{}}],["configur",{"_index":67,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"index.html":{},"index.html#project-layout":{}},"title":{}}],["const",{"_index":433,"text":{"coding/leetcode/217.html":{},"coding/leetcode/217.html#_2":{}},"title":{}}],["containsdupl",{"_index":434,"text":{"coding/leetcode/217.html":{},"coding/leetcode/217.html#_2":{}},"title":{}}],["cosh",{"_index":820,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["cot",{"_index":818,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["coth",{"_index":822,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["count",{"_index":470,"text":{"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{}},"title":{}}],["countandsay",{"_index":526,"text":{"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{}},"title":{}}],["counter",{"_index":528,"text":{"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{}},"title":{}}],["countprim",{"_index":418,"text":{"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{}},"title":{}}],["counts[i",{"_index":471,"text":{"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{}},"title":{}}],["countsmal",{"_index":481,"text":{"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{}},"title":{}}],["creat",{"_index":50,"text":{"index.html":{},"index.html#commands":{}},"title":{}}],["credit",{"_index":76,"text":{"about.html":{}},"title":{}}],["ctype",{"_index":646,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["cup",{"_index":779,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_5":{}},"title":{}}],["cur",{"_index":166,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_2":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/387.html":{},"coding/leetcode/387.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["cur1",{"_index":338,"text":{"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/28.html":{},"coding/leetcode/28.html#_2":{}},"title":{}}],["cur2",{"_index":339,"text":{"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/28.html":{},"coding/leetcode/28.html#_2":{}},"title":{}}],["cur3",{"_index":426,"text":{"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/28.html":{},"coding/leetcode/28.html#_2":{}},"title":{}}],["curmin",{"_index":360,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["currentv",{"_index":266,"text":{"coding/leetcode/122.html":{},"coding/leetcode/122.html#_2":{}},"title":{}}],["custom",{"_index":8,"text":{"index.html":{}},"title":{"index.html#customization":{}}}],["cyan",{"_index":16,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["d",{"_index":292,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/13.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_5":{}},"title":{}}],["data",{"_index":364,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["date",{"_index":850,"text":{"latex/slides.html":{},"latex/slides.html#latex":{}},"title":{}}],["deep",{"_index":12,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["def",{"_index":649,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["defin",{"_index":154,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_2":{}},"title":{}}],["definit",{"_index":182,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["deletenod",{"_index":441,"text":{"coding/leetcode/237.html":{},"coding/leetcode/237.html#_2":{}},"title":{}}],["delta",{"_index":724,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["depth",{"_index":480,"text":{"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{}},"title":{}}],["descript",{"_index":838,"text":{"latex/environ.html":{},"latex/environ.html#_1":{}},"title":{}}],["dest",{"_index":478,"text":{"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{}},"title":{}}],["det",{"_index":828,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["dict",{"_index":689,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["differ",{"_index":698,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["digit",{"_index":606,"text":{"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{}},"title":{}}],["digitss",{"_index":607,"text":{"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{}},"title":{}}],["dim",{"_index":827,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["dir",{"_index":48,"text":{"index.html":{},"index.html#commands":{}},"title":{}}],["div",{"_index":762,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_4":{}},"title":{}}],["doc",{"_index":56,"text":{"index.html":{},"index.html#commands":{},"index.html#project-layout":{}},"title":{}}],["document",{"_index":5,"text":{"index.html":{},"index.html#commands":{},"index.html#project-layout":{},"index.html#welcome-to-mkdocs":{}},"title":{}}],["document.body.dataset.mdcoloracc",{"_index":41,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["document.body.dataset.mdcolorprimari",{"_index":36,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["document.getelementsbyclassname('md",{"_index":44,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["document.queryselectorall(\"button[data",{"_index":28,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["documentclass",{"_index":842,"text":{"latex/slides.html":{},"latex/slides.html#latex":{}},"title":{}}],["dog\",\"racecar\",\"car",{"_index":333,"text":{"coding/leetcode/14.html":{},"coding/leetcode/14.html#_1":{}},"title":{}}],["doubl",{"_index":582,"text":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#_2":{}},"title":{}}],["dp",{"_index":413,"text":{"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{}},"title":{}}],["dp1",{"_index":251,"text":{"coding/leetcode/120.html":{},"coding/leetcode/120.html#_2":{}},"title":{}}],["dp_j(t)}{\\mathrm",{"_index":931,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["dt}=0",{"_index":937,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["dt}=\\lambda_{j",{"_index":932,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["dx",{"_index":805,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["e",{"_index":696,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{},"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{}},"title":{}}],["e_k",{"_index":874,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_5":{}},"title":{}}],["end",{"_index":655,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{},"latex/environ.html":{},"latex/environ.html#enumerate":{},"latex/environ.html#itemize":{},"latex/slides.html":{},"latex/slides.html#latex":{}},"title":{}}],["end{align",{"_index":859,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{},"math/queue-theory/chapter-12.html#_6":{},"math/queue-theory/chapter-12.html#_9":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["enumer",{"_index":837,"text":{"latex/environ.html":{},"latex/environ.html#_1":{},"latex/environ.html#enumerate":{}},"title":{"latex/environ.html#enumerate":{}}}],["epsilon",{"_index":726,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["epsilonn",{"_index":727,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["erlang",{"_index":864,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{},"math/queue-theory/chapter-12.html#_4":{},"math/queue-theory/chapter-12.html#_5":{}},"title":{}}],["eta",{"_index":730,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["except",{"_index":669,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["execut",{"_index":694,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["exist",{"_index":794,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_7":{}},"title":{}}],["exit",{"_index":64,"text":{"index.html":{},"index.html#commands":{}},"title":{}}],["exp",{"_index":813,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["extend",{"_index":676,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["f",{"_index":799,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["f(0",{"_index":587,"text":{"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{}},"title":{}}],["f(1",{"_index":588,"text":{"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{}},"title":{}}],["f(2",{"_index":589,"text":{"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{}},"title":{}}],["f(3",{"_index":590,"text":{"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{}},"title":{}}],["f(4",{"_index":591,"text":{"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{}},"title":{}}],["f(i",{"_index":408,"text":{"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{}},"title":{}}],["f(n",{"_index":586,"text":{"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{}},"title":{}}],["f(t",{"_index":854,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{}},"title":{}}],["f_{\\xi_i}(t",{"_index":861,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{}},"title":{}}],["failur",{"_index":671,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["fals",{"_index":194,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/125.html":{},"coding/leetcode/125.html#_1":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_1":{},"coding/leetcode/217.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_1":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_1":{},"coding/leetcode/242.html#_2":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_1":{},"coding/leetcode/9.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_1":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["fcf",{"_index":869,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_4":{}},"title":{}}],["fib",{"_index":597,"text":{"coding/leetcode/509.html":{},"coding/leetcode/509.html#_3":{},"coding/leetcode/509.html#_4":{}},"title":{}}],["fib_cach",{"_index":594,"text":{"coding/leetcode/509.html":{},"coding/leetcode/509.html#_3":{}},"title":{}}],["file",{"_index":68,"text":{"index.html":{},"index.html#project-layout":{}},"title":{}}],["fill",{"_index":239,"text":{"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{}},"title":{}}],["final",{"_index":654,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["find",{"_index":119,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_2":{}},"title":{}}],["firstuniqchar",{"_index":556,"text":{"coding/leetcode/387.html":{},"coding/leetcode/387.html#_2":{}},"title":{}}],["fisher",{"_index":536,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["fl",{"_index":332,"text":{"coding/leetcode/14.html":{},"coding/leetcode/14.html#_1":{}},"title":{}}],["flag",{"_index":161,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_2":{}},"title":{}}],["flower\",\"flow\",\"flight",{"_index":331,"text":{"coding/leetcode/14.html":{},"coding/leetcode/14.html#_1":{}},"title":{}}],["foral",{"_index":793,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_7":{}},"title":{}}],["frac",{"_index":795,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["frac{(",{"_index":1040,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{(\\rho_0",{"_index":1037,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{1}{1+\\sum_{n=1}^\\infti",{"_index":967,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mm1":{}},"title":{}}],["frac{1}{\\sum_{i=0}^{",{"_index":982,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\frac{t(",{"_index":1052,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\lambda",{"_index":947,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["frac{\\lambda(\\lambda",{"_index":866,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{}},"title":{}}],["frac{\\lambda_0(\\mu_1+\\lambda_1)}{\\mu_1\\mu_2}p_0",{"_index":949,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["frac{\\lambda_0\\lambda_1\\cdots\\lambda_{j",{"_index":955,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["frac{\\lambda_0\\lambda_1}{\\mu_1\\mu_3}p_0=\\frac{\\lambda_0\\lambda_1\\lambda_2}{\\mu_1\\mu_2\\mu_3}p_0",{"_index":953,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["frac{\\lambda_0}{\\mu_2}p_0=\\frac{\\lambda_0\\lambda_1}{\\mu_1\\mu_2}p_0",{"_index":950,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["frac{\\lambda_1}{\\mu_3}p_1=\\frac{\\lambda_0\\lambda_1(\\mu_2+\\lambda_2)}{\\mu_1\\mu_2\\mu_3}p_0",{"_index":952,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["frac{\\lambda_{j",{"_index":941,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["frac{\\mathrm",{"_index":930,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["frac{\\rho^i_0}{s!s^{i",{"_index":1002,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\rho^s_0p_0}{(",{"_index":1004,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\rho^s_0p_0}{s!}\\sum_{i=0}^\\infti",{"_index":1014,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\rho^s_0p_0}{s!}\\sum_{i=1}^\\infti",{"_index":1016,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\rho^{s+1}_0p_0}{(",{"_index":1020,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\rho_0",{"_index":1034,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\rho_0^i}{(i",{"_index":1026,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\rho_0^i}{i!}p_0=\\frac{\\rho_0^i}{i!\\left(t+\\frac{\\rho_0^s}{(",{"_index":995,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\rho_0^i}{s!s^{i",{"_index":984,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\rho_0^i}{s^i",{"_index":986,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\rho_0^sp_0}{(",{"_index":1029,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\rho_0^{s+1}(",{"_index":1055,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\rho_0^{s+1}p_0}{(",{"_index":1031,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\rho_0^{s+1}}{(",{"_index":1036,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\sum_{i=0}^",{"_index":1032,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\sum_{i=0}^\\infti",{"_index":1044,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{\\sum_{i=1}^",{"_index":1046,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{a}{b",{"_index":797,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["frac{i\\rho_0^i}{s^i",{"_index":1015,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frac{p_j(t+\\delta",{"_index":923,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["frac{t(",{"_index":1058,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["frame",{"_index":844,"text":{"latex/slides.html":{},"latex/slides.html#latex":{}},"title":{}}],["free",{"_index":153,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{}},"title":{}}],["full",{"_index":4,"text":{"index.html":{},"index.html#welcome-to-mkdocs":{}},"title":{}}],["fullcach",{"_index":596,"text":{"coding/leetcode/509.html":{},"coding/leetcode/509.html#_3":{}},"title":{}}],["func",{"_index":683,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["funcarg",{"_index":688,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["function",{"_index":35,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{},"index.html":{},"index.html#customization":{}},"title":{}}],["function(button",{"_index":33,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["functup",{"_index":690,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["g",{"_index":875,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_5":{}},"title":{}}],["gamma",{"_index":722,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["gener",{"_index":227,"text":{"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{}},"title":{}}],["geq",{"_index":780,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_6":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["geqq",{"_index":781,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_6":{}},"title":{}}],["geqslant",{"_index":782,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_6":{}},"title":{}}],["get_id",{"_index":656,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["getmin",{"_index":349,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{}},"title":{}}],["getnod",{"_index":437,"text":{"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{}},"title":{}}],["getresult",{"_index":682,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["getrow",{"_index":240,"text":{"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{}},"title":{}}],["gg",{"_index":783,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_6":{}},"title":{}}],["ggg",{"_index":784,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_6":{}},"title":{}}],["green",{"_index":18,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["grey",{"_index":24,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["guess",{"_index":74,"text":{"about.html":{}},"title":{}}],["h",{"_index":60,"text":{"index.html":{},"index.html#commands":{},"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["h\",\"a\",\"n\",\"n\",\"a\",\"h",{"_index":486,"text":{"coding/leetcode/344.html":{},"coding/leetcode/344.html#_1":{}},"title":{}}],["h\",\"e\",\"l\",\"l\",\"o",{"_index":484,"text":{"coding/leetcode/344.html":{},"coding/leetcode/344.html#_1":{}},"title":{}}],["hasattr",{"_index":659,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["hashmap",{"_index":171,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/387.html":{},"coding/leetcode/387.html#_2":{}},"title":{}}],["hashmap1",{"_index":450,"text":{"coding/leetcode/242.html":{},"coding/leetcode/242.html#_2":{}},"title":{}}],["hashmap2",{"_index":451,"text":{"coding/leetcode/242.html":{},"coding/leetcode/242.html#_2":{}},"title":{}}],["haystack",{"_index":459,"text":{"coding/leetcode/28.html":{},"coding/leetcode/28.html#_1":{},"coding/leetcode/28.html#_2":{}},"title":{}}],["head",{"_index":287,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#_1":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{}},"title":{}}],["hello",{"_index":461,"text":{"coding/leetcode/28.html":{},"coding/leetcode/28.html#_1":{}},"title":{}}],["help",{"_index":62,"text":{"index.html":{},"index.html#commands":{}},"title":{}}],["here",{"_index":75,"text":{"about.html":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["home",{"_index":0,"text":{},"title":{"index.html":{}}}],["homepag",{"_index":70,"text":{"index.html":{},"index.html#project-layout":{}},"title":{}}],["https://www.geeksforgeeks.org/python",{"_index":697,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["i+1",{"_index":907,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["i=0",{"_index":974,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["i=1",{"_index":978,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["i\\leq",{"_index":997,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["ic",{"_index":317,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["id",{"_index":657,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["ii",{"_index":102,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/119.html":{},"coding/leetcode/122.html":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/350.html":{}},"title":{"coding/leetcode/119.html":{},"coding/leetcode/119.html#119-ii":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#122-ii":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#350-ii":{}}}],["iii",{"_index":310,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["iiii",{"_index":302,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["iiint_df(x)\\mathrm",{"_index":808,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["iint_df(x)\\mathrm",{"_index":807,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["im",{"_index":318,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["imag",{"_index":73,"text":{"index.html":{},"index.html#project-layout":{}},"title":{}}],["import",{"_index":644,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["increment",{"_index":423,"text":{"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{}},"title":{}}],["index.md",{"_index":69,"text":{"index.html":{},"index.html#project-layout":{}},"title":{}}],["indexof",{"_index":466,"text":{"coding/leetcode/28.html":{},"coding/leetcode/28.html#_1":{}},"title":{}}],["indigo",{"_index":13,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["inf",{"_index":830,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["infti",{"_index":876,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_5":{},"math/queue-theory/chapter-12.html#_9":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["infty}p(n(t",{"_index":884,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{}},"title":{}}],["infty}p_j(t",{"_index":934,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["initi",{"_index":363,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["insert",{"_index":116,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["instanti",{"_index":373,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["institut",{"_index":849,"text":{"latex/slides.html":{},"latex/slides.html#latex":{}},"title":{}}],["int",{"_index":132,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{},"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_2":{},"coding/leetcode/121.html":{},"coding/leetcode/121.html#_2":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_2":{},"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/136.html":{},"coding/leetcode/136.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_2":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_2":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_2":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{},"coding/leetcode/26.html#_2":{},"coding/leetcode/28.html":{},"coding/leetcode/28.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/344.html":{},"coding/leetcode/344.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_1":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/387.html":{},"coding/leetcode/387.html#_2":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_2":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_3":{},"coding/leetcode/509.html#_4":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_2":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#_2":{},"coding/leetcode/779.html":{},"coding/leetcode/779.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_2":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["int_a^bf(x)\\mathrm",{"_index":804,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["int_max",{"_index":624,"text":{"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{},"coding/leetcode/8.html#_2":{}},"title":{}}],["int_min",{"_index":625,"text":{"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{},"coding/leetcode/8.html#_2":{}},"title":{}}],["intersect",{"_index":499,"text":{"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{}},"title":{}}],["iota",{"_index":733,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["ip_i+\\sum_{i=s+1}^\\infti",{"_index":1023,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["ip_i}{\\lambda",{"_index":1045,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["isanagram",{"_index":449,"text":{"coding/leetcode/242.html":{},"coding/leetcode/242.html#_2":{}},"title":{}}],["ismirror",{"_index":191,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{}},"title":{}}],["ispalindrom",{"_index":285,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_2":{}},"title":{}}],["issam",{"_index":281,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{}},"title":{}}],["issymmetr",{"_index":195,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{}},"title":{}}],["istext",{"_index":277,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{}},"title":{}}],["isvalidbst",{"_index":642,"text":{"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["isvalidsudoku",{"_index":514,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{}},"title":{}}],["item",{"_index":662,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{},"latex/environ.html":{},"latex/environ.html#_1":{},"latex/environ.html#enumerate":{},"latex/environ.html#itemize":{}},"title":{"latex/environ.html#itemize":{}}}],["iv",{"_index":303,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["ix",{"_index":304,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["j",{"_index":170,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_2":{},"coding/leetcode/121.html":{},"coding/leetcode/121.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["j)=\\lambda_j\\delta",{"_index":901,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["java",{"_index":465,"text":{"coding/leetcode/28.html":{},"coding/leetcode/28.html#_1":{}},"title":{}}],["join",{"_index":674,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["k",{"_index":233,"text":{"coding/leetcode/119.html":{},"coding/leetcode/119.html#_1":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/779.html":{},"coding/leetcode/779.html#_1":{},"coding/leetcode/779.html#_2":{},"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{},"math/queue-theory/chapter-12.html#_4":{},"math/queue-theory/chapter-12.html#_5":{}},"title":{"coding/leetcode/779.html":{},"coding/leetcode/779.html#779-k":{}}}],["k)=\\left",{"_index":865,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{}},"title":{}}],["k\\leq33",{"_index":234,"text":{"coding/leetcode/119.html":{},"coding/leetcode/119.html#_1":{}},"title":{}}],["kappa",{"_index":734,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["kendal",{"_index":872,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_5":{}},"title":{}}],["ker",{"_index":826,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["kill",{"_index":679,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["killablethread",{"_index":675,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["kthgrammar",{"_index":621,"text":{"coding/leetcode/779.html":{},"coding/leetcode/779.html#_2":{}},"title":{}}],["kwarg",{"_index":686,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["l",{"_index":290,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/13.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["l1",{"_index":428,"text":{"coding/leetcode/21.html":{},"coding/leetcode/21.html#_2":{}},"title":{}}],["l2",{"_index":429,"text":{"coding/leetcode/21.html":{},"coding/leetcode/21.html#_2":{}},"title":{}}],["l_q",{"_index":888,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{}},"title":{}}],["l_q&=\\sum_{i=",{"_index":1010,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["l_q&=\\sum_{i=0}^",{"_index":1022,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["l_q=0",{"_index":1008,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["lambda",{"_index":736,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{},"math/queue-theory/chapter-12.html#_6":{},"math/queue-theory/chapter-12.html#_9":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["lambda)=\\left",{"_index":862,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{}},"title":{}}],["lambda_",{"_index":887,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{}},"title":{}}],["lambda_0=\\lambda_1=\\cdots=\\lambda_n=\\lambda",{"_index":964,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mm1":{}},"title":{}}],["lambda_0\\delta",{"_index":909,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["lambda_i",{"_index":971,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["lambda_j+\\mu_j)\\delta",{"_index":905,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["lambda_j\\delta",{"_index":918,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["lambda_n",{"_index":895,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["lambda_{j",{"_index":914,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["land",{"_index":791,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_7":{}},"title":{}}],["langl",{"_index":831,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_9":{}},"title":{}}],["latex",{"_index":700,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#latex":{},"latex/environ.html":{},"latex/environ.html#_1":{},"latex/index.html":{},"latex/index.html#latex":{},"latex/slides.html":{}},"title":{"latex/cheatsheet.html#latex":{},"latex/environ.html":{},"latex/environ.html#latex":{},"latex/index.html#latex":{},"latex/slides.html#latex":{}}}],["layout",{"_index":65,"text":{"index.html":{}},"title":{"index.html#project-layout":{}}}],["lceil",{"_index":833,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_9":{}},"title":{}}],["lcf",{"_index":870,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_4":{}},"title":{}}],["leetcod",{"_index":78,"text":{"coding/index.html":{},"coding/index.html#_1":{},"coding/leetcode.html":{},"coding/leetcode/387.html":{},"coding/leetcode/387.html#_1":{}},"title":{"coding/leetcode.html#leetcode":{}}}],["leetcode/atoi",{"_index":83,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{}},"title":{}}],["left",{"_index":188,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["left(\\frac{\\mu_j+\\lambda_j}{\\mu{j+1}}\\right)p_j",{"_index":940,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["left(\\frac{\\rho_0^i}{(i",{"_index":1047,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["left(\\frac{\\rho_0}{s}\\right)^i\\frac{s}{",{"_index":1017,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["left(i\\frac{\\rho_0^i}{s!s^{i",{"_index":1051,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["leftbranch",{"_index":210,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{}},"title":{}}],["leftbranchs",{"_index":216,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{}},"title":{}}],["leftcolumns",{"_index":217,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{}},"title":{}}],["leftsiz",{"_index":211,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{}},"title":{}}],["len",{"_index":267,"text":{"coding/leetcode/122.html":{},"coding/leetcode/122.html#_2":{},"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{}},"title":{}}],["len1",{"_index":467,"text":{"coding/leetcode/28.html":{},"coding/leetcode/28.html#_2":{}},"title":{}}],["len2",{"_index":468,"text":{"coding/leetcode/28.html":{},"coding/leetcode/28.html#_2":{}},"title":{}}],["lencach",{"_index":595,"text":{"coding/leetcode/509.html":{},"coding/leetcode/509.html#_3":{}},"title":{}}],["length",{"_index":401,"text":{"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{}},"title":{}}],["leq",{"_index":520,"text":{"coding/leetcode/38.html":{},"coding/leetcode/38.html#_1":{},"latex/cheatsheet.html":{},"latex/cheatsheet.html#_6":{}},"title":{}}],["leqq",{"_index":785,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_6":{}},"title":{}}],["leqslant",{"_index":786,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_6":{}},"title":{}}],["levelord",{"_index":215,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{}},"title":{}}],["lfloor",{"_index":835,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_9":{}},"title":{}}],["lg",{"_index":812,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["light",{"_index":15,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["lim",{"_index":829,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["lim_{\\delta",{"_index":922,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["lim_{t\\rightarrow",{"_index":933,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["lim_{t\\rightarrow\\infti",{"_index":936,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["lime",{"_index":19,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["link",{"_index":396,"text":{"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_2":{}},"title":{}}],["list",{"_index":397,"text":{"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["listnod",{"_index":398,"text":{"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#_2":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["live",{"_index":54,"text":{"index.html":{},"index.html#commands":{}},"title":{}}],["ll",{"_index":462,"text":{"coding/leetcode/28.html":{},"coding/leetcode/28.html#_1":{},"latex/cheatsheet.html":{},"latex/cheatsheet.html#_6":{}},"title":{}}],["lll",{"_index":787,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_6":{}},"title":{}}],["ln",{"_index":811,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["lnot",{"_index":790,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_7":{}},"title":{}}],["localstorage.setitem(\"data",{"_index":38,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["log",{"_index":810,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["long",{"_index":610,"text":{"coding/leetcode/7.html":{},"coding/leetcode/7.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_2":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_2":{}},"title":{}}],["longestcommonprefix",{"_index":340,"text":{"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{}},"title":{}}],["lor",{"_index":792,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_7":{}},"title":{}}],["loveleetcod",{"_index":555,"text":{"coding/leetcode/387.html":{},"coding/leetcode/387.html#_1":{}},"title":{}}],["lviii",{"_index":311,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["m",{"_index":293,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_1":{},"coding/leetcode/88.html#_2":{},"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_5":{}},"title":{}}],["m/m/",{"_index":886,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{},"math/queue-theory/chapter-12.html#_8":{},"math/queue-theory/chapter-12.html#markov":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{"math/queue-theory/chapter-12.html#mms":{}}}],["m/m/1",{"_index":963,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mm1":{}},"title":{"math/queue-theory/chapter-12.html#mm1":{}}}],["malloc",{"_index":149,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_3":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["man",{"_index":268,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_1":{}},"title":{}}],["map",{"_index":420,"text":{"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{}},"title":{}}],["mapsiz",{"_index":165,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{}},"title":{}}],["markdown",{"_index":71,"text":{"index.html":{},"index.html#project-layout":{}},"title":{}}],["markov",{"_index":890,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_7":{},"math/queue-theory/chapter-12.html#markov":{}},"title":{"math/queue-theory/chapter-12.html#markov":{}}}],["mathbb",{"_index":702,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_1":{}},"title":{}}],["mathbb{a",{"_index":710,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_1":{}},"title":{}}],["mathbf",{"_index":705,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_1":{}},"title":{}}],["mathbf{a",{"_index":713,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_1":{}},"title":{}}],["mathcal",{"_index":701,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_1":{}},"title":{}}],["mathcal{a",{"_index":709,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_1":{}},"title":{}}],["mathemat",{"_index":323,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["mathfrak",{"_index":703,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_1":{}},"title":{}}],["mathfrak{a",{"_index":711,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_1":{}},"title":{}}],["mathit",{"_index":707,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_1":{}},"title":{}}],["mathit{a",{"_index":715,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_1":{}},"title":{}}],["mathit{fcf",{"_index":877,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_5":{}},"title":{}}],["mathrm",{"_index":708,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_1":{}},"title":{}}],["mathrm{a",{"_index":716,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_1":{}},"title":{}}],["mathrsf",{"_index":719,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_1":{}},"title":{}}],["mathscr",{"_index":718,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_1":{}},"title":{}}],["mathscr{a",{"_index":717,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_1":{}},"title":{}}],["mathsf",{"_index":704,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_1":{}},"title":{}}],["mathsf{a",{"_index":712,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_1":{}},"title":{}}],["matrix",{"_index":557,"text":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/48.html#_2":{}},"title":{}}],["matrixcols",{"_index":570,"text":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#_2":{}},"title":{}}],["matrixs",{"_index":569,"text":{"coding/leetcode/48.html":{},"coding/leetcode/48.html#_2":{}},"title":{}}],["max",{"_index":175,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/121.html":{},"coding/leetcode/121.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_2":{},"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["max(a",{"_index":155,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{}},"title":{}}],["max(x",{"_index":206,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_2":{}},"title":{}}],["max\\left\\{f(i",{"_index":409,"text":{"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{}},"title":{}}],["max\\{i",{"_index":976,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["maxprofit",{"_index":258,"text":{"coding/leetcode/121.html":{},"coding/leetcode/121.html#_2":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_2":{}},"title":{}}],["mcmxciv",{"_index":313,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["md",{"_index":29,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["memcpi",{"_index":214,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_2":{}},"title":{}}],["memset",{"_index":172,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_3":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#_2":{}},"title":{}}],["merg",{"_index":209,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_2":{}},"title":{}}],["mergetwolist",{"_index":427,"text":{"coding/leetcode/21.html":{},"coding/leetcode/21.html#_2":{}},"title":{}}],["messag",{"_index":63,"text":{"index.html":{},"index.html#commands":{}},"title":{}}],["method",{"_index":680,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["min",{"_index":174,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["min(a",{"_index":157,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{}},"title":{}}],["min(x",{"_index":246,"text":{"coding/leetcode/120.html":{},"coding/leetcode/120.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{}},"title":{}}],["minimumtot",{"_index":247,"text":{"coding/leetcode/120.html":{},"coding/leetcode/120.html#_2":{}},"title":{}}],["minstack",{"_index":354,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["minstack\",\"push\",\"push\",\"push\",\"getmin\",\"pop\",\"top\",\"getmin",{"_index":350,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{}},"title":{}}],["minstack.getmin",{"_index":357,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{}},"title":{}}],["minstack.pop",{"_index":358,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{}},"title":{}}],["minstack.push",{"_index":355,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{}},"title":{}}],["minstack.push(0",{"_index":356,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{}},"title":{}}],["minstack.top",{"_index":359,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{}},"title":{}}],["minstackcr",{"_index":366,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["minstackfre",{"_index":372,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["minstackfree(obj",{"_index":381,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["minstackgetmin",{"_index":371,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["minstackgetmin(obj",{"_index":380,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["minstackpop",{"_index":369,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["minstackpop(obj",{"_index":376,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["minstackpush",{"_index":367,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["minstackpush(obj",{"_index":375,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["minstacktop",{"_index":370,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["minstacktop(obj",{"_index":378,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["mkdoc",{"_index":2,"text":{"index.html":{},"index.html#commands":{}},"title":{"index.html#welcome-to-mkdocs":{}}}],["mkdocs.org",{"_index":7,"text":{"index.html":{},"index.html#welcome-to-mkdocs":{}},"title":{}}],["mkdocs.yml",{"_index":66,"text":{"index.html":{},"index.html#project-layout":{}},"title":{}}],["mu",{"_index":738,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{}},"title":{}}],["mu_1=\\cdots=\\mu_n=\\mu",{"_index":965,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mm1":{}},"title":{}}],["mu_1\\delta",{"_index":911,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["mu_i",{"_index":972,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["mu_j+\\lambda_j)p_j(t",{"_index":928,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["mu_j+\\lambda_j)p_j(t)=0",{"_index":938,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["mu_j\\delta",{"_index":903,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["mu_n",{"_index":894,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["myatoi",{"_index":633,"text":{"coding/leetcode/8.html":{},"coding/leetcode/8.html#_2":{}},"title":{}}],["mypow",{"_index":583,"text":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#_2":{}},"title":{}}],["n",{"_index":97,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_1":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_1":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_1":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_1":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{},"coding/leetcode/50.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{},"coding/leetcode/509.html#_3":{},"coding/leetcode/509.html#_4":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#_1":{},"coding/leetcode/70.html#_2":{},"coding/leetcode/779.html":{},"coding/leetcode/779.html#_1":{},"coding/leetcode/779.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_1":{},"coding/leetcode/88.html#_2":{},"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{},"math/queue-theory/chapter-12.html#_9":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{"coding/leetcode/19.html":{},"coding/leetcode/19.html#19-n":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#50-powx-n":{}}}],["n(l",{"_index":878,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{}},"title":{}}],["n(t",{"_index":900,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["n(t)=j",{"_index":904,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["n+1",{"_index":334,"text":{"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["n>",{"_index":1009,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["n>0",{"_index":897,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["n\\geq",{"_index":896,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["n\\leq",{"_index":1007,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["n\\leq30",{"_index":593,"text":{"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{}},"title":{}}],["n_q(l_q",{"_index":879,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{}},"title":{}}],["nagaram",{"_index":446,"text":{"coding/leetcode/242.html":{},"coding/leetcode/242.html#_1":{}},"title":{}}],["name",{"_index":49,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{},"index.html":{},"index.html#commands":{}},"title":{}}],["nav__title')[1].click",{"_index":45,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["needl",{"_index":460,"text":{"coding/leetcode/28.html":{},"coding/leetcode/28.html#_1":{},"coding/leetcode/28.html#_2":{}},"title":{}}],["new",{"_index":47,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_1":{},"index.html":{},"index.html#commands":{}},"title":{}}],["newretcols",{"_index":231,"text":{"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{}},"title":{}}],["next",{"_index":399,"text":{"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#_2":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_4":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["ni",{"_index":766,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_5":{}},"title":{}}],["node",{"_index":185,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#_1":{},"coding/leetcode/237.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["none",{"_index":693,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["note",{"_index":146,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{}},"title":{}}],["nu",{"_index":739,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["null",{"_index":176,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_1":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_3":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["null,null,null,nul",{"_index":352,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{}},"title":{}}],["num",{"_index":137,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_1":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/136.html":{},"coding/leetcode/136.html#_2":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_2":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{},"coding/leetcode/26.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_1":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["numrow",{"_index":221,"text":{"coding/leetcode/118.html":{},"coding/leetcode/118.html#_1":{},"coding/leetcode/118.html#_2":{}},"title":{}}],["nums.length",{"_index":406,"text":{"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{}},"title":{}}],["nums1",{"_index":490,"text":{"coding/leetcode/350.html":{},"coding/leetcode/350.html#_1":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_1":{},"coding/leetcode/88.html#_2":{}},"title":{}}],["nums1siz",{"_index":500,"text":{"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_2":{}},"title":{}}],["nums2",{"_index":492,"text":{"coding/leetcode/350.html":{},"coding/leetcode/350.html#_1":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_1":{},"coding/leetcode/88.html#_2":{}},"title":{}}],["nums2siz",{"_index":501,"text":{"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_2":{}},"title":{}}],["nums[0",{"_index":142,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_1":{}},"title":{}}],["nums[1",{"_index":143,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_1":{}},"title":{}}],["nums[i",{"_index":407,"text":{"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{}},"title":{}}],["numssiz",{"_index":163,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/136.html":{},"coding/leetcode/136.html#_2":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_2":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["o",{"_index":742,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["o\",\"l\",\"l\",\"e\",\"h",{"_index":485,"text":{"coding/leetcode/344.html":{},"coding/leetcode/344.html#_1":{}},"title":{}}],["o(1",{"_index":390,"text":{"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_1":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{},"coding/leetcode/344.html":{},"coding/leetcode/344.html#_1":{}},"title":{}}],["o(k",{"_index":235,"text":{"coding/leetcode/119.html":{},"coding/leetcode/119.html#_1":{}},"title":{}}],["o(n",{"_index":245,"text":{"coding/leetcode/120.html":{},"coding/leetcode/120.html#_1":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_1":{}},"title":{}}],["obj",{"_index":368,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["odot",{"_index":763,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_4":{}},"title":{}}],["oint_df(x)\\mathrm",{"_index":806,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["oldretcols",{"_index":229,"text":{"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{}},"title":{}}],["omega",{"_index":760,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["oplsubseteqqu",{"_index":770,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_5":{}},"title":{}}],["oplu",{"_index":764,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_4":{}},"title":{}}],["orang",{"_index":22,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["origin",{"_index":540,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_2":{}},"title":{}}],["otim",{"_index":765,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_4":{}},"title":{}}],["p",{"_index":275,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["p(n(t+\\delta",{"_index":898,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["p(n=n)=\\rho^n(1",{"_index":970,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mm1":{}},"title":{}}],["p_0",{"_index":945,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{},"math/queue-theory/chapter-12.html#mm1":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["p_0&=\\frac{1}{1+\\sum_{n=1}^\\infti",{"_index":980,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["p_0(t+\\delta",{"_index":908,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["p_0=\\frac{1}{1+\\sum_{n=1}^\\infti",{"_index":960,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{},"math/queue-theory/chapter-12.html#mm1":{}},"title":{}}],["p_1",{"_index":943,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["p_1=\\frac{\\lambda_0}{\\mu_1}p_0",{"_index":944,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["p_2&=\\left(\\frac{\\mu_1+\\lambda_1}{\\mu_2}\\right)p_1",{"_index":946,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["p_3&=\\left(\\frac{\\mu_2+\\lambda_2}{\\mu_3}\\right)p_2",{"_index":951,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["p_d",{"_index":885,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{}},"title":{}}],["p_d=\\sum_{i=s}^\\infti",{"_index":1000,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["p_i",{"_index":992,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["p_i=\\frac{\\lambda_0\\lambda_1\\cdots\\lambda_{i",{"_index":993,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["p_j",{"_index":935,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["p_j(t)}{\\delta",{"_index":924,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["p_j(t+\\delta",{"_index":913,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["p_n",{"_index":882,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["p_n=p(n=n)=\\lim_{t\\rightarrow",{"_index":883,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{}},"title":{}}],["p_{j+1",{"_index":939,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["page",{"_index":72,"text":{"index.html":{},"index.html#project-layout":{}},"title":{}}],["panama",{"_index":271,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_1":{}},"title":{}}],["param_1",{"_index":550,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["param_2",{"_index":552,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["param_3",{"_index":377,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["param_4",{"_index":379,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["partial",{"_index":809,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["phi",{"_index":754,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["pi",{"_index":743,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["pink",{"_index":10,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["plan",{"_index":269,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_1":{}},"title":{}}],["pluson",{"_index":605,"text":{"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{}},"title":{}}],["poisson",{"_index":860,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{},"math/queue-theory/chapter-12.html#_5":{},"math/queue-theory/chapter-12.html#_7":{}},"title":{"math/queue-theory/chapter-12.html#poisson":{}}}],["pop",{"_index":346,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{}},"title":{}}],["positions1",{"_index":518,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{}},"title":{}}],["positions2",{"_index":519,"text":{"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{}},"title":{}}],["pow(x",{"_index":96,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{}},"title":{"coding/leetcode/50.html":{},"coding/leetcode/50.html#50-powx-n":{}}}],["ppt\u901a\u5e38\u663e\u793appt",{"_index":845,"text":{"latex/slides.html":{},"latex/slides.html#latex":{}},"title":{}}],["price",{"_index":259,"text":{"coding/leetcode/121.html":{},"coding/leetcode/121.html#_2":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_2":{}},"title":{}}],["prices.length",{"_index":263,"text":{"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{}},"title":{}}],["prices[i",{"_index":265,"text":{"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{}},"title":{}}],["pricess",{"_index":260,"text":{"coding/leetcode/121.html":{},"coding/leetcode/121.html#_2":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_2":{}},"title":{}}],["primari",{"_index":31,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["primary\",this.dataset.mdcolorprimari",{"_index":39,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["print",{"_index":61,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{},"index.html":{},"index.html#commands":{}},"title":{}}],["print(nums[i",{"_index":455,"text":{"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{}},"title":{}}],["privat",{"_index":129,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{}},"title":{}}],["prod_i^n",{"_index":801,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["prod_{i=0}^{n}\\frac{\\lambda_{i",{"_index":961,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["prod_{i=0}^{n}\\frac{\\lambda}{\\max\\{i",{"_index":981,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["prod_{i=0}^{n}\\frac{\\lambda}{\\mu",{"_index":966,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mm1":{}},"title":{}}],["prod_{i}^{n",{"_index":802,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["profit",{"_index":261,"text":{"coding/leetcode/121.html":{},"coding/leetcode/121.html#_2":{}},"title":{}}],["project",{"_index":51,"text":{"index.html":{},"index.html#commands":{}},"title":{"index.html#project-layout":{}}}],["protect",{"_index":135,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{}},"title":{}}],["provid",{"_index":678,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["ps",{"_index":871,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_4":{}},"title":{}}],["psi",{"_index":758,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["public",{"_index":136,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{}},"title":{}}],["purpl",{"_index":11,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["push",{"_index":345,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{}},"title":{}}],["push(x",{"_index":348,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{}},"title":{}}],["py_object",{"_index":667,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["python",{"_index":79,"text":{"coding/index.html":{},"coding/index.html#_1":{},"coding/python.html":{},"coding/python.html#_1":{},"coding/python/killable-thread.html":{}},"title":{"coding/python.html#python":{},"coding/python/killable-thread.html#python":{}}}],["pythonapi",{"_index":666,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["pythreadstate_setasyncexc",{"_index":643,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["qquad",{"_index":973,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["qsort",{"_index":435,"text":{"coding/leetcode/217.html":{},"coding/leetcode/217.html#_2":{}},"title":{}}],["race",{"_index":272,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_1":{}},"title":{}}],["rais",{"_index":670,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["raise_except",{"_index":663,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["rand",{"_index":547,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["random",{"_index":542,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["rangl",{"_index":832,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_9":{}},"title":{}}],["rank",{"_index":130,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{}},"title":{}}],["rat",{"_index":447,"text":{"coding/leetcode/242.html":{},"coding/leetcode/242.html#_1":{}},"title":{}}],["rceil",{"_index":834,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_9":{}},"title":{}}],["re",{"_index":665,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["rec",{"_index":230,"text":{"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["rec_siz",{"_index":343,"text":{"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{}},"title":{}}],["recur",{"_index":237,"text":{"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{}},"title":{}}],["red",{"_index":9,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["refer",{"_index":145,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_1":{},"coding/leetcode/101.html":{},"coding/leetcode/101.html#_1":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_1":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_1":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_1":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_1":{},"coding/leetcode/121.html":{},"coding/leetcode/121.html#_1":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_1":{},"coding/leetcode/125.html":{},"coding/leetcode/125.html#_1":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/136.html":{},"coding/leetcode/136.html#_1":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_1":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#_1":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_1":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_1":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_1":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_1":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_1":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_1":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_1":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#_1":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_1":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_1":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{},"coding/leetcode/28.html":{},"coding/leetcode/28.html#_1":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_1":{},"coding/leetcode/344.html":{},"coding/leetcode/344.html#_1":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_1":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_1":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_1":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/387.html":{},"coding/leetcode/387.html#_1":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_1":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_1":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_1":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_1":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#_1":{},"coding/leetcode/779.html":{},"coding/leetcode/779.html#_1":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_1":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_1":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_1":{}},"title":{}}],["reload",{"_index":55,"text":{"index.html":{},"index.html#commands":{}},"title":{}}],["remov",{"_index":117,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_2":{}},"title":{}}],["removedupl",{"_index":456,"text":{"coding/leetcode/26.html":{},"coding/leetcode/26.html#_2":{}},"title":{}}],["removeduplicates(num",{"_index":454,"text":{"coding/leetcode/26.html":{},"coding/leetcode/26.html#_1":{}},"title":{}}],["removenthfromend",{"_index":400,"text":{"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{}},"title":{}}],["reset",{"_index":539,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["respect",{"_index":658,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["result",{"_index":692,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["ret",{"_index":167,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/136.html":{},"coding/leetcode/136.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_4":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["retcur",{"_index":527,"text":{"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{}},"title":{}}],["retsiz",{"_index":228,"text":{"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["return",{"_index":147,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_2":{},"coding/leetcode/121.html":{},"coding/leetcode/121.html#_2":{},"coding/leetcode/122.html":{},"coding/leetcode/122.html#_2":{},"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/136.html":{},"coding/leetcode/136.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_2":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_2":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_2":{},"coding/leetcode/26.html":{},"coding/leetcode/26.html#_2":{},"coding/leetcode/28.html":{},"coding/leetcode/28.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/344.html":{},"coding/leetcode/344.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/387.html":{},"coding/leetcode/387.html#_2":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_3":{},"coding/leetcode/509.html#_4":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_2":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#_2":{},"coding/leetcode/779.html":{},"coding/leetcode/779.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_2":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{},"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["returncol",{"_index":220,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{}},"title":{}}],["returncolumns",{"_index":203,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{}},"title":{}}],["returns",{"_index":164,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{}},"title":{}}],["revers",{"_index":391,"text":{"coding/leetcode/189.html":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_2":{}},"title":{}}],["reverselist",{"_index":425,"text":{"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{}},"title":{}}],["reversestr",{"_index":487,"text":{"coding/leetcode/344.html":{},"coding/leetcode/344.html#_2":{}},"title":{}}],["rfloor",{"_index":836,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_9":{}},"title":{}}],["rho",{"_index":746,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{},"math/queue-theory/chapter-12.html#mm1":{}},"title":{}}],["rho)}\\frac{\\rho_0/s}{1",{"_index":1018,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho^n}=1",{"_index":969,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mm1":{}},"title":{}}],["rho^n}=\\frac{1}{\\sum_{n=0}^\\infti",{"_index":968,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mm1":{}},"title":{}}],["rho_0",{"_index":989,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0)^2",{"_index":1021,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0)t+\\rho_0^",{"_index":1006,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0)}=\\frac{\\rho^s_0}{(",{"_index":1005,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0)}\\right",{"_index":996,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0)}\\right)}\\right",{"_index":1049,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0)}{(",{"_index":1041,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0)}{\\lambda(t(",{"_index":1060,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0)}{t(",{"_index":1053,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0+1)/(",{"_index":1056,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0/",{"_index":1019,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0=\\frac{\\lambda}{\\mu",{"_index":979,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0^",{"_index":1054,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0^s}}{\\lambda",{"_index":1057,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0^{s+1}(",{"_index":1059,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rho_0^{s+1}}{(",{"_index":1039,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["right",{"_index":189,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["rightarrow",{"_index":929,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["rightbranch",{"_index":212,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{}},"title":{}}],["rightbranchs",{"_index":218,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{}},"title":{}}],["rightcolumns",{"_index":219,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{}},"title":{}}],["rightsiz",{"_index":213,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{}},"title":{}}],["rob",{"_index":412,"text":{"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{}},"title":{}}],["romantoint",{"_index":324,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_2":{}},"title":{}}],["root",{"_index":196,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["root1",{"_index":192,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{}},"title":{}}],["root2",{"_index":193,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{}},"title":{}}],["rotat",{"_index":393,"text":{"coding/leetcode/189.html":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_2":{}},"title":{}}],["rowindex",{"_index":238,"text":{"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{}},"title":{}}],["run",{"_index":652,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["s",{"_index":279,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_1":{},"coding/leetcode/242.html#_2":{},"coding/leetcode/344.html":{},"coding/leetcode/344.html#_2":{},"coding/leetcode/387.html":{},"coding/leetcode/387.html#_1":{},"coding/leetcode/387.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["s)\\frac{\\rho^i_0}{s!s^{i",{"_index":1013,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["s)p_i",{"_index":1012,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["s1",{"_index":282,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{}},"title":{}}],["s2",{"_index":283,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{}},"title":{}}],["s\\}\\mu",{"_index":977,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["search",{"_index":120,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_2":{}},"title":{}}],["seed",{"_index":545,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["self",{"_index":651,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["serv",{"_index":52,"text":{"index.html":{},"index.html#commands":{}},"title":{}}],["server",{"_index":57,"text":{"index.html":{},"index.html#commands":{}},"title":{}}],["set",{"_index":115,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_2":{}},"title":{}}],["shuffl",{"_index":543,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["sigma",{"_index":748,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["sim",{"_index":788,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_6":{}},"title":{}}],["sin",{"_index":815,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["singlenumb",{"_index":330,"text":{"coding/leetcode/136.html":{},"coding/leetcode/136.html#_2":{}},"title":{}}],["singli",{"_index":395,"text":{"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_2":{}},"title":{}}],["sinh",{"_index":819,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["site",{"_index":59,"text":{"index.html":{},"index.html#commands":{}},"title":{}}],["size",{"_index":114,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["sizeof",{"_index":168,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{},"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/509.html":{},"coding/leetcode/509.html#_3":{},"coding/leetcode/66.html":{},"coding/leetcode/66.html#_2":{},"coding/leetcode/70.html":{},"coding/leetcode/70.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["sleep",{"_index":673,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["solut",{"_index":532,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_1":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["solution(num",{"_index":533,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_1":{}},"title":{}}],["solution.reset",{"_index":535,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_1":{}},"title":{}}],["solution.shuffl",{"_index":534,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_1":{}},"title":{}}],["solutioncr",{"_index":538,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["solutioncreate(num",{"_index":549,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["solutionfre",{"_index":548,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["solutionfree(obj",{"_index":554,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["solutionreset",{"_index":541,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["solutionreset(obj",{"_index":551,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["solutionshuffl",{"_index":544,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["solutionshuffle(obj",{"_index":553,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["sort",{"_index":121,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_2":{}},"title":{}}],["sp_i",{"_index":1024,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["sq",{"_index":422,"text":{"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{}},"title":{}}],["sqrt",{"_index":417,"text":{"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{}},"title":{}}],["sqrt[x]{i",{"_index":803,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["srand",{"_index":546,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["src",{"_index":479,"text":{"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{}},"title":{}}],["ssize",{"_index":488,"text":{"coding/leetcode/344.html":{},"coding/leetcode/344.html#_2":{}},"title":{}}],["start",{"_index":53,"text":{"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{},"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{},"index.html":{},"index.html#commands":{}},"title":{}}],["step",{"_index":457,"text":{"coding/leetcode/26.html":{},"coding/leetcode/26.html#_2":{}},"title":{}}],["stop",{"_index":681,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["str",{"_index":341,"text":{"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{},"coding/leetcode/8.html":{},"coding/leetcode/8.html#_2":{}},"title":{}}],["str1",{"_index":336,"text":{"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{}},"title":{}}],["str2",{"_index":337,"text":{"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{}},"title":{}}],["strcpi",{"_index":529,"text":{"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{}},"title":{}}],["strlen",{"_index":286,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/28.html":{},"coding/leetcode/28.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{}},"title":{}}],["strssize",{"_index":342,"text":{"coding/leetcode/14.html":{},"coding/leetcode/14.html#_2":{}},"title":{}}],["strstr",{"_index":458,"text":{"coding/leetcode/28.html":{},"coding/leetcode/28.html#_1":{},"coding/leetcode/28.html#_2":{}},"title":{"coding/leetcode/28.html":{},"coding/leetcode/28.html#28-strstr":{}}}],["strstr(leetcod",{"_index":91,"text":{"coding/leetcode.html":{},"coding/leetcode.html#leetcode":{}},"title":{}}],["struct",{"_index":158,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#_2":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["structur",{"_index":365,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["sub",{"_index":477,"text":{"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{}},"title":{}}],["subset",{"_index":767,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_5":{}},"title":{}}],["subseteq",{"_index":768,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_5":{}},"title":{}}],["subseteqq",{"_index":769,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_5":{}},"title":{}}],["subsetneq",{"_index":771,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_5":{}},"title":{}}],["subsetneqq",{"_index":772,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_5":{}},"title":{}}],["subtitl",{"_index":847,"text":{"latex/slides.html":{},"latex/slides.html#latex":{}},"title":{}}],["success",{"_index":469,"text":{"coding/leetcode/28.html":{},"coding/leetcode/28.html#_2":{}},"title":{}}],["such",{"_index":374,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["sum_i^n",{"_index":798,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["sum_{i=0}^",{"_index":1025,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["sum_{i=0}^{",{"_index":990,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["sum_{i=s+1}^\\infti",{"_index":1050,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["sum_{i=s}^\\infti",{"_index":1001,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["sum_{i}^{n",{"_index":800,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["super",{"_index":687,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["supset",{"_index":773,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_5":{}},"title":{}}],["supseteq",{"_index":774,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_5":{}},"title":{}}],["supseteqq",{"_index":775,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_5":{}},"title":{}}],["supsetneq",{"_index":776,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_5":{}},"title":{}}],["supsetneqq",{"_index":777,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_5":{}},"title":{}}],["swappair",{"_index":442,"text":{"coding/leetcode/24.html":{},"coding/leetcode/24.html#_2":{}},"title":{}}],["switch",{"_index":325,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_2":{}},"title":{}}],["systemexit",{"_index":668,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["s}\\left(t+\\frac{\\rho_0^s}{(",{"_index":999,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["s}}p_0",{"_index":1003,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["s}}p_0=\\frac{\\rho_0^i}{s!s^{i",{"_index":998,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["t",{"_index":126,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_1":{},"coding/leetcode/242.html#_2":{},"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["t(w",{"_index":880,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{}},"title":{}}],["t)=j",{"_index":902,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["t)=j+1",{"_index":899,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["t)^{k",{"_index":867,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{}},"title":{}}],["t)p_0(t",{"_index":910,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["t)p_j(t)+\\mu_{j+1}\\delta",{"_index":919,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["t+1)(",{"_index":1038,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["t+1}{t+\\frac{\\rho_0^s}{(",{"_index":1035,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["t+\\delta",{"_index":906,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["t1",{"_index":672,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["t<t_0",{"_index":892,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#markov":{}},"title":{}}],["t=\\alpha",{"_index":857,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{}},"title":{}}],["t\\geq",{"_index":863,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{}},"title":{}}],["t\\not",{"_index":858,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_3":{}},"title":{}}],["t\\rightarrow",{"_index":921,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["t_0",{"_index":891,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#markov":{}},"title":{}}],["t_q(w_q",{"_index":881,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{}},"title":{}}],["tail",{"_index":288,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{}},"title":{}}],["tan",{"_index":817,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["tanh",{"_index":821,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_8":{}},"title":{}}],["target",{"_index":138,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_1":{},"coding/leetcode/1.html#_2":{},"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["targetv",{"_index":169,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{}},"title":{}}],["tau",{"_index":751,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["teal",{"_index":17,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["temp",{"_index":392,"text":{"coding/leetcode/189.html":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/344.html":{},"coding/leetcode/344.html#_2":{},"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_2":{}},"title":{}}],["temp1",{"_index":443,"text":{"coding/leetcode/24.html":{},"coding/leetcode/24.html#_2":{}},"title":{}}],["temp2",{"_index":444,"text":{"coding/leetcode/24.html":{},"coding/leetcode/24.html#_2":{}},"title":{}}],["temparray",{"_index":232,"text":{"coding/leetcode/118.html":{},"coding/leetcode/118.html#_2":{}},"title":{}}],["templat",{"_index":124,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{}},"title":{}}],["temptre",{"_index":482,"text":{"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{}},"title":{}}],["testcas",{"_index":611,"text":{"coding/leetcode/7.html":{},"coding/leetcode/7.html#_2":{}},"title":{}}],["theta",{"_index":731,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["this.dataset.mdcoloracc",{"_index":42,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["this.dataset.mdcolorprimari",{"_index":37,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["thread",{"_index":645,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["thread_id",{"_index":664,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["thread_with_except",{"_index":648,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["threading.thread",{"_index":677,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["time",{"_index":647,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{},"latex/cheatsheet.html":{},"latex/cheatsheet.html#_4":{}},"title":{}}],["times1",{"_index":497,"text":{"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{}},"title":{}}],["times2",{"_index":498,"text":{"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{}},"title":{}}],["titl",{"_index":846,"text":{"latex/slides.html":{},"latex/slides.html#latex":{}},"title":{}}],["titlepag",{"_index":852,"text":{"latex/slides.html":{},"latex/slides.html#latex":{}},"title":{}}],["tmp",{"_index":598,"text":{"coding/leetcode/509.html":{},"coding/leetcode/509.html#_4":{}},"title":{}}],["today",{"_index":851,"text":{"latex/slides.html":{},"latex/slides.html#latex":{}},"title":{}}],["tolist",{"_index":641,"text":{"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["top",{"_index":347,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{},"coding/leetcode/155.html#_2":{}},"title":{}}],["tostr",{"_index":525,"text":{"coding/leetcode/38.html":{},"coding/leetcode/38.html#_2":{}},"title":{}}],["tp_1(t",{"_index":912,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["tp_{j",{"_index":916,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["tp_{j+1}(t",{"_index":920,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["transform",{"_index":638,"text":{"coding/leetcode/9.html":{},"coding/leetcode/9.html#_2":{}},"title":{}}],["travers",{"_index":118,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_2":{}},"title":{}}],["tree",{"_index":184,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["treenod",{"_index":186,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["treenode2",{"_index":476,"text":{"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{}},"title":{}}],["tri",{"_index":653,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["triangl",{"_index":248,"text":{"coding/leetcode/120.html":{},"coding/leetcode/120.html#_2":{}},"title":{}}],["trianglecols",{"_index":250,"text":{"coding/leetcode/120.html":{},"coding/leetcode/120.html#_2":{}},"title":{}}],["triangles",{"_index":249,"text":{"coding/leetcode/120.html":{},"coding/leetcode/120.html#_2":{}},"title":{}}],["true",{"_index":197,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/125.html":{},"coding/leetcode/125.html#_1":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_1":{},"coding/leetcode/217.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_1":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/242.html":{},"coding/leetcode/242.html#_1":{},"coding/leetcode/242.html#_2":{},"coding/leetcode/36.html":{},"coding/leetcode/36.html#_1":{},"coding/leetcode/36.html#_2":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_1":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_1":{},"coding/leetcode/98.html#_2":{},"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["tupl",{"_index":691,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["twosum",{"_index":162,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{}},"title":{}}],["typedef",{"_index":361,"text":{"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["typenam",{"_index":125,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{}},"title":{}}],["t}=\\lambda_{j",{"_index":925,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["unicod",{"_index":448,"text":{"coding/leetcode/242.html":{},"coding/leetcode/242.html#_1":{}},"title":{}}],["unit",{"_index":622,"text":{"coding/leetcode/779.html":{},"coding/leetcode/779.html#_2":{}},"title":{}}],["unsign",{"_index":419,"text":{"coding/leetcode/204.html":{},"coding/leetcode/204.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["upsilon",{"_index":752,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["usepackage{enumer",{"_index":841,"text":{"latex/environ.html":{},"latex/environ.html#enumerate":{}},"title":{}}],["v",{"_index":289,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/13.html#_2":{}},"title":{}}],["val",{"_index":187,"text":{"coding/leetcode/101.html":{},"coding/leetcode/101.html#_2":{},"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/19.html":{},"coding/leetcode/19.html#_2":{},"coding/leetcode/206.html":{},"coding/leetcode/206.html#_2":{},"coding/leetcode/21.html":{},"coding/leetcode/21.html#_2":{},"coding/leetcode/234.html":{},"coding/leetcode/234.html#_2":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#_2":{},"coding/leetcode/24.html":{},"coding/leetcode/24.html#_2":{},"coding/leetcode/315.html":{},"coding/leetcode/315.html#_2":{},"coding/leetcode/98.html":{},"coding/leetcode/98.html#_2":{}},"title":{}}],["valu",{"_index":160,"text":{"coding/leetcode/1.html":{},"coding/leetcode/1.html#_2":{},"coding/leetcode/121.html":{},"coding/leetcode/121.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["var",{"_index":26,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["vardelta",{"_index":725,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["varepsilon",{"_index":728,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["vargamma",{"_index":723,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["varkappa",{"_index":735,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["varlambda",{"_index":737,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["varomega",{"_index":761,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["varphi",{"_index":755,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["varphi,\\varphi",{"_index":756,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["varpi",{"_index":744,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["varpi,\\varpi",{"_index":745,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["varpsi",{"_index":759,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["varrho",{"_index":747,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["varsigma",{"_index":749,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["varsigma,\\varsigma",{"_index":750,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["vartheta,\\vartheta",{"_index":732,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["varupsilon",{"_index":753,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["varxi",{"_index":741,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["vdot",{"_index":954,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_9":{}},"title":{}}],["vector",{"_index":128,"text":{"coding/dsa/vector-and-list.html":{},"coding/dsa/vector-and-list.html#_3":{}},"title":{}}],["visit",{"_index":6,"text":{"index.html":{},"index.html#welcome-to-mkdocs":{}},"title":{}}],["void",{"_index":236,"text":{"coding/leetcode/119.html":{},"coding/leetcode/119.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/189.html":{},"coding/leetcode/189.html#_2":{},"coding/leetcode/217.html":{},"coding/leetcode/217.html#_2":{},"coding/leetcode/237.html":{},"coding/leetcode/237.html#_2":{},"coding/leetcode/344.html":{},"coding/leetcode/344.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/48.html":{},"coding/leetcode/48.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_2":{}},"title":{}}],["w",{"_index":630,"text":{"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{}},"title":{}}],["w&=\\frac{l}{\\lambda",{"_index":1043,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["w=\\frac{l}{\\lambda",{"_index":1042,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#mms":{}},"title":{}}],["w_q",{"_index":889,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_6":{}},"title":{}}],["way",{"_index":699,"text":{"coding/python/killable-thread.html":{},"coding/python/killable-thread.html#python":{}},"title":{}}],["welcom",{"_index":1,"text":{"index.html":{}},"title":{"index.html#welcome-to-mkdocs":{}}}],["white",{"_index":25,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["word",{"_index":628,"text":{"coding/leetcode/8.html":{},"coding/leetcode/8.html#_1":{}},"title":{}}],["x",{"_index":208,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_2":{},"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{},"coding/leetcode/13.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_1":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/50.html":{},"coding/leetcode/50.html#_1":{},"coding/leetcode/50.html#_2":{},"coding/leetcode/7.html":{},"coding/leetcode/7.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_2":{},"coding/leetcode/9.html":{},"coding/leetcode/9.html#_2":{},"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_5":{}},"title":{}}],["x/y/z/a/b/c",{"_index":873,"text":{"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_5":{}},"title":{}}],["xc",{"_index":316,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["xi",{"_index":740,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}],["xii",{"_index":298,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["xlix",{"_index":320,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["xx",{"_index":301,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["xxvii",{"_index":300,"text":{"coding/leetcode/13.html":{},"coding/leetcode/13.html#_1":{}},"title":{}}],["y",{"_index":207,"text":{"coding/leetcode/102.html":{},"coding/leetcode/102.html#_2":{},"coding/leetcode/120.html":{},"coding/leetcode/120.html#_2":{},"coding/leetcode/155.html":{},"coding/leetcode/155.html#_2":{},"coding/leetcode/198.html":{},"coding/leetcode/198.html#_2":{},"coding/leetcode/350.html":{},"coding/leetcode/350.html#_2":{},"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{},"coding/leetcode/88.html":{},"coding/leetcode/88.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_5":{}},"title":{}}],["yate",{"_index":537,"text":{"coding/leetcode/384.html":{},"coding/leetcode/384.html#_2":{}},"title":{}}],["yellow",{"_index":20,"text":{"index.html":{},"index.html#customization":{}},"title":{}}],["z",{"_index":280,"text":{"coding/leetcode/125.html":{},"coding/leetcode/125.html#_2":{},"coding/leetcode/14.html":{},"coding/leetcode/14.html#_1":{},"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{},"math/queue-theory/chapter-12.html":{},"math/queue-theory/chapter-12.html#_5":{}},"title":{}}],["zeta",{"_index":729,"text":{"latex/cheatsheet.html":{},"latex/cheatsheet.html#_2":{}},"title":{}}]],"pipeline":["stemmer"],"version":"2.3.8"}}